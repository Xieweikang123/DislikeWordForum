<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Furion.Pure</name>
    </assembly>
    <members>
        <member name="T:Furion.App">
            <summary>
            全局应用类
            </summary>
        </member>
        <member name="F:Furion.App._settings">
            <summary>
            私有设置，避免重复解析
            </summary>
        </member>
        <member name="P:Furion.App.Settings">
            <summary>
            应用全局配置
            </summary>
        </member>
        <member name="P:Furion.App.Configuration">
            <summary>
            全局配置选项
            </summary>
        </member>
        <member name="P:Furion.App.WebHostEnvironment">
            <summary>
            获取Web主机环境，如，是否是开发环境，生产环境等
            </summary>
        </member>
        <member name="P:Furion.App.HostEnvironment">
            <summary>
            获取泛型主机环境，如，是否是开发环境，生产环境等
            </summary>
        </member>
        <member name="P:Furion.App.RootServices">
            <summary>
            存储根服务，可能为空
            </summary>
        </member>
        <member name="P:Furion.App.SingleFileEnvironment">
            <summary>
            判断是否是单文件环境
            </summary>
        </member>
        <member name="F:Furion.App.Assemblies">
            <summary>
            应用有效程序集
            </summary>
        </member>
        <member name="F:Furion.App.EffectiveTypes">
            <summary>
            有效程序集类型
            </summary>
        </member>
        <member name="P:Furion.App.HttpContext">
            <summary>
            获取请求上下文
            </summary>
        </member>
        <member name="P:Furion.App.User">
            <summary>
            获取请求上下文用户
            </summary>
            <remarks>只有授权访问的页面或接口才存在值，否则为 null</remarks>
        </member>
        <member name="F:Furion.App.UnmanagedObjects">
            <summary>
            未托管的对象集合
            </summary>
        </member>
        <member name="M:Furion.App.GetServiceProvider(System.Type)">
            <summary>
            解析服务提供器
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.App.GetService``1(System.IServiceProvider)">
            <summary>
            获取请求生存周期的服务
            </summary>
            <typeparam name="TService"></typeparam>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.App.GetService(System.Type,System.IServiceProvider)">
            <summary>
            获取请求生存周期的服务
            </summary>
            <param name="type"></param>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.App.GetRequiredService``1(System.IServiceProvider)">
            <summary>
            获取请求生存周期的服务
            </summary>
            <typeparam name="TService"></typeparam>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.App.GetRequiredService(System.Type,System.IServiceProvider)">
            <summary>
            获取请求生存周期的服务
            </summary>
            <param name="type"></param>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.App.GetConfig``1(System.String,System.Boolean)">
            <summary>
            获取配置
            </summary>
            <typeparam name="TOptions">强类型选项类</typeparam>
            <param name="path">配置中对应的Key</param>
            <param name="loadPostConfigure"></param>
            <returns>TOptions</returns>
        </member>
        <member name="M:Furion.App.GetOptions``1(System.IServiceProvider)">
            <summary>
            获取选项
            </summary>
            <typeparam name="TOptions">强类型选项类</typeparam>
            <param name="serviceProvider"></param>
            <returns>TOptions</returns>
        </member>
        <member name="M:Furion.App.GetOptionsMonitor``1(System.IServiceProvider)">
            <summary>
            获取选项
            </summary>
            <typeparam name="TOptions">强类型选项类</typeparam>
            <param name="serviceProvider"></param>
            <returns>TOptions</returns>
        </member>
        <member name="M:Furion.App.GetOptionsSnapshot``1(System.IServiceProvider)">
            <summary>
            获取选项
            </summary>
            <typeparam name="TOptions">强类型选项类</typeparam>
            <param name="serviceProvider"></param>
            <returns>TOptions</returns>
        </member>
        <member name="M:Furion.App.GetCommandLineConfiguration(System.String[],System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            获取命令行配置
            </summary>
            <param name="args"></param>
            <param name="switchMappings"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.App.PrintToMiniProfiler(System.String,System.String,System.String,System.Boolean)">
            <summary>
            打印验证信息到 MiniProfiler
            </summary>
            <param name="category">分类</param>
            <param name="state">状态</param>
            <param name="message">消息</param>
            <param name="isError">是否为警告消息</param>
        </member>
        <member name="M:Furion.App.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Furion.App.AppStartups">
            <summary>
            应用所有启动配置对象
            </summary>
        </member>
        <member name="F:Furion.App.ExternalAssemblies">
            <summary>
            外部程序集
            </summary>
        </member>
        <member name="M:Furion.App.GetAssemblies">
            <summary>
            获取应用有效程序集
            </summary>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Furion.App.GetTypes(System.Reflection.Assembly)">
            <summary>
            加载程序集中的所有类型
            </summary>
            <param name="ass"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.App.CanBeMiniProfiler">
            <summary>
            判断是否启用 MiniProfiler
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.App.DisposeUnmanagedObjects">
            <summary>
            释放所有未托管的对象
            </summary>
        </member>
        <member name="T:Furion.AppStartupAttribute">
            <summary>
            注册服务启动配置
            </summary>
        </member>
        <member name="M:Furion.AppStartupAttribute.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="order"></param>
        </member>
        <member name="P:Furion.AppStartupAttribute.Order">
            <summary>
            排序
            </summary>
        </member>
        <member name="T:Furion.Extensions.ObjectExtensions">
            <summary>
            对象拓展类
            </summary>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.ConvertToDateTime(System.DateTimeOffset)">
            <summary>
            将 DateTimeOffset 转换成本地 DateTime
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.ConvertToDateTime(System.Nullable{System.DateTimeOffset})">
            <summary>
            将 DateTimeOffset? 转换成本地 DateTime?
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.ConvertToDateTimeOffset(System.DateTime)">
            <summary>
            将 DateTime 转换成 DateTimeOffset
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.ConvertToDateTimeOffset(System.Nullable{System.DateTime})">
            <summary>
            将 DateTime? 转换成 DateTimeOffset?
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.ToByteArray(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            将 IFormFile 转换成 byte[]
            </summary>
            <param name="formFile"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.IsRichPrimitive(System.Type)">
            <summary>
            判断是否是富基元类型
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.AddOrUpdate``1(System.Collections.Generic.Dictionary{System.String,``0},System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            合并两个字典
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dic">字典</param>
            <param name="newDic">新字典</param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.AddOrUpdate``1(System.Collections.Concurrent.ConcurrentDictionary{System.String,``0},System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            合并两个字典
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dic">字典</param>
            <param name="newDic">新字典</param>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.IsValueTuple(System.Type)">
            <summary>
            判断是否是元组类型
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.IsAsync(System.Reflection.MethodInfo)">
            <summary>
            判断方法是否是异步
            </summary>
            <param name="method">方法</param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.HasImplementedRawGeneric(System.Type,System.Type)">
            <summary>
            判断类型是否实现某个泛型
            </summary>
            <param name="type">类型</param>
            <param name="generic">泛型类型</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.IsAnonymous(System.Object)">
            <summary>
            判断是否是匿名类型
            </summary>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.GetAncestorTypes(System.Type)">
            <summary>
            获取所有祖先类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.GetRealReturnType(System.Reflection.MethodInfo)">
            <summary>
            获取方法真实返回类型
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.ChangeType``1(System.Object)">
            <summary>
            将一个对象转换为指定类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.ChangeType(System.Object,System.Type)">
            <summary>
            将一个对象转换为指定类型
            </summary>
            <param name="obj">待转换的对象</param>
            <param name="type">目标类型</param>
            <returns>转换后的对象</returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.GetFoundAttribute``1(System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            查找方法指定特性，如果没找到则继续查找声明类
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="method"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.Format(System.String,System.Object[])">
            <summary>
            格式化字符串
            </summary>
            <param name="str"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.SplitCamelCase(System.String)">
            <summary>
            切割骆驼命名式字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.ToObject(System.Text.Json.JsonElement)">
            <summary>
            JsonElement 转 Object
            </summary>
            <param name="jsonElement"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.ClearStringAffixes(System.String,System.Int32,System.String[])">
            <summary>
            清除字符串前后缀
            </summary>
            <param name="str">字符串</param>
            <param name="pos">0：前后缀，1：后缀，-1：前缀</param>
            <param name="affixes">前后缀集合</param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.ToLowerCamelCase(System.String)">
            <summary>
            首字母小写
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.ToUpperCamelCase(System.String)">
            <summary>
            首字母大写
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            判断集合是否为空
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection">集合对象</param>
            <returns><see cref="T:System.Boolean"/> 实例，true 表示空集合，false 表示非空集合</returns>
        </member>
        <member name="M:Furion.Extensions.ObjectExtensions.GetTypeAttribute``1(System.Type,System.Boolean)">
            <summary>
            获取类型自定义特性
            </summary>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="type">类类型</param>
            <param name="inherit">是否继承查找</param>
            <returns>特性对象</returns>
        </member>
        <member name="T:Furion.AddInjectOptions">
            <summary>
            AddInject 配置选项
            </summary>
        </member>
        <member name="M:Furion.AddInjectOptions.ConfigureSwaggerGen(System.Action{Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions})">
            <summary>
            配置 Swagger Gen
            </summary>
            <param name="configure"></param>
        </member>
        <member name="M:Furion.AddInjectOptions.ConfigureDataValidation(System.Action{Furion.DataValidation.DataValidationOptions})">
            <summary>
            配置 DataValidation
            </summary>
            <param name="configure"></param>
        </member>
        <member name="M:Furion.AddInjectOptions.ConfigureFriendlyException(System.Action{Furion.FriendlyException.FriendlyExceptionOptions})">
            <summary>
            配置 FriendlyException
            </summary>
            <param name="configure"></param>
        </member>
        <member name="P:Furion.AddInjectOptions.SwaggerGenConfigure">
            <summary>
            Swagger Gen 配置
            </summary>
        </member>
        <member name="P:Furion.AddInjectOptions.DataValidationConfigure">
            <summary>
            DataValidation 配置
            </summary>
        </member>
        <member name="P:Furion.AddInjectOptions.FriendlyExceptionConfigure">
            <summary>
            FriendlyException 配置
            </summary>
        </member>
        <member name="T:Furion.UseInjectOptions">
            <summary>
            UseInject 配置选项
            </summary>
        </member>
        <member name="M:Furion.UseInjectOptions.ConfigureSwagger(System.Action{Swashbuckle.AspNetCore.Swagger.SwaggerOptions})">
            <summary>
            配置 Swagger
            </summary>
            <param name="configure"></param>
        </member>
        <member name="M:Furion.UseInjectOptions.ConfigureSwaggerUI(System.Action{Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions})">
            <summary>
            配置 Swagger UI
            </summary>
            <param name="configure"></param>
        </member>
        <member name="P:Furion.UseInjectOptions.SwaggerConfigure">
            <summary>
            Swagger 配置
            </summary>
        </member>
        <member name="P:Furion.UseInjectOptions.SwaggerUIConfigure">
            <summary>
            Swagger UI 配置
            </summary>
        </member>
        <member name="T:Furion.StartupFilter">
            <summary>
            应用启动时自动注册中间件
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Furion.StartupFilter.Configure(System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})">
            <summary>
            配置中间件
            </summary>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.StartupFilter.UseStartups(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            配置 Startup 的 Configure
            </summary>
            <param name="app">应用构建器</param>
        </member>
        <member name="M:Furion.StartupFilter.UseStartups(System.Collections.Generic.IEnumerable{Furion.AppStartup},Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            批量将自定义 AppStartup 添加到 Startup.cs 的 Configure 中
            </summary>
            <param name="startups"></param>
            <param name="app"></param>
        </member>
        <member name="M:Furion.StartupFilter.ResolveMethodParameterInstances(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Reflection.MethodInfo)">
            <summary>
            解析方法参数实例
            </summary>
            <param name="app"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.InternalApp">
            <summary>
            内部 App 副本
            </summary>
        </member>
        <member name="F:Furion.InternalApp.InternalServices">
            <summary>
            应用服务
            </summary>
        </member>
        <member name="F:Furion.InternalApp.RootServices">
            <summary>
            根服务
            </summary>
        </member>
        <member name="F:Furion.InternalApp.Configuration">
            <summary>
            配置对象
            </summary>
        </member>
        <member name="F:Furion.InternalApp.WebHostEnvironment">
            <summary>
            获取Web主机环境
            </summary>
        </member>
        <member name="F:Furion.InternalApp.HostEnvironment">
            <summary>
            获取泛型主机环境
            </summary>
        </member>
        <member name="M:Furion.InternalApp.ConfigureApplication(Microsoft.AspNetCore.Hosting.IWebHostBuilder,Microsoft.Extensions.Hosting.IHostBuilder)">
            <summary>
            配置 Furion 框架（Web）
            </summary>
            <remarks>此次添加 <see cref="T:Microsoft.Extensions.Hosting.HostBuilder"/> 参数是为了兼容 .NET 5 直接升级到 .NET 6 问题</remarks>
            <param name="builder"></param>
            <param name="hostBuilder"></param>
        </member>
        <member name="M:Furion.InternalApp.ConfigureApplication(Microsoft.Extensions.Hosting.IHostBuilder,System.Boolean)">
            <summary>
            配置 Furion 框架（非 Web）
            </summary>
            <param name="builder"></param>
            <param name="autoRegisterBackgroundService"></param>
        </member>
        <member name="M:Furion.InternalApp.ConfigureHostAppConfiguration(Microsoft.Extensions.Hosting.IHostBuilder)">
            <summary>
            自动装载主机配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Furion.InternalApp.AddJsonFiles(Microsoft.Extensions.Configuration.IConfigurationBuilder,Microsoft.Extensions.Hosting.IHostEnvironment)">
            <summary>
            加载自定义 .json 配置文件
            </summary>
            <param name="configurationBuilder"></param>
            <param name="hostEnvironment"></param>
        </member>
        <member name="F:Furion.InternalApp.excludeJsonPrefixs">
            <summary>
            排除的配置文件前缀
            </summary>
        </member>
        <member name="F:Furion.InternalApp.runtimeJsonSuffixs">
            <summary>
            排除运行时 Json 后缀
            </summary>
        </member>
        <member name="M:Furion.InternalApp.SplitConfigFileNameToGroups(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            对配置文件名进行分组
            </summary>
            <param name="configFiles"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.AppSettingsOptions">
            <summary>
            应用全局配置
            </summary>
        </member>
        <member name="P:Furion.AppSettingsOptions.InjectMiniProfiler">
            <summary>
            集成 MiniProfiler 组件
            </summary>
        </member>
        <member name="P:Furion.AppSettingsOptions.InjectSpecificationDocument">
            <summary>
            是否启用规范化文档
            </summary>
        </member>
        <member name="P:Furion.AppSettingsOptions.EnabledReferenceAssemblyScan">
            <summary>
            是否启用引用程序集扫描
            </summary>
        </member>
        <member name="P:Furion.AppSettingsOptions.ExternalAssemblies">
            <summary>
            外部程序集
            </summary>
            <remarks>扫描 dll 文件，如果是单文件发布，需拷贝放在根目录下</remarks>
        </member>
        <member name="P:Furion.AppSettingsOptions.ExcludeAssemblies">
            <summary>
            排除扫描的程序集
            </summary>
        </member>
        <member name="P:Furion.AppSettingsOptions.PrintDbConnectionInfo">
            <summary>
            是否打印数据库连接信息到 MiniProfiler 中
            </summary>
        </member>
        <member name="P:Furion.AppSettingsOptions.OutputOriginalSqlExecuteLog">
            <summary>
            是否输出原始 Sql 执行日志（ADO.NET）
            </summary>
        </member>
        <member name="P:Furion.AppSettingsOptions.SupportPackageNamePrefixs">
            <summary>
            配置支持的包前缀名
            </summary>
        </member>
        <member name="P:Furion.AppSettingsOptions.VirtualPath">
            <summary>
            【部署】二级虚拟目录
            </summary>
        </member>
        <member name="M:Furion.AppSettingsOptions.PostConfigure(Furion.AppSettingsOptions,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            后期配置
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Furion.Components.ServeServiceComponent">
            <summary>
            Serve 组件应用服务组件
            </summary>
        </member>
        <member name="M:Furion.Components.ServeServiceComponent.Load(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.ComponentContext)">
            <summary>
            装载服务
            </summary>
            <param name="services"></param>
            <param name="componentContext"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Furion.Components.ServeApplicationComponent">
            <summary>
            Serve 组件应用中间件组件
            </summary>
        </member>
        <member name="M:Furion.Components.ServeApplicationComponent.Load(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,System.ComponentContext)">
            <summary>
            装载中间件
            </summary>
            <param name="app"></param>
            <param name="env"></param>
            <param name="componentContext"></param>
        </member>
        <member name="T:Furion.Components.IComponent">
            <summary>
            组件依赖接口
            </summary>
        </member>
        <member name="T:Furion.Components.Penetrates">
            <summary>
            常量、公共方法配置类
            </summary>
        </member>
        <member name="M:Furion.Components.Penetrates.CreateDependLinkList(System.Type,System.Object)">
            <summary>
            创建组件依赖链表
            </summary>
            <param name="componentType">组件类型</param>
            <param name="options">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:Furion.Components.Penetrates.CreateDependLinkList(System.Type,System.Collections.Generic.List{System.Type}@,System.Collections.Generic.List{System.ComponentContext}@)">
            <summary>
            创建组件依赖链表
            </summary>
            <param name="componentType">组件类型</param>
            <param name="dependLinkList">依赖链表</param>
            <param name="componentContextLinkList">组件上下文链表</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Furion.ISingleFilePublish">
            <summary>
            解决单文件发布程序集扫描问题
            </summary>
        </member>
        <member name="M:Furion.ISingleFilePublish.IncludeAssemblies">
            <summary>
            包含程序集数组
            </summary>
            <remarks>配置单文件发布扫描程序集</remarks>
            <returns></returns>
        </member>
        <member name="M:Furion.ISingleFilePublish.IncludeAssemblyNames">
            <summary>
            包含程序集名称数组
            </summary>
            <remarks>配置单文件发布扫描程序集名称</remarks>
            <returns></returns>
        </member>
        <member name="T:Furion.AppStartup">
            <summary>
            依赖注入全局模块
            </summary>
        </member>
        <member name="T:Furion.FakeStartup">
            <summary>
            模拟 Starup，解决不设置 UseStartup 时错误问题
            </summary>
        </member>
        <member name="M:Furion.FakeStartup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            配置服务
            </summary>
        </member>
        <member name="M:Furion.FakeStartup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            配置请求
            </summary>
        </member>
        <member name="T:Furion.HostingStartup">
            <summary>
            配置程序启动时自动注入
            </summary>
        </member>
        <member name="M:Furion.HostingStartup.Configure(Microsoft.AspNetCore.Hosting.IWebHostBuilder)">
            <summary>
            配置应用启动
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:Furion.AspNetCore.FromConvertBinder">
            <summary>
            [FromConvert] 模型绑定器
            </summary>
        </member>
        <member name="F:Furion.AspNetCore.FromConvertBinder._modelBinderConverts">
            <summary>
            定义模型绑定转换器集合
            </summary>
        </member>
        <member name="M:Furion.AspNetCore.FromConvertBinder.#ctor(System.Collections.Concurrent.ConcurrentDictionary{System.Type,System.Type})">
            <summary>
            构造函数
            </summary>
            <param name="modelBinderConverts">定义模型绑定转换器集合</param>
        </member>
        <member name="M:Furion.AspNetCore.FromConvertBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)">
            <summary>
            绑定模型处理
            </summary>
            <param name="bindingContext"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Furion.AspNetCore.FromConvertBinder.CreateConvertBinder(System.Type,Microsoft.AspNetCore.Mvc.FromConvertAttribute,System.IServiceProvider)">
            <summary>
            创建模型转换绑定器
            </summary>
            <param name="valueType"></param>
            <param name="fromConvertAttribute"></param>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.AspNetCore.FromConvertBinder.GetConvertValue(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext,Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata,Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult,Microsoft.AspNetCore.Mvc.FromConvertAttribute,System.IServiceProvider)">
            <summary>
            获取转换后的值
            </summary>
            <param name="bindingContext"></param>
            <param name="metadata"></param>
            <param name="valueProviderResult"></param>
            <param name="fromConvertAttribute"></param>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.AspNetCore.DateTimeModelConvertBinder">
            <summary>
            <see cref="T:System.DateTime"/> 类型模型转换绑定器
            </summary>
        </member>
        <member name="M:Furion.AspNetCore.DateTimeModelConvertBinder.ConvertTo(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext,Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata,Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult,System.Object)">
            <summary>
            转换时间
            </summary>
            <param name="bindingContext"></param>
            <param name="metadata"></param>
            <param name="valueProviderResult"></param>
            <param name="extras"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.AspNetCore.DateTimeOffsetModelConvertBinder">
            <summary>
            <see cref="T:System.DateTimeOffset"/> 类型模型转换绑定器
            </summary>
        </member>
        <member name="M:Furion.AspNetCore.DateTimeOffsetModelConvertBinder.ConvertTo(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext,Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata,Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult,System.Object)">
            <summary>
            转换时间
            </summary>
            <param name="bindingContext"></param>
            <param name="metadata"></param>
            <param name="valueProviderResult"></param>
            <param name="extras"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.AspNetCore.IModelConvertBinder">
            <summary>
            模型转换绑定器接口
            </summary>
        </member>
        <member name="M:Furion.AspNetCore.IModelConvertBinder.ConvertTo(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext,Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata,Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult,System.Object)">
            <summary>
            模型绑定转换方法
            </summary>
            <param name="bindingContext"></param>
            <param name="metadata"></param>
            <param name="valueProviderResult"></param>
            <param name="extras"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.SensitiveDetection.FromConvertBinderProvider">
            <summary>
            [FromConvert] 模型绑定提供器
            </summary>
        </member>
        <member name="F:Furion.SensitiveDetection.FromConvertBinderProvider._modelBinderConverts">
            <summary>
            定义模型绑定转换器集合
            </summary>
        </member>
        <member name="M:Furion.SensitiveDetection.FromConvertBinderProvider.#ctor(System.Collections.Concurrent.ConcurrentDictionary{System.Type,System.Type})">
            <summary>
            构造函数
            </summary>
            <param name="modelBinderConverts">定义模型绑定转换器集合</param>
        </member>
        <member name="M:Furion.SensitiveDetection.FromConvertBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)">
            <summary>
            返回自定义绑定器
            </summary>
            <param name="context"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Furion.SensitiveDetection.SensitiveDetectionBinder">
            <summary>
            脱敏词汇（脱敏）模型绑定器
            </summary>
        </member>
        <member name="M:Furion.SensitiveDetection.SensitiveDetectionBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)">
            <summary>
            绑定模型处理
            </summary>
            <param name="bindingContext"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Furion.SensitiveDetection.SensitiveDetectionBinderProvider">
            <summary>
            脱敏词汇（脱敏）提供器模型绑定
            </summary>
            <remarks>用于替换脱敏词汇</remarks>
        </member>
        <member name="M:Furion.SensitiveDetection.SensitiveDetectionBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)">
            <summary>
            返回自定义绑定器
            </summary>
            <param name="context"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Furion.SensitiveDetection.ISensitiveDetectionProvider">
            <summary>
            脱敏词汇（脱敏）提供器
            </summary>
        </member>
        <member name="M:Furion.SensitiveDetection.ISensitiveDetectionProvider.GetWordsAsync">
            <summary>
            返回所有脱敏词汇
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.SensitiveDetection.ISensitiveDetectionProvider.VaildedAsync(System.String)">
            <summary>
            判断脱敏词汇是否有效（支持自定义算法）
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.SensitiveDetection.ISensitiveDetectionProvider.ReplaceAsync(System.String,System.Char)">
            <summary>
            替换敏感词汇
            </summary>
            <param name="text"></param>
            <param name="transfer"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.SensitiveDetection.SensitiveDetectionProvider">
            <summary>
            脱敏词汇（脱敏）提供器（默认实现）
            </summary>
        </member>
        <member name="F:Furion.SensitiveDetection.SensitiveDetectionProvider._distributedCache">
            <summary>
            分布式缓存
            </summary>
        </member>
        <member name="M:Furion.SensitiveDetection.SensitiveDetectionProvider.#ctor(Microsoft.Extensions.Caching.Distributed.IDistributedCache)">
            <summary>
            构造函数
            </summary>
            <param name="distributedCache"></param>
        </member>
        <member name="F:Furion.SensitiveDetection.SensitiveDetectionProvider.DISTRIBUTED_KEY">
            <summary>
            分布式缓存键
            </summary>
        </member>
        <member name="M:Furion.SensitiveDetection.SensitiveDetectionProvider.GetWordsAsync">
            <summary>
            返回所有脱敏词汇
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.SensitiveDetection.SensitiveDetectionProvider.VaildedAsync(System.String)">
            <summary>
            判断脱敏词汇是否有效（支持自定义算法）
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.SensitiveDetection.SensitiveDetectionProvider.ReplaceAsync(System.String,System.Char)">
            <summary>
            替换敏感词汇
            </summary>
            <param name="text"></param>
            <param name="transfer"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.SensitiveDetection.SensitiveDetectionProvider.FoundSensitiveWordsAsync(System.String)">
            <summary>
            查找脱敏词汇
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Furion.SensitiveDetection.SensitiveDetectionProvider.GetSensitiveWordIndex(System.Collections.Generic.List{System.Int32},System.Int32,System.Int32)">
            <summary>
            获取敏感词索引
            </summary>
            <param name="list"></param>
            <param name="count"></param>
            <param name="sensitiveWordLength"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.Authorization.AppAuthorizeHandler">
            <summary>
            授权策略执行程序
            </summary>
        </member>
        <member name="M:Furion.Authorization.AppAuthorizeHandler.HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)">
            <summary>
            授权验证核心方法
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Authorization.AppAuthorizeHandler.PipelineAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Microsoft.AspNetCore.Http.DefaultHttpContext)">
            <summary>
            验证管道
            </summary>
            <param name="context"></param>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Authorization.AppAuthorizeHandler.PolicyPipelineAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Microsoft.AspNetCore.Http.DefaultHttpContext,Microsoft.AspNetCore.Authorization.IAuthorizationRequirement)">
            <summary>
            策略验证管道
            </summary>
            <param name="context"></param>
            <param name="httpContext"></param>
            <param name="requirement"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Authorization.AppAuthorizeHandler.AuthorizeHandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)">
            <summary>
            授权处理
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.Authorization.Penetrates">
            <summary>
            常量、公共方法配置类
            </summary>
        </member>
        <member name="F:Furion.Authorization.Penetrates.AppAuthorizePrefix">
            <summary>
            授权策略前缀
            </summary>
        </member>
        <member name="T:Furion.Authorization.AppAuthorizationPolicyProvider">
            <summary>
            授权策略提供器
            </summary>
        </member>
        <member name="P:Furion.Authorization.AppAuthorizationPolicyProvider.FallbackPolicyProvider">
            <summary>
            默认回退策略
            </summary>
        </member>
        <member name="M:Furion.Authorization.AppAuthorizationPolicyProvider.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Authorization.AuthorizationOptions})">
            <summary>
            构造函数
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Furion.Authorization.AppAuthorizationPolicyProvider.GetDefaultPolicyAsync">
            <summary>
            获取默认策略
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.Authorization.AppAuthorizationPolicyProvider.GetFallbackPolicyAsync">
            <summary>
            获取回退策略
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.Authorization.AppAuthorizationPolicyProvider.GetPolicyAsync(System.String)">
            <summary>
            获取策略
            </summary>
            <param name="policyName"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.Authorization.AppAuthorizeRequirement">
            <summary>
            策略对应的需求
            </summary>
        </member>
        <member name="M:Furion.Authorization.AppAuthorizeRequirement.#ctor(System.String[])">
            <summary>
            构造函数
            </summary>
            <param name="policies"></param>
        </member>
        <member name="P:Furion.Authorization.AppAuthorizeRequirement.Policies">
            <summary>
            策略
            </summary>
        </member>
        <member name="T:Furion.ClayObject.Clay">
            <summary>
            粘土对象
            </summary>
        </member>
        <member name="M:Furion.ClayObject.Clay.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.ClayObject.Clay.#ctor(System.Xml.Linq.XElement,Furion.ClayObject.Clay.JsonType)">
            <summary>
            构造函数
            </summary>
            <param name="element"></param>
            <param name="type"></param>
        </member>
        <member name="P:Furion.ClayObject.Clay.IsObject">
            <summary>
            是否是 Object 类型
            </summary>
        </member>
        <member name="P:Furion.ClayObject.Clay.IsArray">
            <summary>
            是否是 Array 类型
            </summary>
        </member>
        <member name="P:Furion.ClayObject.Clay.XmlElement">
            <summary>
            XML 元素
            </summary>
        </member>
        <member name="M:Furion.ClayObject.Clay.Object">
            <summary>
            创建一个超级类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.Object(System.Object)">
            <summary>
            基于现有类型创建一个超级类型
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.Parse(System.String)">
            <summary>
            将 Json 转换成动态类型
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.Parse(System.String,System.Text.Encoding)">
            <summary>
            将 Json 转换成动态类型
            </summary>
            <param name="json"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.Parse(System.IO.Stream)">
            <summary>
            将 Steam 转换成动态类型
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.Parse(System.IO.Stream,System.Text.Encoding)">
            <summary>
            将 Steam 转换成动态类型
            </summary>
            <param name="stream"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.Serialize(System.Object)">
            <summary>
            序列化对象
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.IsDefined(System.String)">
            <summary>
            是否定义某个键
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.IsDefined(System.Int32)">
            <summary>
            判断数组索引是否存在
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.Delete(System.String)">
            <summary>
            删除键
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.Delete(System.Int32)">
            <summary>
            根据索引删除元素
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.Deserialize``1">
            <summary>
            反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
            <summary>
            删除
            </summary>
            <param name="binder"></param>
            <param name="args"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            判断是否定义
            </summary>
            <param name="binder"></param>
            <param name="args"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
            <summary>
            支持 Foreach 遍历
            </summary>
            <param name="binder"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <summary>
            获取索引值
            </summary>
            <param name="binder"></param>
            <param name="indexes"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            获取成员值
            </summary>
            <param name="binder"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
            <summary>
            设置索引
            </summary>
            <param name="binder"></param>
            <param name="indexes"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            设置成员
            </summary>
            <param name="binder"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.GetDynamicMemberNames">
            <summary>
            获取动态成员名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.ToString">
            <summary>
            重写 .ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.Solidify">
            <summary>
            固化粘土，也就是直接输出对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.Solidify``1">
            <summary>
            固化粘土，也就是直接输出对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.ToDictionary">
            <summary>
            输出字典类型
            </summary>
            <returns></returns>
        </member>
        <member name="T:Furion.ClayObject.Clay.JsonType">
            <summary>
            JSON 类型
            </summary>
        </member>
        <member name="M:Furion.ClayObject.Clay.ToValue(System.Xml.Linq.XElement)">
            <summary>
            XElement 转动态类型
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.GetJsonType(System.Object)">
            <summary>
            获取 JSON 类型
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.CreateTypeAttr(Furion.ClayObject.Clay.JsonType)">
            <summary>
            创建类型属性
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.CreateJsonNode(System.Object)">
            <summary>
            创建 JSON 节点
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.CreateXArray``1(``0)">
            <summary>
            创建 XStreamingElement 对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.CreateXObject(System.Object)">
            <summary>
            创建 XStreamingElement 对象
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.CreateJsonString(System.Xml.Linq.XStreamingElement)">
            <summary>
            创建 JSON 字符串
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="F:Furion.ClayObject.Clay.jsonType">
            <summary>
            JSON 类型
            </summary>
        </member>
        <member name="M:Furion.ClayObject.Clay.TryGet(System.Xml.Linq.XElement,System.Object@)">
            <summary>
            读取值
            </summary>
            <param name="element"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.TrySet(System.String,System.Object)">
            <summary>
            设置值
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.TrySet(System.Int32,System.Object)">
            <summary>
            设置值
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.Deserialize(System.Type)">
            <summary>
            反序列化
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.DeserializeValue(System.Xml.Linq.XElement,System.Type)">
            <summary>
            反序列化值
            </summary>
            <param name="element"></param>
            <param name="elementType"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.DeserializeObject(System.Type)">
            <summary>
            反序列化对象
            </summary>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Clay.DeserializeArray(System.Type)">
            <summary>
            序列化数组
            </summary>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="F:Furion.ClayObject.Clay.ToBeConvertStringTypes">
            <summary>
            将被转换成字符串的类型
            </summary>
        </member>
        <member name="T:Furion.ClayObject.Extensions.DictionaryExtensions">
            <summary>
            字典类型拓展类
            </summary>
        </member>
        <member name="M:Furion.ClayObject.Extensions.DictionaryExtensions.ToDictionary(System.Object)">
            <summary>
            将对象转成字典
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Extensions.DictionaryExtensions.ToDictionaryWithType(System.Object)">
            <summary>
            将对象转字典类型，其中值返回原始类型 Type 类型
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Extensions.DictionaryExtensions.GetValue(System.Object,System.Reflection.MemberInfo)">
            <summary>
            获取成员值
            </summary>
            <param name="obj"></param>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.ClayObject.Extensions.ExpandoObjectExtensions">
            <summary>
            ExpandoObject 对象拓展
            </summary>
        </member>
        <member name="M:Furion.ClayObject.Extensions.ExpandoObjectExtensions.ToExpandoObject(System.Object)">
            <summary>
            将对象转 ExpandoObject 类型
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Extensions.ExpandoObjectExtensions.RemoveProperty(System.Dynamic.ExpandoObject,System.String)">
            <summary>
            移除 ExpandoObject 对象属性
            </summary>
            <param name="expandoObject"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:Furion.ClayObject.Extensions.ExpandoObjectExtensions.Empty(System.Dynamic.ExpandoObject)">
            <summary>
            判断 ExpandoObject 是否为空
            </summary>
            <param name="expandoObject"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Extensions.ExpandoObjectExtensions.HasProperty(System.Dynamic.ExpandoObject,System.String)">
            <summary>
            判断 ExpandoObject 是否拥有某属性
            </summary>
            <param name="expandoObject"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Extensions.ExpandoObjectExtensions.ShallowCopy(System.Dynamic.ExpandoObject)">
            <summary>
            实现 ExpandoObject 浅拷贝
            </summary>
            <param name="expandoObject"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Extensions.ExpandoObjectExtensions.DeepCopy(System.Dynamic.ExpandoObject)">
            <summary>
            实现 ExpandoObject 深度拷贝
            </summary>
            <param name="expandoObject"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ClayObject.Extensions.ExpandoObjectExtensions.Copy(System.Dynamic.ExpandoObject,System.Boolean)">
            <summary>
            拷贝 ExpandoObject 对象
            </summary>
            <param name="original"></param>
            <param name="deep"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.ConfigurableOptions.MapSettingsAttribute">
            <summary>
            重新映射属性配置
            </summary>
        </member>
        <member name="M:Furion.ConfigurableOptions.MapSettingsAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="path">appsetting.json 对应键</param>
        </member>
        <member name="P:Furion.ConfigurableOptions.MapSettingsAttribute.Path">
            <summary>
            对应配置文件中的路径
            </summary>
        </member>
        <member name="T:Furion.ConfigurableOptions.OptionsSettingsAttribute">
            <summary>
            选项配置特性
            </summary>
        </member>
        <member name="M:Furion.ConfigurableOptions.OptionsSettingsAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.ConfigurableOptions.OptionsSettingsAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="path">appsetting.json 对应键</param>
        </member>
        <member name="M:Furion.ConfigurableOptions.OptionsSettingsAttribute.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="postConfigureAll">启动所有实例进行后期配置</param>
        </member>
        <member name="M:Furion.ConfigurableOptions.OptionsSettingsAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="path">appsetting.json 对应键</param>
            <param name="postConfigureAll">启动所有实例进行后期配置</param>
        </member>
        <member name="P:Furion.ConfigurableOptions.OptionsSettingsAttribute.Path">
            <summary>
            对应配置文件中的路径
            </summary>
        </member>
        <member name="P:Furion.ConfigurableOptions.OptionsSettingsAttribute.PostConfigureAll">
            <summary>
            对所有配置实例进行后期配置
            </summary>
        </member>
        <member name="T:Furion.ConfigurableOptions.IConfigurableOptions">
            <summary>
            应用选项依赖接口
            </summary>
        </member>
        <member name="T:Furion.ConfigurableOptions.IConfigurableOptions`1">
            <summary>
            选项后期配置
            </summary>
            <typeparam name="TOptions"></typeparam>
        </member>
        <member name="M:Furion.ConfigurableOptions.IConfigurableOptions`1.PostConfigure(`0,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            选项后期配置
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Furion.ConfigurableOptions.IConfigurableOptions`2">
            <summary>
            带验证的应用选项依赖接口
            </summary>
            <typeparam name="TOptions"></typeparam>
            <typeparam name="TOptionsValidation"></typeparam>
        </member>
        <member name="T:Furion.ConfigurableOptions.IConfigurableOptionsListener`1">
            <summary>
            带监听的应用选项依赖接口
            </summary>
            <typeparam name="TOptions"></typeparam>
        </member>
        <member name="M:Furion.ConfigurableOptions.IConfigurableOptionsListener`1.OnListener(`0,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            监听
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Furion.Configuration.Constants">
            <summary>
            Configuration 模块常量
            </summary>
        </member>
        <member name="T:Furion.Configuration.Constants.Patterns">
            <summary>
            正则表达式常量
            </summary>
        </member>
        <member name="F:Furion.Configuration.Constants.Patterns.ConfigurationFileName">
            <summary>
            配置文件名
            </summary>
        </member>
        <member name="F:Furion.Configuration.Constants.Patterns.ConfigurationFileParameter">
            <summary>
            配置文件参数
            </summary>
        </member>
        <member name="T:Furion.CorsAccessor.Penetrates">
            <summary>
            常量、公共方法配置类
            </summary>
        </member>
        <member name="F:Furion.CorsAccessor.Penetrates._defaultExposedHeaders">
            <summary>
            默认跨域导出响应头 Key
            </summary>
            <remarks>解决 ajax，XMLHttpRequest，axios 不能获取请求头问题</remarks>
        </member>
        <member name="M:Furion.CorsAccessor.Penetrates.SetCorsPolicy(Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder,Furion.CorsAccessor.CorsAccessorSettingsOptions,System.Boolean)">
            <summary>
            设置跨域策略
            </summary>
            <param name="builder"></param>
            <param name="corsAccessorSettings"></param>
            <param name="isMiddleware"></param>
        </member>
        <member name="T:Furion.CorsAccessor.CorsAccessorSettingsOptions">
            <summary>
            跨域配置选项
            </summary>
        </member>
        <member name="P:Furion.CorsAccessor.CorsAccessorSettingsOptions.PolicyName">
            <summary>
            策略名称
            </summary>
        </member>
        <member name="P:Furion.CorsAccessor.CorsAccessorSettingsOptions.WithOrigins">
            <summary>
            允许来源域名，没有配置则允许所有来源
            </summary>
        </member>
        <member name="P:Furion.CorsAccessor.CorsAccessorSettingsOptions.WithHeaders">
            <summary>
            请求表头，没有配置则允许所有表头
            </summary>
        </member>
        <member name="P:Furion.CorsAccessor.CorsAccessorSettingsOptions.WithExposedHeaders">
            <summary>
            设置客户端可获取的响应标头
            </summary>
        </member>
        <member name="P:Furion.CorsAccessor.CorsAccessorSettingsOptions.WithMethods">
            <summary>
            设置跨域允许请求谓词，没有配置则允许所有
            </summary>
        </member>
        <member name="P:Furion.CorsAccessor.CorsAccessorSettingsOptions.AllowCredentials">
            <summary>
            是否允许跨域请求中的凭据
            </summary>
        </member>
        <member name="P:Furion.CorsAccessor.CorsAccessorSettingsOptions.SetPreflightMaxAge">
            <summary>
            设置预检过期时间
            </summary>
        </member>
        <member name="P:Furion.CorsAccessor.CorsAccessorSettingsOptions.FixedClientToken">
            <summary>
            修正前端无法获取 Token 问题
            </summary>
        </member>
        <member name="P:Furion.CorsAccessor.CorsAccessorSettingsOptions.SignalRSupport">
            <summary>
            启用 SignalR 跨域支持
            </summary>
        </member>
        <member name="M:Furion.CorsAccessor.CorsAccessorSettingsOptions.PostConfigure(Furion.CorsAccessor.CorsAccessorSettingsOptions,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            后期配置
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Furion.DataEncryption.AESEncryption">
            <summary>
            AES 加解密
            </summary>
        </member>
        <member name="M:Furion.DataEncryption.AESEncryption.Encrypt(System.String,System.String)">
            <summary>
            加密
            </summary>
            <param name="text">加密文本</param>
            <param name="skey">密钥</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataEncryption.AESEncryption.Decrypt(System.String,System.String)">
            <summary>
            解密
            </summary>
            <param name="hash">加密后字符串</param>
            <param name="skey">密钥</param>
            <returns></returns>
        </member>
        <member name="T:Furion.DataEncryption.DESCEncryption">
            <summary>
            DESC 加解密
            </summary>
        </member>
        <member name="M:Furion.DataEncryption.DESCEncryption.Encrypt(System.String,System.String,System.Boolean)">
            <summary>
            加密
            </summary>
            <param name="text">加密文本</param>
            <param name="skey">密钥</param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataEncryption.DESCEncryption.Decrypt(System.String,System.String,System.Boolean)">
            <summary>
            解密
            </summary>
            <param name="hash">加密后字符串</param>
            <param name="skey">密钥</param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <returns></returns>
        </member>
        <member name="T:Furion.DataEncryption.MD5Encryption">
            <summary>
            MD5 加密
            </summary>
        </member>
        <member name="M:Furion.DataEncryption.MD5Encryption.Compare(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            字符串 MD5 比较
            </summary>
            <param name="text">加密文本</param>
            <param name="hash">MD5 字符串</param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <param name="is16">是否输出 16 位</param>
            <returns>bool</returns>
        </member>
        <member name="M:Furion.DataEncryption.MD5Encryption.Encrypt(System.String,System.Boolean,System.Boolean)">
            <summary>
            MD5 加密
            </summary>
            <param name="text">加密文本</param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <param name="is16">是否输出 16 位</param>
            <returns></returns>
        </member>
        <member name="T:Furion.DataEncryption.RSAEncryption">
            <summary>
            RSA 加密
            </summary>
        </member>
        <member name="M:Furion.DataEncryption.RSAEncryption.GenerateSecretKey(System.Int32)">
            <summary>
            生成 RSA 秘钥
            </summary>
            <param name="keySize">大小必须为 2048 到 16384 之间，且必须能被 8 整除</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataEncryption.RSAEncryption.Encrypt(System.String,System.String,System.Int32)">
            <summary>
            加密
            </summary>
            <param name="text">明文内容</param>
            <param name="publicKey">公钥</param>
            <param name="keySize"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataEncryption.RSAEncryption.Decrypt(System.String,System.String,System.Int32)">
            <summary>
            解密
            </summary>
            <param name="text">密文内容</param>
            <param name="privateKey">私钥</param>
            <param name="keySize"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataEncryption.RSAEncryption.CheckRSAKeySize(System.Int32)">
            <summary>
            检查 RSA 长度
            </summary>
            <param name="keySize"></param>
        </member>
        <member name="T:Furion.DataEncryption.Extensions.StringEncryptionExtensions">
            <summary>
            DataEncryption 字符串加密拓展
            </summary>
        </member>
        <member name="M:Furion.DataEncryption.Extensions.StringEncryptionExtensions.ToMD5Encrypt(System.String,System.Boolean,System.Boolean)">
            <summary>
            字符串的 MD5
            </summary>
            <param name="text"></param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <param name="is16">是否输出 16 位</param>
            <returns>string</returns>
        </member>
        <member name="M:Furion.DataEncryption.Extensions.StringEncryptionExtensions.ToMD5Compare(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            字符串的 MD5
            </summary>
            <param name="text"></param>
            <param name="hash"></param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <param name="is16">是否输出 16 位</param>
            <returns>string</returns>
        </member>
        <member name="M:Furion.DataEncryption.Extensions.StringEncryptionExtensions.ToAESEncrypt(System.String,System.String)">
            <summary>
            字符串 AES 加密
            </summary>
            <param name="text">需要加密的字符串</param>
            <param name="skey"></param>
            <returns>string</returns>
        </member>
        <member name="M:Furion.DataEncryption.Extensions.StringEncryptionExtensions.ToAESDecrypt(System.String,System.String)">
            <summary>
            字符串 AES 解密
            </summary>
            <param name="text"></param>
            <param name="skey"></param>
            <returns>string</returns>
        </member>
        <member name="M:Furion.DataEncryption.Extensions.StringEncryptionExtensions.ToDESCEncrypt(System.String,System.String,System.Boolean)">
            <summary>
            字符串 DESC 加密
            </summary>
            <param name="text">需要加密的字符串</param>
            <param name="skey">密钥</param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <returns>string</returns>
        </member>
        <member name="M:Furion.DataEncryption.Extensions.StringEncryptionExtensions.ToDESCDecrypt(System.String,System.String,System.Boolean)">
            <summary>
            字符串 DESC 解密
            </summary>
            <param name="text"></param>
            <param name="skey">密钥</param>
            <param name="uppercase">是否输出大写加密，默认 false</param>
            <returns>string</returns>
        </member>
        <member name="M:Furion.DataEncryption.Extensions.StringEncryptionExtensions.ToRSAEncrpyt(System.String,System.String)">
            <summary>
            字符串 RSA 加密
            </summary>
            <param name="text">需要加密的文本</param>
            <param name="publicKey">公钥</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataEncryption.Extensions.StringEncryptionExtensions.ToRSADecrypt(System.String,System.String)">
            <summary>
            字符串 RSA 解密
            </summary>
            <param name="text">需要解密的文本</param>
            <param name="privateKey">私钥</param>
            <returns></returns>
        </member>
        <member name="T:Furion.DataValidation.ValidationItemMetadataAttribute">
            <summary>
            验证项元数据
            </summary>
        </member>
        <member name="M:Furion.DataValidation.ValidationItemMetadataAttribute.#ctor(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            构造函数
            </summary>
            <param name="regularExpression">正则表达式</param>
            <param name="defaultErrorMessage">失败提示默认消息</param>
            <param name="regexOptions">正则表达式匹配选项</param>
        </member>
        <member name="P:Furion.DataValidation.ValidationItemMetadataAttribute.RegularExpression">
            <summary>
            正则表达式
            </summary>
        </member>
        <member name="P:Furion.DataValidation.ValidationItemMetadataAttribute.DefaultErrorMessage">
            <summary>
            默认验证失败类型
            </summary>
        </member>
        <member name="P:Furion.DataValidation.ValidationItemMetadataAttribute.RegexOptions">
            <summary>
            正则表达式选项
            </summary>
        </member>
        <member name="T:Furion.DataValidation.ValidationMessageAttribute">
            <summary>
            验证消息特性
            </summary>
        </member>
        <member name="M:Furion.DataValidation.ValidationMessageAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="errorMessage"></param>
        </member>
        <member name="P:Furion.DataValidation.ValidationMessageAttribute.ErrorMessage">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="T:Furion.DataValidation.ValidationMessageTypeAttribute">
            <summary>
            验证消息类型特性
            </summary>
        </member>
        <member name="T:Furion.DataValidation.ValidationTypeAttribute">
            <summary>
            验证类型特性
            </summary>
        </member>
        <member name="T:Furion.DataValidation.ValidationTypes">
            <summary>
            验证类型
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Numeric">
            <summary>
            数值类型
            <para>
            表达式：^\+?(:?(:?\d+\.\d+)?$|(:?\d+))?$|(-?\d+)(\.\d+)?$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.PositiveNumber">
            <summary>
            正数
            <para>
            表达式：^(0\.0*[1-9]+[0-9]*$|[1-9]+[0-9]*\.[0-9]*[0-9]$|[1-9]+[0-9]*$)
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.NegativeNumber">
            <summary>
            负数
            <para>
            表达式：^-(0\.0*[1-9]+[0-9]*$|[1-9]+[0-9]*\.[0-9]*[0-9]$|[1-9]+[0-9]*$)
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Integer">
            <summary>
            整数
            <para>
            表达式：^-?[1-9]+[0-9]*$|^0$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Money">
            <summary>
            金钱类型
            <para>
            表达式：^(([0-9]|([1-9][0-9]{0,9}))((\.[0-9]{1,2})?))$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Date">
            <summary>
            日期类型
            <para>
            表达式：^(?:(?:1[6-9]|[2-9][0-9])[0-9]{2}([-/.]?)(?:(?:0?[1-9]|1[0-2])\1(?:0?[1-9]|1[0-9]|2[0-8])|(?:0?[13-9]|1[0-2])\1(?:29|30)|(?:0?[13578]|1[02])\1(?:31))|(?:(?:1[6-9]|[2-9][0-9])(?:0[48]|[2468][048]|[13579][26])|(?:16|[2468][048]|[3579][26])00)([-/.]?)0?2\2(?:29))(\s+([01][0-9]:|2[0-3]:)?[0-5][0-9]:[0-5][0-9])?$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Time">
            <summary>
            时间类型
            <para>
            表达式：^(\d{1,2})(:)?(\d{1,2})\2(\d{1,2})$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.IDCard">
            <summary>
            身份证号码
            <para>
            表达式：(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.PostCode">
            <summary>
            邮政编码
            <para>
            表达式：^[0-9]{6}$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.PhoneNumber">
            <summary>
            手机号码
            <para>
            表达式：^1[3456789][0-9]{9}$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Telephone">
            <summary>
            固话格式
            <para>
            表达式：(^[0-9]{3,4}\-[0-9]{3,8}$)|(^[0-9]{3,8}$)|(^\([0-9]{3,4}\)[0-9]{3,8}$)|(^0{0,1}13[0-9]{9}$)
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.PhoneOrTelNumber">
            <summary>
            手机或固话类型
            <para>
            表达式：(^1[3456789][0-9]{9}$)|((^[0-9]{3,4}\-[0-9]{3,8}$)|(^[0-9]{3,8}$)|(^\([0-9]{3,4}\)[0-9]{3,8}$)|(^0{0,1}13[0-9]{9}$))
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.EmailAddress">
            <summary>
            邮件类型
            <para>
            表达式：^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Url">
            <summary>
            网址类型
            <para>
            表达式：^(((ht|f)tps?):\/\/)?([^!@#$%^与*?.\s-]([^!@#$%^与*?.\s]{0,63}[^!@#$%^与*?.\s])?\.)+[a-z]{2,6}\/?
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Color">
            <summary>
            颜色类型
            <para>
            表达式：(^#([0-9a-f]{6}|[0-9a-f]{3})$)|(^rgb\(([0-9]|[0-9][0-9]|25[0-5]|2[0-4][0-9]|[0-1][0-9][0-9])\,([0-9]|[0-9][0-9]|25[0-5]|2[0-4][0-9]|[0-1][0-9][0-9])\,([0-9]|[0-9][0-9]|25[0-5]|2[0-4][0-9]|[0-1][0-9][0-9])\)$)|(^rgba\(([0-9]|[0-9][0-9]|25[0-5]|2[0-4][0-9]|[0-1][0-9][0-9])\,([0-9]|[0-9][0-9]|25[0-5]|2[0-4][0-9]|[0-1][0-9][0-9])\,([0-9]|[0-9][0-9]|25[0-5]|2[0-4][0-9]|[0-1][0-9][0-9])\,(1|1.0|0.[0-9])\)$)
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Chinese">
            <summary>
            中文
            <para>
            表达式：^[\u4e00-\u9fa5]+$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.IPv4">
            <summary>
            IPv4 类型
            <para>
            表达式：^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.IPv6">
            <summary>
            IPv6 类型
            <para>
            表达式：/^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Age">
            <summary>
            年龄
            <para>
            表达式：^[1-99]?\d*$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.ChineseName">
            <summary>
            中文名
            <para>
            表达式：^[\u0391-\uFFE5]{2,15}$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.EnglishName">
            <summary>
            英文名
            <para>
            表达式：^[A-Za-z]{1,161}$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Capital">
            <summary>
            纯大写
            <para>
            表达式：^[A-Z]+$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Lowercase">
            <summary>
            纯小写
            <para>
            表达式：^[a-z]+$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Ascii">
            <summary>
            ASCII 编码
            <para>
            表达式：^[\x00-\xFF]+$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Md5">
            <summary>
            MD5 加密字符串
            <para>
            表达式：^([a-fA-F0-9]{32})$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Zip">
            <summary>
            压缩文件格式
            <para>
            表达式：(.*)\.(rar|zip|7zip|tgz)$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Image">
            <summary>
            图片格式
            <para>
            表达式：(.*)\.(jpg|gif|ico|jpeg|png)$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Document">
            <summary>
            文档格式
            <para>
            表达式：(.*)\.(doc|xls|docx|xlsx|pdf|md)$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Mp3">
            <summary>
            MP3 格式
            <para>
            表达式：(.*)\.(mp3)$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Flash">
            <summary>
            Flash 格式
            <para>
            表达式：(.*)\.(swf|fla|flv)$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Video">
            <summary>
            视频文件格式
            <para>
            表达式：(.*)\.(rm|rmvb|wmv|avi|mp4|3gp|mkv)$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.WordWithNumber">
            <summary>
            字母加数字组合
            <para>
            表达式：^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]*$
            </para>
            </summary>
        </member>
        <member name="F:Furion.DataValidation.ValidationTypes.Html">
            <summary>
            Html 标签格式
            <para>
            表达式：lt(\w+)[^gt]*>(.*?lt\/\1gt)?
            </para>
            </summary>
        </member>
        <member name="T:Furion.DataValidation.DataValidationExtensions">
            <summary>
            数据验证拓展类
            </summary>
        </member>
        <member name="M:Furion.DataValidation.DataValidationExtensions.TryValidate(System.Object,System.Boolean)">
            <summary>
            拓展方法，验证类类型对象
            </summary>
            <param name="obj">对象实例</param>
            <param name="validateAllProperties">是否验证所有属性</param>
            <returns>验证结果</returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidationExtensions.TryValidate(System.Object,System.ComponentModel.DataAnnotations.ValidationAttribute[])">
            <summary>
            拓展方法，验证单个值
            </summary>
            <param name="value">单个值</param>
            <param name="validationAttributes">验证特性</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidationExtensions.TryValidate(System.Object,System.Object[])">
            <summary>
            拓展方法，验证单个值
            </summary>
            <param name="value">单个值</param>
            <param name="validationTypes">验证类型</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidationExtensions.TryValidate(System.Object,System.ComponentModel.DataAnnotations.ValidationPattern,System.Object[])">
            <summary>
            拓展方法，验证单个值
            </summary>
            <param name="value">单个值</param>
            <param name="validationOptionss">验证逻辑</param>
            <param name="validationTypes">验证类型</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidationExtensions.Validate(System.Object,System.Boolean)">
            <summary>
            拓展方法，验证类类型对象
            </summary>
            <param name="obj">对象实例</param>
            <param name="validateAllProperties">是否验证所有属性</param>
        </member>
        <member name="M:Furion.DataValidation.DataValidationExtensions.Validate(System.Object,System.ComponentModel.DataAnnotations.ValidationAttribute[])">
            <summary>
            拓展方法，验证单个值
            </summary>
            <param name="value">单个值</param>
            <param name="validationAttributes">验证特性</param>
        </member>
        <member name="M:Furion.DataValidation.DataValidationExtensions.Validate(System.Object,System.Object[])">
            <summary>
            拓展方法，验证单个值
            </summary>
            <param name="value">单个值</param>
            <param name="validationTypes">验证类型</param>
        </member>
        <member name="M:Furion.DataValidation.DataValidationExtensions.Validate(System.Object,System.ComponentModel.DataAnnotations.ValidationPattern,System.Object[])">
            <summary>
            拓展方法，验证单个值
            </summary>
            <param name="value">单个值</param>
            <param name="validationOptionss">验证逻辑</param>
            <param name="validationTypes">验证类型</param>
        </member>
        <member name="M:Furion.DataValidation.DataValidationExtensions.TryValidate(System.Object,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            拓展方法，验证单个值
            </summary>
            <param name="value">单个值</param>
            <param name="regexPattern">正则表达式</param>
            <param name="regexOptions">正则表达式选项</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidationExtensions.ThrowValidateFailedModel(Furion.DataValidation.DataValidationResult)">
            <summary>
            直接抛出异常信息
            </summary>
            <param name="dataValidationResult"></param>
        </member>
        <member name="T:Furion.DataValidation.DataValidationOptions">
            <summary>
            AddInject 数据验证配置选项
            </summary>
        </member>
        <member name="P:Furion.DataValidation.DataValidationOptions.GlobalEnabled">
            <summary>
            启用全局数据验证
            </summary>
        </member>
        <member name="P:Furion.DataValidation.DataValidationOptions.SuppressImplicitRequiredAttributeForNonNullableReferenceTypes">
            <summary>
            禁止C# 8.0 验证非可空引用类型
            </summary>
        </member>
        <member name="P:Furion.DataValidation.DataValidationOptions.SuppressModelStateInvalidFilter">
            <summary>
            是否禁用模型验证过滤器
            </summary>
            <remarks>只会改变启用全局验证的情况，也就是 <see cref="P:Furion.DataValidation.DataValidationOptions.GlobalEnabled"/> 为 true 的情况</remarks>
        </member>
        <member name="P:Furion.DataValidation.DataValidationOptions.SuppressMapClientErrors">
            <summary>
            是否禁用映射异常
            </summary>
        </member>
        <member name="T:Furion.DataValidation.DataValidationFilter">
            <summary>
            数据验证拦截器
            </summary>
        </member>
        <member name="F:Furion.DataValidation.DataValidationFilter._apiBehaviorOptions">
            <summary>
            Api 行为配置选项
            </summary>
        </member>
        <member name="M:Furion.DataValidation.DataValidationFilter.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Mvc.ApiBehaviorOptions})">
            <summary>
            构造函数
            </summary>
            <param name="options"></param>
        </member>
        <member name="F:Furion.DataValidation.DataValidationFilter.FilterOrder">
            <summary>
            过滤器排序
            </summary>
        </member>
        <member name="P:Furion.DataValidation.DataValidationFilter.Order">
            <summary>
            排序属性
            </summary>
        </member>
        <member name="P:Furion.DataValidation.DataValidationFilter.IsReusable">
            <summary>
            是否是可重复使用的
            </summary>
        </member>
        <member name="M:Furion.DataValidation.DataValidationFilter.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            拦截请求
            </summary>
            <param name="context">动作方法上下文</param>
            <param name="next">中间件委托</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidationFilter.CallUnHandleResult(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate,Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor,System.Reflection.MethodInfo)">
            <summary>
            调用未处理的结果类型
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <param name="actionDescriptor"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidationFilter.HandleValidation(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,System.Reflection.MethodInfo,Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor,System.Object,Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext,Furion.FriendlyException.AppFriendlyException)">
            <summary>
            内部处理异常
            </summary>
            <param name="context"></param>
            <param name="method"></param>
            <param name="actionDescriptor"></param>
            <param name="errors"></param>
            <param name="resultContext"></param>
            <param name="friendlyException"></param>
            <returns>返回 false 表示结果没有处理</returns>
        </member>
        <member name="T:Furion.DataValidation.DataValidationPageFilter">
            <summary>
            数据验证拦截器（Razor Pages）
            </summary>
        </member>
        <member name="F:Furion.DataValidation.DataValidationPageFilter._apiBehaviorOptions">
            <summary>
            Api 行为配置选项
            </summary>
        </member>
        <member name="M:Furion.DataValidation.DataValidationPageFilter.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Mvc.ApiBehaviorOptions})">
            <summary>
            构造函数
            </summary>
            <param name="options"></param>
        </member>
        <member name="F:Furion.DataValidation.DataValidationPageFilter.FilterOrder">
            <summary>
            过滤器排序
            </summary>
        </member>
        <member name="P:Furion.DataValidation.DataValidationPageFilter.Order">
            <summary>
            排序属性
            </summary>
        </member>
        <member name="P:Furion.DataValidation.DataValidationPageFilter.IsReusable">
            <summary>
            是否是可重复使用的
            </summary>
        </member>
        <member name="M:Furion.DataValidation.DataValidationPageFilter.OnPageHandlerSelectionAsync(Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext)">
            <summary>
            模型绑定拦截
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidationPageFilter.OnPageHandlerExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext,Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutionDelegate)">
            <summary>
            拦截请求
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidationPageFilter.CallUnHandleResult(Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext,Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutionDelegate)">
            <summary>
            调用未处理的结果类型
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidationPageFilter.HandleValidation(Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext,System.Object,Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext,Furion.FriendlyException.AppFriendlyException)">
            <summary>
            内部处理异常
            </summary>
            <param name="context"></param>
            <param name="errors"></param>
            <param name="resultContext"></param>
            <param name="friendlyException"></param>
            <returns>返回 false 表示结果没有处理</returns>
        </member>
        <member name="T:Furion.DataValidation.DataValidationResult">
            <summary>
            数据验证结果
            </summary>
        </member>
        <member name="P:Furion.DataValidation.DataValidationResult.IsValid">
            <summary>
            验证状态
            </summary>
        </member>
        <member name="P:Furion.DataValidation.DataValidationResult.ValidationResults">
            <summary>
            验证结果
            </summary>
        </member>
        <member name="P:Furion.DataValidation.DataValidationResult.MemberOrValue">
            <summary>
            成员或值
            </summary>
        </member>
        <member name="T:Furion.DataValidation.ValidationMetadata">
            <summary>
            验证信息元数据
            </summary>
        </member>
        <member name="P:Furion.DataValidation.ValidationMetadata.ValidationResult">
            <summary>
            验证结果
            </summary>
            <remarks>返回字典或字符串类型</remarks>
        </member>
        <member name="P:Furion.DataValidation.ValidationMetadata.Message">
            <summary>
            异常消息
            </summary>
        </member>
        <member name="P:Furion.DataValidation.ValidationMetadata.ModelState">
            <summary>
            验证状态
            </summary>
        </member>
        <member name="P:Furion.DataValidation.ValidationMetadata.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Furion.DataValidation.ValidationMetadata.OriginErrorCode">
            <summary>
            错误码（没被复写过的 ErrorCode ）
            </summary>
        </member>
        <member name="P:Furion.DataValidation.ValidationMetadata.StatusCode">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Furion.DataValidation.ValidationMetadata.FirstErrorProperty">
            <summary>
            首个错误属性
            </summary>
        </member>
        <member name="P:Furion.DataValidation.ValidationMetadata.FirstErrorMessage">
            <summary>
            首个错误消息
            </summary>
        </member>
        <member name="P:Furion.DataValidation.ValidationMetadata.Data">
            <summary>
            额外数据
            </summary>
        </member>
        <member name="T:Furion.DataValidation.ValidationTypeMessageSettingsOptions">
            <summary>
            验证消息配置选项
            </summary>
        </member>
        <member name="P:Furion.DataValidation.ValidationTypeMessageSettingsOptions.Definitions">
            <summary>
            验证消息配置表
            </summary>
        </member>
        <member name="T:Furion.DataValidation.IValidationMessageTypeProvider">
            <summary>
            验证消息类型提供器
            </summary>
        </member>
        <member name="P:Furion.DataValidation.IValidationMessageTypeProvider.Definitions">
            <summary>
            验证消息类型定义
            </summary>
        </member>
        <member name="T:Furion.DataValidation.ValidatorContext">
            <summary>
            验证上下文
            </summary>
        </member>
        <member name="M:Furion.DataValidation.ValidatorContext.GetValidationMetadata(System.Object)">
            <summary>
            获取验证错误信息
            </summary>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.DataValidation.DataValidator">
            <summary>
            数据验证器
            </summary>
        </member>
        <member name="F:Furion.DataValidation.DataValidator.ValidationTypes">
            <summary>
            所有验证类型
            </summary>
        </member>
        <member name="F:Furion.DataValidation.DataValidator.ValidationMessageTypes">
            <summary>
            所有验证类型
            </summary>
        </member>
        <member name="F:Furion.DataValidation.DataValidator.ValidationItemMetadatas">
            <summary>
            验证类型正则表达式
            </summary>
        </member>
        <member name="M:Furion.DataValidation.DataValidator.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.DataValidation.DataValidator.TryValidateObject(System.Object,System.Boolean)">
            <summary>
            验证类类型对象
            </summary>
            <param name="obj">对象实例</param>
            <param name="validateAllProperties">是否验证所有属性</param>
            <returns>验证结果</returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidator.TryValidateValue(System.Object,System.ComponentModel.DataAnnotations.ValidationAttribute[])">
            <summary>
            验证单个值
            </summary>
            <param name="value">单个值</param>
            <param name="validationAttributes">验证特性</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidator.TryValidateValue(System.Object,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            正则表达式验证
            </summary>
            <param name="value"></param>
            <param name="regexPattern"></param>
            <param name="regexOptions">正则表达式选项</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidator.TryValidateValue(System.Object,System.Object[])">
            <summary>
            验证类型验证
            </summary>
            <param name="value"></param>
            <param name="validationTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidator.TryValidateValue(System.Object,System.ComponentModel.DataAnnotations.ValidationPattern,System.Object[])">
            <summary>
            验证类型验证
            </summary>
            <param name="value"></param>
            <param name="validationOptionss">验证方式</param>
            <param name="validationTypes"></param>
            <returns></returns>
        </member>
        <member name="F:Furion.DataValidation.DataValidator.GetValidationTypeValidationItemMetadataCached">
            <summary>
            获取验证类型验证Item集合
            </summary>
        </member>
        <member name="M:Furion.DataValidation.DataValidator.GetValidationTypeValidationItemMetadata(System.Object)">
            <summary>
            获取验证类型正则表达式（需要缓存）
            </summary>
            <param name="validationType"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidator.GetValidationTypes">
            <summary>
            获取所有验证类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidator.GetValidationMessageTypes">
            <summary>
            获取所有验证消息类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidator.GetValidationValidationItemMetadatas">
            <summary>
            获取验证类型所有有效的正则表达式
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DataValidation.DataValidator.ReplaceValidateErrorMessage(System.String,System.Reflection.FieldInfo,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            替换默认验证失败消息
            </summary>
            <param name="name">验证唯一名称</param>
            <param name="field"></param>
            <param name="customErrorMessages"></param>
        </member>
        <member name="T:Furion.DependencyInjection.InjectionAttribute">
            <summary>
            设置依赖注入方式
            </summary>
        </member>
        <member name="M:Furion.DependencyInjection.InjectionAttribute.#ctor(System.Type[])">
            <summary>
            构造函数
            </summary>
            <param name="exceptInterfaces"></param>
        </member>
        <member name="M:Furion.DependencyInjection.InjectionAttribute.#ctor(Furion.DependencyInjection.InjectionActions,System.Type[])">
            <summary>
            构造函数
            </summary>
            <param name="action"></param>
            <param name="exceptInterfaces"></param>
        </member>
        <member name="P:Furion.DependencyInjection.InjectionAttribute.Action">
            <summary>
            添加服务方式，存在不添加，或继续添加
            </summary>
        </member>
        <member name="P:Furion.DependencyInjection.InjectionAttribute.Pattern">
            <summary>
            注册选项
            </summary>
        </member>
        <member name="P:Furion.DependencyInjection.InjectionAttribute.Named">
            <summary>
            注册别名
            </summary>
            <remarks>多服务时使用</remarks>
        </member>
        <member name="P:Furion.DependencyInjection.InjectionAttribute.Order">
            <summary>
            排序，排序越大，则在后面注册
            </summary>
        </member>
        <member name="P:Furion.DependencyInjection.InjectionAttribute.ExceptInterfaces">
            <summary>
            排除接口
            </summary>
        </member>
        <member name="P:Furion.DependencyInjection.InjectionAttribute.Proxy">
            <summary>
            代理类型，必须继承 DispatchProxy、IDispatchProxy
            </summary>
        </member>
        <member name="T:Furion.DependencyInjection.SuppressProxyAttribute">
            <summary>
            跳过全局代理
            </summary>
        </member>
        <member name="T:Furion.DependencyInjection.SuppressSnifferAttribute">
            <summary>
            不被扫描和发现的特性
            </summary>
            <remarks>用于程序集扫描类型或方法时候</remarks>
        </member>
        <member name="T:Furion.DependencyInjection.IPrivateDependency">
            <summary>
            依赖空接口（禁止外部继承）
            </summary>
        </member>
        <member name="T:Furion.DependencyInjection.IScoped">
            <summary>
            作用域服务注册依赖
            </summary>
        </member>
        <member name="T:Furion.DependencyInjection.ISingleton">
            <summary>
            单例服务注册依赖
            </summary>
        </member>
        <member name="T:Furion.DependencyInjection.ITransient">
            <summary>
            瞬时服务注册依赖
            </summary>
        </member>
        <member name="T:Furion.DependencyInjection.InjectionActions">
            <summary>
            服务注册方式
            </summary>
        </member>
        <member name="F:Furion.DependencyInjection.InjectionActions.Add">
            <summary>
            如果存在则覆盖
            </summary>
        </member>
        <member name="F:Furion.DependencyInjection.InjectionActions.TryAdd">
            <summary>
            如果存在则跳过，默认方式
            </summary>
        </member>
        <member name="T:Furion.DependencyInjection.InjectionPatterns">
            <summary>
            注册范围
            </summary>
        </member>
        <member name="F:Furion.DependencyInjection.InjectionPatterns.Self">
            <summary>
            只注册自己
            </summary>
        </member>
        <member name="F:Furion.DependencyInjection.InjectionPatterns.FirstInterface">
            <summary>
            第一个接口
            </summary>
        </member>
        <member name="F:Furion.DependencyInjection.InjectionPatterns.SelfWithFirstInterface">
            <summary>
            自己和第一个接口，默认值
            </summary>
        </member>
        <member name="F:Furion.DependencyInjection.InjectionPatterns.ImplementedInterfaces">
            <summary>
            所有接口
            </summary>
        </member>
        <member name="F:Furion.DependencyInjection.InjectionPatterns.All">
            <summary>
            注册自己包括所有接口
            </summary>
        </member>
        <member name="T:Furion.DependencyInjection.RegisterType">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="F:Furion.DependencyInjection.RegisterType.Transient">
            <summary>
            瞬时
            </summary>
        </member>
        <member name="F:Furion.DependencyInjection.RegisterType.Scoped">
            <summary>
            作用域
            </summary>
        </member>
        <member name="F:Furion.DependencyInjection.RegisterType.Singleton">
            <summary>
            单例
            </summary>
        </member>
        <member name="T:Furion.DependencyInjection.ExternalService">
            <summary>
            外部注册类型模型
            </summary>
        </member>
        <member name="P:Furion.DependencyInjection.ExternalService.Interface">
            <summary>
            接口类型，格式："程序集名称;接口完整名称"
            </summary>
        </member>
        <member name="P:Furion.DependencyInjection.ExternalService.Service">
            <summary>
            实例类型，格式："程序集名称;接口完整名称"
            </summary>
        </member>
        <member name="P:Furion.DependencyInjection.ExternalService.RegisterType">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="P:Furion.DependencyInjection.ExternalService.Action">
            <summary>
            添加服务方式，存在不添加，或继续添加
            </summary>
        </member>
        <member name="P:Furion.DependencyInjection.ExternalService.Pattern">
            <summary>
            注册选项
            </summary>
        </member>
        <member name="P:Furion.DependencyInjection.ExternalService.Named">
            <summary>
            注册别名
            </summary>
            <remarks>多服务时使用</remarks>
        </member>
        <member name="P:Furion.DependencyInjection.ExternalService.Order">
            <summary>
            排序，排序越大，则在后面注册
            </summary>
        </member>
        <member name="P:Furion.DependencyInjection.ExternalService.Proxy">
            <summary>
            代理类型，格式："程序集名称;接口完整名称"
            </summary>
        </member>
        <member name="T:Furion.DependencyInjection.DependencyInjectionSettingsOptions">
            <summary>
            依赖注入配置选项
            </summary>
        </member>
        <member name="P:Furion.DependencyInjection.DependencyInjectionSettingsOptions.Definitions">
            <summary>
            外部注册定义
            </summary>
        </member>
        <member name="M:Furion.DependencyInjection.DependencyInjectionSettingsOptions.PostConfigure(Furion.DependencyInjection.DependencyInjectionSettingsOptions,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            后期配置
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Furion.DependencyInjection.INamedServiceProvider`1">
            <summary>
            命名服务提供器
            </summary>
            <typeparam name="TService">目标服务接口</typeparam>
        </member>
        <member name="M:Furion.DependencyInjection.INamedServiceProvider`1.GetService(System.String)">
            <summary>
            根据服务名称获取服务
            </summary>
            <param name="serviceName">服务名称</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DependencyInjection.INamedServiceProvider`1.GetService``1(System.String)">
            <summary>
            根据服务名称获取服务
            </summary>
            <typeparam name="ILifetime">服务生存周期接口，<see cref="T:Furion.DependencyInjection.ITransient"/>，<see cref="T:Furion.DependencyInjection.IScoped"/>，<see cref="T:Furion.DependencyInjection.ISingleton"/></typeparam>
            <param name="serviceName">服务名称</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DependencyInjection.INamedServiceProvider`1.GetRequiredService(System.String)">
            <summary>
            根据服务名称获取服务
            </summary>
            <param name="serviceName">服务名称</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DependencyInjection.INamedServiceProvider`1.GetRequiredService``1(System.String)">
            <summary>
            根据服务名称获取服务
            </summary>
            <typeparam name="ILifetime">服务生存周期接口，<see cref="T:Furion.DependencyInjection.ITransient"/>，<see cref="T:Furion.DependencyInjection.IScoped"/>，<see cref="T:Furion.DependencyInjection.ISingleton"/></typeparam>
            <param name="serviceName">服务名称</param>
            <returns></returns>
        </member>
        <member name="T:Furion.DependencyInjection.NamedServiceProvider`1">
            <summary>
            命名服务提供器默认实现
            </summary>
            <typeparam name="TService">目标服务接口</typeparam>
        </member>
        <member name="F:Furion.DependencyInjection.NamedServiceProvider`1._serviceProvider">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="M:Furion.DependencyInjection.NamedServiceProvider`1.#ctor(System.IServiceProvider)">
            <summary>
            构造函数
            </summary>
            <param name="serviceProvider">服务提供器</param>
        </member>
        <member name="M:Furion.DependencyInjection.NamedServiceProvider`1.GetService(System.String)">
            <summary>
            根据服务名称获取服务
            </summary>
            <param name="serviceName">服务名称</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DependencyInjection.NamedServiceProvider`1.GetService``1(System.String)">
            <summary>
            根据服务名称获取服务
            </summary>
            <typeparam name="ILifetime">服务生存周期接口，<see cref="T:Furion.DependencyInjection.ITransient"/>，<see cref="T:Furion.DependencyInjection.IScoped"/>，<see cref="T:Furion.DependencyInjection.ISingleton"/></typeparam>
            <param name="serviceName">服务名称</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DependencyInjection.NamedServiceProvider`1.GetRequiredService(System.String)">
            <summary>
            根据服务名称获取服务
            </summary>
            <param name="serviceName">服务名称</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DependencyInjection.NamedServiceProvider`1.GetRequiredService``1(System.String)">
            <summary>
            根据服务名称获取服务
            </summary>
            <typeparam name="ILifetime">服务生存周期接口，<see cref="T:Furion.DependencyInjection.ITransient"/>，<see cref="T:Furion.DependencyInjection.IScoped"/>，<see cref="T:Furion.DependencyInjection.ISingleton"/></typeparam>
            <param name="serviceName">服务名称</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DependencyInjection.NamedServiceProvider`1.ResovleServiceName(System.Type)">
            <summary>
            解析服务名称
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.DependencyInjection.Scoped">
            <summary>
            创建作用域静态类
            </summary>
        </member>
        <member name="M:Furion.DependencyInjection.Scoped.Create(System.Action{Microsoft.Extensions.DependencyInjection.IServiceScopeFactory,Microsoft.Extensions.DependencyInjection.IServiceScope},Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)">
            <summary>
            创建一个作用域范围
            </summary>
            <param name="handler"></param>
            <param name="scopeFactory"></param>
        </member>
        <member name="M:Furion.DependencyInjection.Scoped.CreateAsync(System.Func{Microsoft.Extensions.DependencyInjection.IServiceScopeFactory,Microsoft.Extensions.DependencyInjection.IServiceScope,System.Threading.Tasks.Task},Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)">
            <summary>
            创建一个作用域范围（异步）
            </summary>
            <param name="handler"></param>
            <param name="scopeFactory"></param>
        </member>
        <member name="M:Furion.DependencyInjection.Scoped.CreateScope(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory@)">
            <summary>
            创建一个作用域
            </summary>
            <param name="scopeFactory"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.DistributedIDGenerator.SequentialGuidType">
            <summary>
            连续 GUID 类型选项
            </summary>
        </member>
        <member name="F:Furion.DistributedIDGenerator.SequentialGuidType.SequentialAsString">
            <summary>
            标准连续 GUID 字符串
            </summary>
        </member>
        <member name="F:Furion.DistributedIDGenerator.SequentialGuidType.SequentialAsBinary">
            <summary>
            Byte 数组类型的连续 `GUID` 字符串
            </summary>
        </member>
        <member name="F:Furion.DistributedIDGenerator.SequentialGuidType.SequentialAtEnd">
            <summary>
            连续部分在末尾展示
            </summary>
        </member>
        <member name="T:Furion.DistributedIDGenerator.IDistributedIDGenerator">
            <summary>
            分布式 ID 生成器
            </summary>
        </member>
        <member name="M:Furion.DistributedIDGenerator.IDistributedIDGenerator.Create(System.Object)">
            <summary>
            生成逻辑
            </summary>
            <param name="idGeneratorOptions"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.DistributedIDGenerator.SequentialGuidIDGenerator">
            <summary>
            连续 GUID ID 生成器
            <para>代码参考自：https://github.com/PomeloFoundation/Pomelo.EntityFrameworkCore.MySql/blob/ebe011a6f1b2a2a9709fe558cfc7ed3215b55c37/src/EFCore.MySql/ValueGeneration/Internal/MySqlSequentialGuidValueGenerator.cs </para>
            </summary>
        </member>
        <member name="F:Furion.DistributedIDGenerator.SequentialGuidIDGenerator._rng">
            <summary>
            随机数生成器
            </summary>
        </member>
        <member name="M:Furion.DistributedIDGenerator.SequentialGuidIDGenerator.Create(System.Object)">
            <summary>
            生成逻辑
            </summary>
            <param name="idGeneratorOptions"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.DistributedIDGenerator.IDGen">
            <summary>
            ID 生成器
            </summary>
        </member>
        <member name="M:Furion.DistributedIDGenerator.IDGen.NextID(System.Object,System.IServiceProvider)">
            <summary>
            生成唯一 ID
            </summary>
            <param name="idGeneratorOptions"></param>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DistributedIDGenerator.IDGen.NextID(System.IServiceProvider)">
            <summary>
            生成连续 GUID
            </summary>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.DistributedIDGenerator.SequentialGuidSettings">
            <summary>
            连续 GUID 配置
            </summary>
        </member>
        <member name="P:Furion.DistributedIDGenerator.SequentialGuidSettings.TimeNow">
            <summary>
            当前时间
            </summary>
        </member>
        <member name="P:Furion.DistributedIDGenerator.SequentialGuidSettings.LittleEndianBinary16Format">
            <summary>
            LittleEndianBinary 16 格式化
            </summary>
        </member>
        <member name="T:Furion.DistributedIDGenerator.Constants">
            <summary>
            短 ID 约束
            </summary>
        </member>
        <member name="F:Furion.DistributedIDGenerator.Constants.MinimumAutoLength">
            <summary>
            最小长度
            </summary>
        </member>
        <member name="F:Furion.DistributedIDGenerator.Constants.MaximumAutoLength">
            <summary>
            最大长度
            </summary>
        </member>
        <member name="F:Furion.DistributedIDGenerator.Constants.MinimumCharacterSetLength">
            <summary>
            最小可选字符长度
            </summary>
        </member>
        <member name="T:Furion.DistributedIDGenerator.RandomHelpers">
            <summary>
            随机数帮助类
            </summary>
        </member>
        <member name="F:Furion.DistributedIDGenerator.RandomHelpers.Random">
            <summary>
            随机数对象
            </summary>
        </member>
        <member name="F:Furion.DistributedIDGenerator.RandomHelpers.ThreadLock">
            <summary>
            线程锁
            </summary>
        </member>
        <member name="M:Furion.DistributedIDGenerator.RandomHelpers.GenerateNumberInRange(System.Int32,System.Int32)">
            <summary>
            生成线程安全的范围内随机数
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.DistributedIDGenerator.GenerationOptions">
            <summary>
            短 ID 生成配置选项
            </summary>
        </member>
        <member name="P:Furion.DistributedIDGenerator.GenerationOptions.UseNumbers">
            <summary>
            是否使用数字
            <para>默认 false</para>
            </summary>
        </member>
        <member name="P:Furion.DistributedIDGenerator.GenerationOptions.UseSpecialCharacters">
            <summary>
            是否使用特殊字符
            <para>默认 true</para>
            </summary>
        </member>
        <member name="P:Furion.DistributedIDGenerator.GenerationOptions.Length">
            <summary>
            设置短 ID 长度
            </summary>
        </member>
        <member name="T:Furion.DistributedIDGenerator.ShortIDGen">
            <summary>
            短 ID 生成核心代码
            <para>代码参考自：https://github.com/bolorundurowb/shortid </para>
            </summary>
        </member>
        <member name="F:Furion.DistributedIDGenerator.ShortIDGen._random">
            <summary>
            短 ID 生成器期初数据
            </summary>
        </member>
        <member name="F:Furion.DistributedIDGenerator.ShortIDGen.ThreadLock">
            <summary>
            线程安全锁
            </summary>
        </member>
        <member name="M:Furion.DistributedIDGenerator.ShortIDGen.NextID">
            <summary>
            生成目前比较主流的短 ID
            <para>包含字母、数字，不包含特殊字符</para>
            <para>默认生成 8 位</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.DistributedIDGenerator.ShortIDGen.NextID(Furion.DistributedIDGenerator.GenerationOptions)">
            <summary>
            生成短 ID
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DistributedIDGenerator.ShortIDGen.SetCharacters(System.String)">
            <summary>
            设置参与运算的字符，最少 50 位
            </summary>
            <param name="characters"></param>
        </member>
        <member name="M:Furion.DistributedIDGenerator.ShortIDGen.SetSeed(System.Int32)">
            <summary>
            设置种子步长
            </summary>
            <param name="seed"></param>
        </member>
        <member name="M:Furion.DistributedIDGenerator.ShortIDGen.Reset">
            <summary>
            重置所有配置
            </summary>
        </member>
        <member name="T:Furion.DynamicApiController.QueryParametersAttribute">
            <summary>
            将 Action 所有参数 [FromQuery] 化
            </summary>
        </member>
        <member name="M:Furion.DynamicApiController.QueryParametersAttribute.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="T:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention">
            <summary>
            动态接口控制器应用模型转换器
            </summary>
        </member>
        <member name="F:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention._dynamicApiControllerSettings">
            <summary>
            动态接口控制器配置实例
            </summary>
        </member>
        <member name="F:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention._nameVersionRegex">
            <summary>
            带版本的名称正则表达式
            </summary>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel)">
            <summary>
            配置应用模型信息
            </summary>
            <param name="application">引用模型</param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ConfigureController(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute)">
            <summary>
            配置控制器
            </summary>
            <param name="controller">控制器模型</param>
            <param name="controllerApiDescriptionSettings">接口描述配置</param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ConfigureControllerArea(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute)">
            <summary>
            配置控制器区域
            </summary>
            <param name="controller"></param>
            <param name="controllerApiDescriptionSettings"></param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ConfigureControllerName(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute)">
            <summary>
            配置控制器名称
            </summary>
            <param name="controller">控制器模型</param>
            <param name="controllerApiDescriptionSettings">接口描述配置</param>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ForceWithDefaultPrefixRouteControllerTypes">
            <summary>
            强制处理了 ForceWithDefaultPrefix 的控制器
            </summary>
            <remarks>避免路由无限追加</remarks>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ConfigureControllerRouteAttribute(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute)">
            <summary>
            配置控制器路由特性
            </summary>
            <param name="controller"></param>
            <param name="controllerApiDescriptionSettings"></param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ConfigureAction(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute,System.Boolean)">
            <summary>
            配置动作方法
            </summary>
            <param name="action">控制器模型</param>
            <param name="apiDescriptionSettings">接口描述配置</param>
            <param name="controllerApiDescriptionSettings">控制器接口描述配置</param>
            <param name="hasApiControllerAttribute">是否贴有 ApiController 特性</param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ConfigureActionApiExplorer(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)">
            <summary>
            配置动作方法接口可见性
            </summary>
            <param name="action">动作方法模型</param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ConfigureActionName(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute)">
            <summary>
            配置动作方法名称
            </summary>
            <param name="action">动作方法模型</param>
            <param name="apiDescriptionSettings">接口描述配置</param>
            <param name="controllerApiDescriptionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ConfigureActionHttpMethodAttribute(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)">
            <summary>
            配置动作方法请求谓词特性
            </summary>
            <param name="action">动作方法模型</param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ConfigureClassTypeParameter(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)">
            <summary>
            处理类类型参数（添加[FromBody] 特性）
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ConfigureActionRouteAttribute(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            配置动作方法路由特性
            </summary>
            <param name="action">动作方法模型</param>
            <param name="apiDescriptionSettings">接口描述配置</param>
            <param name="controllerApiDescriptionSettings">控制器接口描述配置</param>
            <param name="isLowercaseRoute"></param>
            <param name="isKeepName"></param>
            <param name="isLowerCamelCase"></param>
            <param name="hasApiControllerAttribute"></param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.GenerateControllerRouteTemplate(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute,Furion.DynamicApiController.ParameterRouteTemplate)">
            <summary>
            生成控制器路由模板
            </summary>
            <param name="controller"></param>
            <param name="apiDescriptionSettings"></param>
            <param name="parameterRouteTemplate">参数路由模板</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.GenerateParameterRouteTemplates(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            生成参数路由模板（非引用类型）
            </summary>
            <param name="action">动作方法模型</param>
            <param name="isLowercaseRoute"></param>
            <param name="isLowerCamelCase"></param>
            <param name="hasApiControllerAttribute"></param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ConfigureControllerAndActionName(Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute,System.String,System.String[],System.Func{System.String,System.String},Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute)">
            <summary>
            配置控制器和动作方法名称
            </summary>
            <param name="apiDescriptionSettings"></param>
            <param name="orignalName"></param>
            <param name="affixes"></param>
            <param name="configure"></param>
            <param name="controllerApiDescriptionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.CheckIsKeepName(Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute)">
            <summary>
            检查是否设置了 KeepName参数
            </summary>
            <param name="apiDescriptionSettings"></param>
            <param name="controllerApiDescriptionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.CheckIsKeepVerb(Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute)">
            <summary>
            检查是否设置了 KeepVerb 参数
            </summary>
            <param name="apiDescriptionSettings"></param>
            <param name="controllerApiDescriptionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.CheckIsForceWithDefaultRoute(Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute)">
            <summary>
            检查是否设置了 ForceWithRoutePrefix  参数
            </summary>
            <param name="controllerApiDescriptionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.CheckIsLowerCamelCase(Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute)">
            <summary>
            检查是否设置了 AsLowerCamelCase 参数
            </summary>
            <param name="apiDescriptionSettings"></param>
            <param name="controllerApiDescriptionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.CheckIsSplitCamelCase(Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute)">
            <summary>
            判断切割命名参数是否配置
            </summary>
            <param name="apiDescriptionSettings"></param>
            <param name="controllerApiDescriptionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.CheckIsLowercaseRoute(Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute,Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute)">
            <summary>
            检查是否启用小写路由
            </summary>
            <param name="apiDescriptionSettings"></param>
            <param name="controllerApiDescriptionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ConfigureActionUnifyResultAttribute(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)">
            <summary>
            配置规范化结果类型
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.ResolveNameVersion(System.String)">
            <summary>
            解析名称中的版本号
            </summary>
            <param name="name">名称</param>
            <returns>名称和版本号</returns>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerApplicationModelConvention.LoadVerbToHttpMethodsConfigure">
            <summary>
            获取方法名映射 [HttpMethod] 规则
            </summary>
            <returns></returns>
        </member>
        <member name="T:Furion.DynamicApiController.IDynamicApiController">
            <summary>
            动态Api控制器依赖接口
            </summary>
        </member>
        <member name="T:Furion.DynamicApiController.ParameterRouteTemplate">
            <summary>
            参数路由模板
            </summary>
        </member>
        <member name="M:Furion.DynamicApiController.ParameterRouteTemplate.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.ParameterRouteTemplate.ControllerStartTemplates">
            <summary>
            控制器之前的参数
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.ParameterRouteTemplate.ControllerEndTemplates">
            <summary>
            控制器之后的参数
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.ParameterRouteTemplate.ActionStartTemplates">
            <summary>
            行为之前的参数
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.ParameterRouteTemplate.ActionEndTemplates">
            <summary>
            行为之后的参数
            </summary>
        </member>
        <member name="T:Furion.DynamicApiController.Penetrates">
            <summary>
            常量、公共方法配置类
            </summary>
        </member>
        <member name="F:Furion.DynamicApiController.Penetrates.GroupSeparator">
            <summary>
            分组分隔符
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.Penetrates.VerbToHttpMethods">
            <summary>
            请求动词映射字典
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.Penetrates.ControllerOrderCollection">
            <summary>
            控制器排序集合
            </summary>
        </member>
        <member name="M:Furion.DynamicApiController.Penetrates.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Furion.DynamicApiController.Penetrates.IsApiControllerCached">
            <summary>
            <see cref="M:Furion.DynamicApiController.Penetrates.IsApiController(System.Type)"/> 缓存集合
            </summary>
        </member>
        <member name="M:Furion.DynamicApiController.Penetrates.IsApiController(System.Type)">
            <summary>
            是否是Api控制器
            </summary>
            <param name="type">type</param>
            <returns></returns>
        </member>
        <member name="T:Furion.DynamicApiController.DynamicApiControllerSettingsOptions">
            <summary>
            动态接口控制器配置
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.DefaultRoutePrefix">
            <summary>
            默认路由前缀
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.DefaultHttpMethod">
            <summary>
            默认请求谓词
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.DefaultModule">
            <summary>
            默认模块名称
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.LowercaseRoute">
            <summary>
            小写路由
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.AsLowerCamelCase">
            <summary>
            小驼峰命名（首字符小写）
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.KeepVerb">
            <summary>
            保留行为名称谓词
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.KeepName">
            <summary>
            保留名称
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.CamelCaseSeparator">
            <summary>
            骆驼命名分隔符
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.VersionSeparator">
            <summary>
            版本号分隔符
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.ModelToQuery">
            <summary>
            模型转查询参数（只有GET、HEAD请求有效）
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.SupportedMvcController">
            <summary>
            支持Mvc控制器处理
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.UrlParameterization">
            <summary>
            配置参数 [FromQuery] 化，默认 false ([FromRoute])
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.AbandonControllerAffixes">
            <summary>
            被舍弃的控制器名称前后缀
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.AbandonActionAffixes">
            <summary>
            被舍弃的行为名称前后缀
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.VerbToHttpMethods">
            <summary>
            复写默认配置路由规则配置
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.DefaultArea">
            <summary>
            默认区域
            </summary>
        </member>
        <member name="P:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.ForceWithRoutePrefix">
            <summary>
            强制携带路由前缀，即使使用 [Route] 重写
            </summary>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerSettingsOptions.PostConfigure(Furion.DynamicApiController.DynamicApiControllerSettingsOptions,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            选项后期配置
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Furion.DynamicApiController.DynamicApiControllerFeatureProvider">
            <summary>
            动态接口控制器特性提供器
            </summary>
        </member>
        <member name="M:Furion.DynamicApiController.DynamicApiControllerFeatureProvider.IsController(System.Reflection.TypeInfo)">
            <summary>
            扫描控制器
            </summary>
            <param name="typeInfo">类型</param>
            <returns>bool</returns>
        </member>
        <member name="T:Furion.EventBus.EventSubscribeAttribute">
            <summary>
            事件处理程序特性
            </summary>
            <remarks>
            <para>作用于 <see cref="T:Furion.EventBus.IEventSubscriber"/> 实现类实例方法</para>
            <para>支持多个事件 Id 触发同一个事件处理程序</para>
            </remarks>
        </member>
        <member name="M:Furion.EventBus.EventSubscribeAttribute.#ctor(System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="eventId">事件 Id</param>
            <remarks>只支持事件类型和 Enum 类型</remarks>
        </member>
        <member name="P:Furion.EventBus.EventSubscribeAttribute.EventId">
            <summary>
            事件 Id
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventSubscribeAttribute.FuzzyMatch">
            <summary>
            是否启用模糊匹配消息
            </summary>
            <remarks>支持正则表达式，bool 类型，默认为 null</remarks>
        </member>
        <member name="P:Furion.EventBus.EventSubscribeAttribute.NumRetries">
            <summary>
            重试次数
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventSubscribeAttribute.RetryTimeout">
            <summary>
            重试间隔时间
            </summary>
            <remarks>默认1000毫秒</remarks>
        </member>
        <member name="P:Furion.EventBus.EventSubscribeAttribute.ExceptionTypes">
            <summary>
            可以指定特定异常类型才重试
            </summary>
        </member>
        <member name="T:Furion.EventBus.EventBusOptionsBuilder">
            <summary>
            事件总线配置选项构建器
            </summary>
        </member>
        <member name="F:Furion.EventBus.EventBusOptionsBuilder._eventSubscribers">
            <summary>
            事件订阅者类型集合
            </summary>
        </member>
        <member name="F:Furion.EventBus.EventBusOptionsBuilder._eventPublisher">
            <summary>
            事件发布者类型
            </summary>
        </member>
        <member name="F:Furion.EventBus.EventBusOptionsBuilder._eventSourceStorerImplementationFactory">
            <summary>
            事件存储器实现工厂
            </summary>
        </member>
        <member name="F:Furion.EventBus.EventBusOptionsBuilder._eventHandlerMonitor">
            <summary>
            事件处理程序监视器
            </summary>
        </member>
        <member name="F:Furion.EventBus.EventBusOptionsBuilder._eventHandlerExecutor">
            <summary>
            事件处理程序执行器
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventBusOptionsBuilder.ChannelCapacity">
            <summary>
            默认内置事件源存储器内存通道容量
            </summary>
            <remarks>超过 n 条待处理消息，第 n+1 条将进入等待，默认为 3000</remarks>
        </member>
        <member name="P:Furion.EventBus.EventBusOptionsBuilder.UseUtcTimestamp">
            <summary>
            是否使用 UTC 时间戳，默认 false
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventBusOptionsBuilder.FuzzyMatch">
            <summary>
            是否启用模糊匹配消息
            </summary>
            <remarks>支持正则表达式</remarks>
        </member>
        <member name="P:Furion.EventBus.EventBusOptionsBuilder.LogEnabled">
            <summary>
            是否启用日志记录
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventBusOptionsBuilder.UnobservedTaskExceptionHandler">
            <summary>
            未察觉任务异常事件处理程序
            </summary>
        </member>
        <member name="M:Furion.EventBus.EventBusOptionsBuilder.AddSubscriber``1">
            <summary>
            注册事件订阅者
            </summary>
            <typeparam name="TEventSubscriber">实现自 <see cref="T:Furion.EventBus.IEventSubscriber"/></typeparam>
            <returns><see cref="T:Furion.EventBus.EventBusOptionsBuilder"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.EventBusOptionsBuilder.AddSubscriber(System.Type)">
            <summary>
            注册事件订阅者
            </summary>
            <param name="eventSubscriberType"><see cref="T:Furion.EventBus.IEventSubscriber"/> 派生类型</param>
            <returns><see cref="T:Furion.EventBus.EventBusOptionsBuilder"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.EventBusOptionsBuilder.AddSubscribers(System.Reflection.Assembly[])">
            <summary>
            批量注册事件订阅者
            </summary>
            <param name="assemblies">程序集</param>
            <returns><see cref="T:Furion.EventBus.EventBusOptionsBuilder"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.EventBusOptionsBuilder.ReplacePublisher``1">
            <summary>
            替换事件发布者
            </summary>
            <typeparam name="TEventPublisher">实现自 <see cref="T:Furion.EventBus.IEventPublisher"/></typeparam>
            <returns><see cref="T:Furion.EventBus.EventBusOptionsBuilder"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.EventBusOptionsBuilder.ReplaceStorer(System.Func{System.IServiceProvider,Furion.EventBus.IEventSourceStorer})">
            <summary>
            替换事件源存储器
            </summary>
            <param name="implementationFactory">自定义事件源存储器工厂</param>
            <returns><see cref="T:Furion.EventBus.EventBusOptionsBuilder"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.EventBusOptionsBuilder.AddMonitor``1">
            <summary>
            注册事件处理程序监视器
            </summary>
            <typeparam name="TEventHandlerMonitor">实现自 <see cref="T:Furion.EventBus.IEventHandlerMonitor"/></typeparam>
            <returns><see cref="T:Furion.EventBus.EventBusOptionsBuilder"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.EventBusOptionsBuilder.AddExecutor``1">
            <summary>
            注册事件处理程序执行器
            </summary>
            <typeparam name="TEventHandlerExecutor">实现自 <see cref="T:Furion.EventBus.IEventHandlerExecutor"/></typeparam>
            <returns><see cref="T:Furion.EventBus.EventBusOptionsBuilder"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.EventBusOptionsBuilder.Build(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            构建事件总线配置选项
            </summary>
            <param name="services">服务集合对象</param>
        </member>
        <member name="T:Furion.EventBus.EventSubscribeOperates">
            <summary>
            事件订阅器操作选项
            </summary>
            <remarks>控制动态新增/删除事件订阅器</remarks>
        </member>
        <member name="F:Furion.EventBus.EventSubscribeOperates.Append">
            <summary>
            添加一条订阅器
            </summary>
        </member>
        <member name="F:Furion.EventBus.EventSubscribeOperates.Remove">
            <summary>
            删除一条订阅器
            </summary>
        </member>
        <member name="T:Furion.EventBus.EventHandlerContext">
            <summary>
            事件处理程序上下文
            </summary>
        </member>
        <member name="M:Furion.EventBus.EventHandlerContext.#ctor(Furion.EventBus.IEventSource,System.Collections.Generic.IDictionary{System.Object,System.Object},System.Reflection.MethodInfo,Furion.EventBus.EventSubscribeAttribute)">
            <summary>
            构造函数
            </summary>
            <param name="eventSource">事件源（事件承载对象）</param>
            <param name="properties">共享上下文数据</param>
            <param name="handlerMethod">触发的方法</param>
            <param name="attribute">订阅特性</param>
        </member>
        <member name="P:Furion.EventBus.EventHandlerContext.Source">
            <summary>
            事件源（事件承载对象）
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventHandlerContext.Properties">
            <summary>
            共享上下文数据
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventHandlerContext.HandlerMethod">
            <summary>
            触发的方法
            </summary>
            <remarks>如果是动态订阅，可能为 null</remarks>
        </member>
        <member name="P:Furion.EventBus.EventHandlerContext.Attribute">
            <summary>
            订阅特性
            </summary>
            <remarks><remarks>如果是动态订阅，可能为 null</remarks></remarks>
        </member>
        <member name="T:Furion.EventBus.EventHandlerExecutedContext">
            <summary>
            事件处理程序执行后上下文
            </summary>
        </member>
        <member name="M:Furion.EventBus.EventHandlerExecutedContext.#ctor(Furion.EventBus.IEventSource,System.Collections.Generic.IDictionary{System.Object,System.Object},System.Reflection.MethodInfo,Furion.EventBus.EventSubscribeAttribute)">
            <summary>
            构造函数
            </summary>
            <param name="eventSource">事件源（事件承载对象）</param>
            <param name="properties">共享上下文数据</param>
            <param name="handlerMethod">触发的方法</param>
            <param name="attribute">订阅特性</param>
        </member>
        <member name="P:Furion.EventBus.EventHandlerExecutedContext.ExecutedTime">
            <summary>
            执行后时间
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventHandlerExecutedContext.Exception">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="T:Furion.EventBus.EventHandlerExecutingContext">
            <summary>
            事件处理程序执行前上下文
            </summary>
        </member>
        <member name="M:Furion.EventBus.EventHandlerExecutingContext.#ctor(Furion.EventBus.IEventSource,System.Collections.Generic.IDictionary{System.Object,System.Object},System.Reflection.MethodInfo,Furion.EventBus.EventSubscribeAttribute)">
            <summary>
            构造函数
            </summary>
            <param name="eventSource">事件源（事件承载对象）</param>
            <param name="properties">共享上下文数据</param>
            <param name="handlerMethod">触发的方法</param>
            <param name="attribute">订阅特性</param>
        </member>
        <member name="P:Furion.EventBus.EventHandlerExecutingContext.ExecutingTime">
            <summary>
            执行前时间
            </summary>
        </member>
        <member name="T:Furion.EventBus.IEventPublisher">
            <summary>
            事件发布服务依赖接口
            </summary>
        </member>
        <member name="M:Furion.EventBus.IEventPublisher.PublishAsync(Furion.EventBus.IEventSource)">
            <summary>
            发布一条消息
            </summary>
            <param name="eventSource">事件源</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.IEventPublisher.PublishDelayAsync(Furion.EventBus.IEventSource,System.Int64)">
            <summary>
            延迟发布一条消息
            </summary>
            <param name="eventSource">事件源</param>
            <param name="delay">延迟数（毫秒）</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.IEventPublisher.PublishAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            发布一条消息
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken"> 取消任务 Token</param>
            <returns></returns>
        </member>
        <member name="M:Furion.EventBus.IEventPublisher.PublishAsync(System.Enum,System.Object,System.Threading.CancellationToken)">
            <summary>
            发布一条消息
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken"> 取消任务 Token</param>
            <returns></returns>
        </member>
        <member name="M:Furion.EventBus.IEventPublisher.PublishDelayAsync(System.String,System.Int64,System.Object,System.Threading.CancellationToken)">
            <summary>
            延迟发布一条消息
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="delay">延迟数（毫秒）</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken"> 取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.IEventPublisher.PublishDelayAsync(System.Enum,System.Int64,System.Object,System.Threading.CancellationToken)">
            <summary>
            延迟发布一条消息
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="delay">延迟数（毫秒）</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken"> 取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="T:Furion.EventBus.IEventSubscriber">
            <summary>
            事件订阅者依赖接口
            </summary>
            <remarks>
            <para>可自定义事件处理方法，但须符合 Func{EventSubscribeExecutingContext, Task} 签名</para>
            <para>通常只做依赖查找，不做服务调用</para>
            </remarks>
        </member>
        <member name="T:Furion.EventBus.IEventHandlerExecutor">
            <summary>
            事件处理程序执行器依赖接口
            </summary>
        </member>
        <member name="M:Furion.EventBus.IEventHandlerExecutor.ExecuteAsync(Furion.EventBus.EventHandlerExecutingContext,System.Func{Furion.EventBus.EventHandlerExecutingContext,System.Threading.Tasks.Task})">
            <summary>
            执行事件处理程序
            </summary>
            <remarks>在这里可以实现超时控制，失败重试控制等等</remarks>
            <param name="context">事件处理程序执行前上下文</param>
            <param name="handler">事件处理程序</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="T:Furion.EventBus.EventBusFactory">
            <summary>
            事件总线工厂默认实现
            </summary>
        </member>
        <member name="F:Furion.EventBus.EventBusFactory._eventSourceStorer">
            <summary>
            事件源存储器
            </summary>
        </member>
        <member name="M:Furion.EventBus.EventBusFactory.#ctor(Furion.EventBus.IEventSourceStorer)">
            <summary>
            构造函数
            </summary>
            <param name="eventSourceStorer">事件源存储器</param>
        </member>
        <member name="M:Furion.EventBus.EventBusFactory.Subscribe(System.String,System.Func{Furion.EventBus.EventHandlerExecutingContext,System.Threading.Tasks.Task},Furion.EventBus.EventSubscribeAttribute,System.Reflection.MethodInfo,System.Threading.CancellationToken)">
            <summary>
            添加事件订阅者
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="handler">事件订阅委托</param>
            <param name="attribute"><see cref="T:Furion.EventBus.EventSubscribeAttribute"/> 特性对象</param>
            <param name="handlerMethod"><see cref="T:System.Reflection.MethodInfo"/> 对象</param>
            <param name="cancellationToken">取消任务 Token</param>
            <returns></returns>
        </member>
        <member name="M:Furion.EventBus.EventBusFactory.Unsubscribe(System.String,System.Threading.CancellationToken)">
            <summary>
            删除事件订阅者
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="cancellationToken">取消任务 Token</param>
            <returns></returns>
        </member>
        <member name="T:Furion.EventBus.IEventBusFactory">
            <summary>
            事件总线工厂接口
            </summary>
        </member>
        <member name="M:Furion.EventBus.IEventBusFactory.Subscribe(System.String,System.Func{Furion.EventBus.EventHandlerExecutingContext,System.Threading.Tasks.Task},Furion.EventBus.EventSubscribeAttribute,System.Reflection.MethodInfo,System.Threading.CancellationToken)">
            <summary>
            添加事件订阅者
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="handler">事件订阅委托</param>
            <param name="attribute"><see cref="T:Furion.EventBus.EventSubscribeAttribute"/> 特性对象</param>
            <param name="handlerMethod"><see cref="T:System.Reflection.MethodInfo"/> 对象</param>
            <param name="cancellationToken">取消任务 Token</param>
            <returns></returns>
        </member>
        <member name="M:Furion.EventBus.IEventBusFactory.Unsubscribe(System.String,System.Threading.CancellationToken)">
            <summary>
            删除事件订阅者
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="cancellationToken">取消任务 Token</param>
            <returns></returns>
        </member>
        <member name="T:Furion.EventBus.EventBusHostedService">
            <summary>
            事件总线后台主机服务
            </summary>
        </member>
        <member name="F:Furion.EventBus.EventBusHostedService.LOG_CATEGORY_NAME">
            <summary>
            日志 LogName
            </summary>
            <remarks>方便对日志进行过滤写入不同的存储介质中</remarks>
        </member>
        <member name="E:Furion.EventBus.EventBusHostedService.UnobservedTaskException">
            <summary>
            避免由 CLR 的终结器捕获该异常从而终止应用程序，让所有未觉察异常被觉察
            </summary>
        </member>
        <member name="F:Furion.EventBus.EventBusHostedService._logger">
            <summary>
            日志对象
            </summary>
        </member>
        <member name="F:Furion.EventBus.EventBusHostedService._eventSourceStorer">
            <summary>
            事件源存储器
            </summary>
        </member>
        <member name="F:Furion.EventBus.EventBusHostedService._eventHandlers">
            <summary>
            事件处理程序集合
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventBusHostedService.Monitor">
            <summary>
            事件处理程序监视器
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventBusHostedService.Executor">
            <summary>
            事件处理程序执行器
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventBusHostedService.UseUtcTimestamp">
            <summary>
            是否使用 UTC 时间
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventBusHostedService.FuzzyMatch">
            <summary>
            是否启用模糊匹配事件消息
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventBusHostedService.LogEnabled">
            <summary>
            是否启用日志记录
            </summary>
        </member>
        <member name="M:Furion.EventBus.EventBusHostedService.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,System.IServiceProvider,Furion.EventBus.IEventSourceStorer,System.Collections.Generic.IEnumerable{Furion.EventBus.IEventSubscriber},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="loggerFactory">日志工厂</param>
            <param name="serviceProvider">服务提供器</param>
            <param name="eventSourceStorer">事件源存储器</param>
            <param name="eventSubscribers">事件订阅者集合</param>
            <param name="useUtcTimestamp">是否使用 Utc 时间</param>
            <param name="fuzzyMatch">是否启用模糊匹配事件消息</param>
            <param name="logEnabled">是否启用日志记录</param>
        </member>
        <member name="M:Furion.EventBus.EventBusHostedService.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            执行后台任务
            </summary>
            <param name="stoppingToken">后台主机服务停止时取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.EventBusHostedService.BackgroundProcessing(System.Threading.CancellationToken)">
            <summary>
            后台调用事件处理程序
            </summary>
            <param name="stoppingToken">后台主机服务停止时取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.EventBusHostedService.ManageEventSubscribers(Furion.EventBus.EventSubscribeOperateSource)">
            <summary>
            管理事件订阅器动态
            </summary>
            <param name="subscribeOperateSource"></param>
        </member>
        <member name="M:Furion.EventBus.EventBusHostedService.CheckIsSetFuzzyMatch(System.Object)">
            <summary>
            检查是否开启模糊匹配事件 Id 功能
            </summary>
            <param name="fuzzyMatch"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.EventBus.EventBusHostedService.Log(Microsoft.Extensions.Logging.LogLevel,System.String,System.Object[],System.Exception)">
            <summary>
            记录日志
            </summary>
            <param name="logLevel">日志级别</param>
            <param name="message">消息</param>
            <param name="args">参数</param>
            <param name="ex">异常</param>
        </member>
        <member name="T:Furion.EventBus.ChannelEventPublisher">
            <summary>
            基于内存通道事件发布者（默认实现）
            </summary>
        </member>
        <member name="F:Furion.EventBus.ChannelEventPublisher._eventSourceStorer">
            <summary>
            事件源存储器
            </summary>
        </member>
        <member name="M:Furion.EventBus.ChannelEventPublisher.#ctor(Furion.EventBus.IEventSourceStorer)">
            <summary>
            构造函数
            </summary>
            <param name="eventSourceStorer">事件源存储器</param>
        </member>
        <member name="M:Furion.EventBus.ChannelEventPublisher.PublishAsync(Furion.EventBus.IEventSource)">
            <summary>
            发布一条消息
            </summary>
            <param name="eventSource">事件源</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.ChannelEventPublisher.PublishDelayAsync(Furion.EventBus.IEventSource,System.Int64)">
            <summary>
            延迟发布一条消息
            </summary>
            <param name="eventSource">事件源</param>
            <param name="delay">延迟数（毫秒）</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.ChannelEventPublisher.PublishAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            发布一条消息
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken"> 取消任务 Token</param>
            <returns></returns>
        </member>
        <member name="M:Furion.EventBus.ChannelEventPublisher.PublishAsync(System.Enum,System.Object,System.Threading.CancellationToken)">
            <summary>
            发布一条消息
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken"> 取消任务 Token</param>
            <returns></returns>
        </member>
        <member name="M:Furion.EventBus.ChannelEventPublisher.PublishDelayAsync(System.String,System.Int64,System.Object,System.Threading.CancellationToken)">
            <summary>
            延迟发布一条消息
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="delay">延迟数（毫秒）</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken"> 取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.ChannelEventPublisher.PublishDelayAsync(System.Enum,System.Int64,System.Object,System.Threading.CancellationToken)">
            <summary>
            延迟发布一条消息
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="delay">延迟数（毫秒）</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken"> 取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="T:Furion.EventBus.MessageCenter">
            <summary>
            全局事件总线静态类
            </summary>
        </member>
        <member name="M:Furion.EventBus.MessageCenter.PublishAsync(Furion.EventBus.IEventSource)">
            <summary>
            发布一条消息
            </summary>
            <param name="eventSource">事件源</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.MessageCenter.PublishDelayAsync(Furion.EventBus.IEventSource,System.Int64)">
            <summary>
            延迟发布一条消息
            </summary>
            <param name="eventSource">事件源</param>
            <param name="delay">延迟数（毫秒）</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.MessageCenter.PublishAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            发布一条消息
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken"> 取消任务 Token</param>
            <returns></returns>
        </member>
        <member name="M:Furion.EventBus.MessageCenter.PublishAsync(System.Enum,System.Object,System.Threading.CancellationToken)">
            <summary>
            发布一条消息
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken"> 取消任务 Token</param>
            <returns></returns>
        </member>
        <member name="M:Furion.EventBus.MessageCenter.PublishDelayAsync(System.String,System.Int64,System.Object,System.Threading.CancellationToken)">
            <summary>
            延迟发布一条消息
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="delay">延迟数（毫秒）</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken"> 取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.MessageCenter.PublishDelayAsync(System.Enum,System.Int64,System.Object,System.Threading.CancellationToken)">
            <summary>
            延迟发布一条消息
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="delay">延迟数（毫秒）</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken"> 取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.MessageCenter.Subscribe(System.String,System.Func{Furion.EventBus.EventHandlerExecutingContext,System.Threading.Tasks.Task},Furion.EventBus.EventSubscribeAttribute,System.Reflection.MethodInfo,System.Threading.CancellationToken)">
            <summary>
            添加事件订阅者
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="handler">事件订阅委托</param>
            <param name="attribute"><see cref="T:Furion.EventBus.EventSubscribeAttribute"/> 特性对象</param>
            <param name="handlerMethod"><see cref="T:System.Reflection.MethodInfo"/> 对象</param>
            <param name="cancellationToken">取消任务 Token</param>
            <returns></returns>
        </member>
        <member name="M:Furion.EventBus.MessageCenter.Unsubscribe(System.String,System.Threading.CancellationToken)">
            <summary>
            删除事件订阅者
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="cancellationToken">取消任务 Token</param>
            <returns></returns>
        </member>
        <member name="M:Furion.EventBus.MessageCenter.GetEventPublisher">
            <summary>
            获取事件发布者
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.EventBus.MessageCenter.GetEventFactory">
            <summary>
            获取事件工厂
            </summary>
            <returns></returns>
        </member>
        <member name="T:Furion.EventBus.IEventHandlerMonitor">
            <summary>
            事件处理程序监视器
            </summary>
        </member>
        <member name="M:Furion.EventBus.IEventHandlerMonitor.OnExecutingAsync(Furion.EventBus.EventHandlerExecutingContext)">
            <summary>
            事件处理程序执行前
            </summary>
            <param name="context">上下文</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="M:Furion.EventBus.IEventHandlerMonitor.OnExecutedAsync(Furion.EventBus.EventHandlerExecutedContext)">
            <summary>
            事件处理程序执行后
            </summary>
            <param name="context">上下文</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> 实例</returns>
        </member>
        <member name="T:Furion.EventBus.ChannelEventSource">
            <summary>
            内存通道事件源（事件承载对象）
            </summary>
        </member>
        <member name="M:Furion.EventBus.ChannelEventSource.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.EventBus.ChannelEventSource.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="eventId">事件 Id</param>
        </member>
        <member name="M:Furion.EventBus.ChannelEventSource.#ctor(System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="payload">事件承载（携带）数据</param>
        </member>
        <member name="M:Furion.EventBus.ChannelEventSource.#ctor(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            构造函数
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken">取消任务 Token</param>
        </member>
        <member name="M:Furion.EventBus.ChannelEventSource.#ctor(System.Enum)">
            <summary>
            构造函数
            </summary>
            <param name="eventId">事件 Id</param>
        </member>
        <member name="M:Furion.EventBus.ChannelEventSource.#ctor(System.Enum,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="payload">事件承载（携带）数据</param>
        </member>
        <member name="M:Furion.EventBus.ChannelEventSource.#ctor(System.Enum,System.Object,System.Threading.CancellationToken)">
            <summary>
            构造函数
            </summary>
            <param name="eventId">事件 Id</param>
            <param name="payload">事件承载（携带）数据</param>
            <param name="cancellationToken">取消任务 Token</param>
        </member>
        <member name="P:Furion.EventBus.ChannelEventSource.EventId">
            <summary>
            事件 Id
            </summary>
        </member>
        <member name="P:Furion.EventBus.ChannelEventSource.Payload">
            <summary>
            事件承载（携带）数据
            </summary>
        </member>
        <member name="P:Furion.EventBus.ChannelEventSource.CreatedTime">
            <summary>
            事件创建时间
            </summary>
        </member>
        <member name="P:Furion.EventBus.ChannelEventSource.CancellationToken">
            <summary>
            取消任务 Token
            </summary>
            <remarks>用于取消本次消息处理</remarks>
        </member>
        <member name="T:Furion.EventBus.EventSubscribeOperateSource">
            <summary>
            事件总线订阅管理事件源
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventSubscribeOperateSource.EventId">
            <summary>
            事件 Id
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventSubscribeOperateSource.Payload">
            <summary>
            事件承载（携带）数据
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventSubscribeOperateSource.CancellationToken">
            <summary>
            取消任务 Token
            </summary>
            <remarks>用于取消本次消息处理</remarks>
        </member>
        <member name="P:Furion.EventBus.EventSubscribeOperateSource.CreatedTime">
            <summary>
            事件创建时间
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventSubscribeOperateSource.Handler">
            <summary>
            事件处理程序
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventSubscribeOperateSource.Attribute">
            <summary>
            订阅特性
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventSubscribeOperateSource.HandlerMethod">
            <summary>
            触发的方法
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventSubscribeOperateSource.SubscribeEventId">
            <summary>
            实际事件 Id
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventSubscribeOperateSource.Operate">
            <summary>
            事件订阅器操作选项
            </summary>
        </member>
        <member name="T:Furion.EventBus.IEventSource">
            <summary>
            事件源（事件承载对象）依赖接口
            </summary>
        </member>
        <member name="P:Furion.EventBus.IEventSource.EventId">
            <summary>
            事件 Id
            </summary>
        </member>
        <member name="P:Furion.EventBus.IEventSource.Payload">
            <summary>
            事件承载（携带）数据
            </summary>
        </member>
        <member name="P:Furion.EventBus.IEventSource.CreatedTime">
            <summary>
            事件创建时间
            </summary>
        </member>
        <member name="P:Furion.EventBus.IEventSource.CancellationToken">
            <summary>
            取消任务 Token
            </summary>
            <remarks>用于取消本次消息处理</remarks>
        </member>
        <member name="T:Furion.EventBus.ChannelEventSourceStorer">
            <summary>
            内存通道事件源存储器（默认实现）
            </summary>
            <remarks>
            <para>顾名思义，这里指的是事件消息存储中心，提供读写能力</para>
            <para>默认实现为内存中的 <see cref="T:System.Threading.Channels.Channel"/>，可自由更换存储介质，如 Kafka，SQL Server 等</para>
            </remarks>
        </member>
        <member name="F:Furion.EventBus.ChannelEventSourceStorer._channel">
            <summary>
            内存通道事件源存储器
            </summary>
        </member>
        <member name="M:Furion.EventBus.ChannelEventSourceStorer.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="capacity">存储器最多能够处理多少消息，超过该容量进入等待写入</param>
        </member>
        <member name="M:Furion.EventBus.ChannelEventSourceStorer.WriteAsync(Furion.EventBus.IEventSource,System.Threading.CancellationToken)">
            <summary>
            将事件源写入存储器
            </summary>
            <param name="eventSource">事件源对象</param>
            <param name="cancellationToken">取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.ValueTask"/></returns>
        </member>
        <member name="M:Furion.EventBus.ChannelEventSourceStorer.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            从存储器中读取一条事件源
            </summary>
            <param name="cancellationToken">取消任务 Token</param>
            <returns>事件源对象</returns>
        </member>
        <member name="T:Furion.EventBus.IEventSourceStorer">
            <summary>
            事件源存储器
            </summary>
            <remarks>
            <para>顾名思义，这里指的是事件消息存储中心，提供读写能力</para>
            <para>默认实现为内存中的 <see cref="T:System.Threading.Channels.Channel"/>，可自由更换存储介质，如 Kafka，SQL Server 等</para>
            </remarks>
        </member>
        <member name="M:Furion.EventBus.IEventSourceStorer.WriteAsync(Furion.EventBus.IEventSource,System.Threading.CancellationToken)">
            <summary>
            将事件源写入存储器
            </summary>
            <param name="eventSource">事件源对象</param>
            <param name="cancellationToken">取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.ValueTask"/></returns>
        </member>
        <member name="M:Furion.EventBus.IEventSourceStorer.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            从存储器中读取一条事件源
            </summary>
            <param name="cancellationToken">取消任务 Token</param>
            <returns>事件源对象</returns>
        </member>
        <member name="T:Furion.EventBus.EventHandlerWrapper">
            <summary>
            事件处理程序包装类
            </summary>
            <remarks>主要用于主机服务启动时将所有处理程序和事件 Id 进行包装绑定</remarks>
        </member>
        <member name="M:Furion.EventBus.EventHandlerWrapper.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="eventId">事件Id</param>
        </member>
        <member name="P:Furion.EventBus.EventHandlerWrapper.EventId">
            <summary>
            事件 Id
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventHandlerWrapper.Handler">
            <summary>
            事件处理程序
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventHandlerWrapper.HandlerMethod">
            <summary>
            触发的方法
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventHandlerWrapper.Attribute">
            <summary>
            订阅特性
            </summary>
        </member>
        <member name="P:Furion.EventBus.EventHandlerWrapper.Pattern">
            <summary>
            正则表达式
            </summary>
        </member>
        <member name="M:Furion.EventBus.EventHandlerWrapper.ShouldRun(System.String)">
            <summary>
            是否符合条件执行处理程序
            </summary>
            <remarks>支持正则表达式</remarks>
            <param name="eventId">事件 Id</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:Furion.Extensitions.EventBus.EventBusExtensitions">
            <summary>
            事件总线拓展类
            </summary>
        </member>
        <member name="M:Furion.Extensitions.EventBus.EventBusExtensitions.ParseToString(System.Enum)">
            <summary>
            将事件枚举 Id 转换成字符串对象
            </summary>
            <param name="em"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Extensitions.EventBus.EventBusExtensitions.ParseToEnum(System.String)">
            <summary>
            将事件枚举字符串转换成枚举对象
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.FriendlyException.ErrorCodeItemMetadataAttribute">
            <summary>
            异常元数据特性
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.ErrorCodeItemMetadataAttribute.#ctor(System.String,System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="errorMessage">错误消息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="P:Furion.FriendlyException.ErrorCodeItemMetadataAttribute.ErrorMessage">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.ErrorCodeItemMetadataAttribute.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.ErrorCodeItemMetadataAttribute.Args">
            <summary>
            格式化参数
            </summary>
        </member>
        <member name="T:Furion.FriendlyException.ErrorCodeTypeAttribute">
            <summary>
            错误代码类型特性
            </summary>
        </member>
        <member name="T:Furion.FriendlyException.IfExceptionAttribute">
            <summary>
            异常复写特性
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.IfExceptionAttribute.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.IfExceptionAttribute.#ctor(System.Object,System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="errorCode">错误编码</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:Furion.FriendlyException.IfExceptionAttribute.#ctor(System.Type)">
            <summary>
            捕获特定异常类型异常（用于全局异常捕获）
            </summary>
            <param name="exceptionType"></param>
        </member>
        <member name="P:Furion.FriendlyException.IfExceptionAttribute.ErrorCode">
            <summary>
            错误编码
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.IfExceptionAttribute.ExceptionType">
            <summary>
            异常类型
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.IfExceptionAttribute.ErrorMessage">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.IfExceptionAttribute.Args">
            <summary>
            格式化参数
            </summary>
        </member>
        <member name="T:Furion.FriendlyException.AppFriendlyException">
            <summary>
            自定义友好异常类
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.AppFriendlyException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.AppFriendlyException.#ctor(System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
            <param name="errorCode"></param>
        </member>
        <member name="M:Furion.FriendlyException.AppFriendlyException.#ctor(System.String,System.Object,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
            <param name="errorCode"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Furion.FriendlyException.AppFriendlyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Furion.FriendlyException.AppFriendlyException.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.AppFriendlyException.OriginErrorCode">
            <summary>
            错误码（没被复写过的 ErrorCode ）
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.AppFriendlyException.ErrorMessage">
            <summary>
            错误消息（支持 Object 对象）
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.AppFriendlyException.StatusCode">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.AppFriendlyException.ValidationException">
            <summary>
            是否是数据验证异常
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.AppFriendlyException.Data">
            <summary>
            额外数据
            </summary>
        </member>
        <member name="T:Furion.FriendlyException.AppFriendlyExceptionExtensions">
            <summary>
            异常拓展
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.AppFriendlyExceptionExtensions.StatusCode(Furion.FriendlyException.AppFriendlyException,System.Int32)">
            <summary>
            设置异常状态码
            </summary>
            <param name="exception"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.FriendlyException.AppFriendlyExceptionExtensions.WithData(Furion.FriendlyException.AppFriendlyException,System.Object)">
            <summary>
            设置额外数据
            </summary>
            <param name="exception"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.FriendlyException.FriendlyExceptionOptions">
            <summary>
            AddInject 友好异常配置选项
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.FriendlyExceptionOptions.GlobalEnabled">
            <summary>
            是否启用全局友好异常
            </summary>
        </member>
        <member name="T:Furion.FriendlyException.IGlobalExceptionHandler">
            <summary>
            全局异常处理
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.IGlobalExceptionHandler.OnExceptionAsync(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            异常拦截
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.FriendlyException.ExceptionMetadata">
            <summary>
            异常元数据
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.ExceptionMetadata.StatusCode">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.ExceptionMetadata.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.ExceptionMetadata.OriginErrorCode">
            <summary>
            错误码（没被复写过的 ErrorCode ）
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.ExceptionMetadata.Errors">
            <summary>
            错误对象（信息）
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.ExceptionMetadata.Data">
            <summary>
            额外数据
            </summary>
        </member>
        <member name="T:Furion.FriendlyException.MethodIfException">
            <summary>
            方法异常类
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.MethodIfException.ErrorMethod">
            <summary>
            出异常的方法
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.MethodIfException.IfExceptionAttributes">
            <summary>
            异常特性
            </summary>
        </member>
        <member name="T:Furion.FriendlyException.Oops">
            <summary>
            抛异常静态类
            </summary>
        </member>
        <member name="F:Furion.FriendlyException.Oops.ErrorMethods">
            <summary>
            方法错误异常特性
            </summary>
        </member>
        <member name="F:Furion.FriendlyException.Oops.ErrorCodeTypes">
            <summary>
            错误代码类型
            </summary>
        </member>
        <member name="F:Furion.FriendlyException.Oops.ErrorCodeMessages">
            <summary>
            错误消息字典
            </summary>
        </member>
        <member name="F:Furion.FriendlyException.Oops._friendlyExceptionSettings">
            <summary>
            友好异常设置
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.Oops.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.Oops.Bah(System.String,System.Object[])">
            <summary>
            抛出业务异常信息
            </summary>
            <param name="errorMessage">异常消息</param>
            <param name="args">String.Format 参数</param>
            <returns>异常实例</returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.Bah(System.Object,System.Object[])">
            <summary>
            抛出业务异常信息
            </summary>
            <param name="errorCode">错误码</param>
            <param name="args">String.Format 参数</param>
            <returns>异常实例</returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.Oh(System.String,System.Object[])">
            <summary>
            抛出字符串异常
            </summary>
            <param name="errorMessage">异常消息</param>
            <param name="args">String.Format 参数</param>
            <returns>异常实例</returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.Oh(System.String,System.Type,System.Object[])">
            <summary>
            抛出字符串异常
            </summary>
            <param name="errorMessage">异常消息</param>
            <param name="exceptionType">具体异常类型</param>
            <param name="args">String.Format 参数</param>
            <returns>异常实例</returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.Oh``1(System.String,System.Object[])">
            <summary>
            抛出字符串异常
            </summary>
            <typeparam name="TException">具体异常类型</typeparam>
            <param name="errorMessage">异常消息</param>
            <param name="args">String.Format 参数</param>
            <returns>异常实例</returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.Oh(System.Object,System.Object[])">
            <summary>
            抛出错误码异常
            </summary>
            <param name="errorCode">错误码</param>
            <param name="args">String.Format 参数</param>
            <returns>异常实例</returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.Oh(System.Object,System.Type,System.Object[])">
            <summary>
            抛出错误码异常
            </summary>
            <param name="errorCode">错误码</param>
            <param name="exceptionType">具体异常类型</param>
            <param name="args">String.Format 参数</param>
            <returns>异常实例</returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.Oh``1(System.Object,System.Object[])">
            <summary>
            抛出错误码异常
            </summary>
            <typeparam name="TException">具体异常类型</typeparam>
            <param name="errorCode">错误码</param>
            <param name="args">String.Format 参数</param>
            <returns>异常实例</returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.GetErrorCodeMessage(System.Object,System.Object[])">
            <summary>
            获取错误码消息
            </summary>
            <param name="errorCode"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.HandleEnumErrorCode(System.Object)">
            <summary>
            处理枚举类型错误码
            </summary>
            <param name="errorCode">错误码</param>
            <returns></returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.GetErrorCodeTypes">
            <summary>
            获取错误代码类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.GetErrorCodeMessages">
            <summary>
            获取所有错误消息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.FixErrorCodeSettingMessage(System.Object[])">
            <summary>
            处理异常配置数据
            </summary>
            <param name="errorCodes">错误消息配置对象</param>
            <remarks>
            方式：数组第一个元素为错误码，第二个参数为错误消息，剩下的参数为错误码格式化字符串
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.GetEndPointExceptionMethod">
            <summary>
            获取堆栈中顶部抛异常方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.GetErrorCodeItemInformation(System.Reflection.FieldInfo)">
            <summary>
            获取错误代码信息
            </summary>
            <param name="fieldInfo">字段对象</param>
            <returns>(object key, object value)</returns>
        </member>
        <member name="M:Furion.FriendlyException.Oops.MontageErrorMessage(System.String,System.String,System.Object[])">
            <summary>
            获取错误码字符串
            </summary>
            <param name="errorMessage"></param>
            <param name="errorCode"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.FriendlyException.ErrorCodeMessageSettingsOptions">
            <summary>
            异常配置选项，最优的方式是采用后期配置，也就是所有异常状态码先不设置（推荐）
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.ErrorCodeMessageSettingsOptions.Definitions">
            <summary>
            异常状态码配置列表
            </summary>
        </member>
        <member name="T:Furion.FriendlyException.FriendlyExceptionSettingsOptions">
            <summary>
            友好异常配置选项
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.FriendlyExceptionSettingsOptions.HideErrorCode">
            <summary>
            隐藏错误码
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.FriendlyExceptionSettingsOptions.DefaultErrorCode">
            <summary>
            默认错误码
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.FriendlyExceptionSettingsOptions.DefaultErrorMessage">
            <summary>
            默认错误消息
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.FriendlyExceptionSettingsOptions.ThrowBah">
            <summary>
            标记 Oops.Oh 为业务异常
            </summary>
            <remarks>也就是不会进入异常处理</remarks>
        </member>
        <member name="P:Furion.FriendlyException.FriendlyExceptionSettingsOptions.LogError">
            <summary>
            是否输出异常日志
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.FriendlyExceptionSettingsOptions.PostConfigure(Furion.FriendlyException.FriendlyExceptionSettingsOptions,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            选项后期配置
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Furion.FriendlyException.IErrorCodeTypeProvider">
            <summary>
            异常错误代码提供器
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.IErrorCodeTypeProvider.Definitions">
            <summary>
            错误代码定义类型
            </summary>
        </member>
        <member name="T:Furion.FriendlyException.BadPageResult">
            <summary>
            错误页面
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.BadPageResult.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.BadPageResult.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="statusCode">状态码</param>
        </member>
        <member name="P:Furion.FriendlyException.BadPageResult.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.BadPageResult.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.BadPageResult.Base64Icon">
            <summary>
            图标
            </summary>
            <remarks>必须是 base64 类型</remarks>
        </member>
        <member name="P:Furion.FriendlyException.BadPageResult.Code">
            <summary>
            错误代码
            </summary>
        </member>
        <member name="P:Furion.FriendlyException.BadPageResult.CodeLang">
            <summary>
            错误代码语言
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.BadPageResult.ExecuteResult(Microsoft.AspNetCore.Mvc.ActionContext)">
            <summary>
            重写返回结果
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Furion.FriendlyException.Retry">
            <summary>
            重试静态类
            </summary>
        </member>
        <member name="M:Furion.FriendlyException.Retry.Invoke(System.Action,System.Int32,System.Int32,System.Boolean,System.Type[])">
            <summary>
            重试有异常的方法，还可以指定特定异常
            </summary>
            <param name="action"></param>
            <param name="numRetries">重试次数</param>
            <param name="retryTimeout">重试间隔时间</param>
            <param name="finalThrow">是否最终抛异常</param>
            <param name="exceptionTypes">异常类型,可多个</param>
        </member>
        <member name="M:Furion.FriendlyException.Retry.InvokeAsync(System.Func{System.Threading.Tasks.Task},System.Int32,System.Int32,System.Boolean,System.Type[])">
            <summary>
            重试有异常的方法，还可以指定特定异常
            </summary>
            <param name="action"></param>
            <param name="numRetries">重试次数</param>
            <param name="retryTimeout">重试间隔时间</param>
            <param name="finalThrow">是否最终抛异常</param>
            <param name="exceptionTypes">异常类型,可多个</param>
        </member>
        <member name="T:Furion.InstantMessaging.MapHubAttribute">
            <summary>
            即时通信集线器配置特性
            </summary>
        </member>
        <member name="M:Furion.InstantMessaging.MapHubAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="pattern"></param>
        </member>
        <member name="P:Furion.InstantMessaging.MapHubAttribute.Pattern">
            <summary>
            配置终点路由地址
            </summary>
        </member>
        <member name="T:Furion.InstantMessaging.IM">
            <summary>
            即时通信静态类
            </summary>
        </member>
        <member name="M:Furion.InstantMessaging.IM.GetHub``1(System.IServiceProvider)">
            <summary>
            获取集线器实例
            </summary>
            <typeparam name="THub"></typeparam>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.InstantMessaging.IM.GetHub``2(System.IServiceProvider)">
            <summary>
            获取强类型集线器实例
            </summary>
            <typeparam name="THub"></typeparam>
            <typeparam name="TStronglyTyped"></typeparam>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.IPCChannel.CallContext`1">
            <summary>
            提供线程异步流共享数据上下文（尽量在项目需要该操作的类中使用 AsyncLocal 方式使用，而不是调用 CallContext
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
            AsyncLocal 遇到 await 关键字时采用拷贝方式创建新的执行上下文并流转
            在Task方法内部修改其值，但在任务结束后仍为初始值，这是一种“写时复制”行为，AsyncLocal内部做了两步操作：
              进行AsyncLocal实例的拷贝副本，但这是浅复制行为而非深复制
              在设置新的值之前完成复制操作
            获取当前线程 Id：Thread.CurrentThread.ManagedThreadId
            </remarks>
        </member>
        <member name="F:Furion.IPCChannel.CallContext`1.localValues">
            <summary>
            保存本地数据
            </summary>
            <remarks>这里存在内存溢出问题，因为该定义对象并没有任何释放内存的方式提供，所以尽可能的少使用</remarks>
        </member>
        <member name="M:Furion.IPCChannel.CallContext`1.SetLocalValue(System.String,`0)">
            <summary>
            设置值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Furion.IPCChannel.CallContext`1.GetLocalValue(System.String)">
            <summary>
            读取值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.IPCChannel.CallContext">
            <summary>
            提供线程异步流共享数据上下文（尽量在项目需要该操作的类中使用 AsyncLocal 方式使用，而不是调用 CallContext
            </summary>
            <remarks>
            AsyncLocal 遇到 await 关键字时采用拷贝方式创建新的执行上下文并流转
            在Task方法内部修改其值，但在任务结束后仍为初始值，这是一种“写时复制”行为，AsyncLocal内部做了两步操作：
              进行AsyncLocal实例的拷贝副本，但这是浅复制行为而非深复制
              在设置新的值之前完成复制操作
            获取当前线程 Id：Thread.CurrentThread.ManagedThreadId
            </remarks>
        </member>
        <member name="F:Furion.IPCChannel.CallContext.localValues">
            <summary>
            保存本地数据
            </summary>
            <remarks>这里存在内存溢出问题，因为该定义对象并没有任何释放内存的方式提供，所以尽可能的少使用</remarks>
        </member>
        <member name="M:Furion.IPCChannel.CallContext.SetLocalValue(System.String,System.Object)">
            <summary>
            设置值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Furion.IPCChannel.CallContext.GetLocalValue(System.String)">
            <summary>
            读取值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.IPCChannel.ChannelContext`2">
            <summary>
            进程管道内通信上下文
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="THandler"></typeparam>
            <remarks>后续将通过 MemoryMapperFile 共享内存实现 IPC 通信：https://docs.microsoft.com/zh-cn/dotnet/api/system.io.memorymappedfiles.memorymappedfile?view=net-5.0 </remarks>
        </member>
        <member name="F:Furion.IPCChannel.ChannelContext`2._unBoundedChannel">
            <summary>
            通过懒加载创建无限容量通道
            </summary>
        </member>
        <member name="F:Furion.IPCChannel.ChannelContext`2._boundedChannel">
            <summary>
            通过懒加载创建有限容量通道
            </summary>
            <remarks>默认容量为 1000</remarks>
        </member>
        <member name="P:Furion.IPCChannel.ChannelContext`2.UnBoundedChannel">
            <summary>
            无限容量通道
            </summary>
        </member>
        <member name="P:Furion.IPCChannel.ChannelContext`2.BoundedChannel">
            <summary>
            有限容量通道
            </summary>
        </member>
        <member name="M:Furion.IPCChannel.ChannelContext`2.#ctor">
            <summary>
            私有构造函数
            </summary>
        </member>
        <member name="M:Furion.IPCChannel.ChannelContext`2.StartReader(System.Threading.Channels.Channel{`0})">
            <summary>
            创建一个读取器
            </summary>
            <param name="channel"></param>
        </member>
        <member name="T:Furion.IPCChannel.ChannelHandler`1">
            <summary>
            进程管道内通信处理程序
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:Furion.IPCChannel.ChannelHandler`1.InvokeAsync(`0)">
            <summary>
            管道执行器
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.JsonSerialization.DateOnlyJsonConverter">
            <summary>
            DateTime 类型序列化（仅包含日志不含时间部分）
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.DateOnlyJsonConverter.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.DateOnlyJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="P:Furion.JsonSerialization.DateOnlyJsonConverter.Format">
            <summary>
            日期格式化格式
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.DateOnlyJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.DateOnlyJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.DateTime,System.Text.Json.JsonSerializerOptions)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:Furion.JsonSerialization.DateOnlyOffsetJsonConverter">
            <summary>
            DateTimeOffset 类型序列化（仅包含日志不含时间部分）
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.DateOnlyOffsetJsonConverter.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.DateOnlyOffsetJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:Furion.JsonSerialization.DateOnlyOffsetJsonConverter.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
            <param name="outputToLocalDateTime"></param>
        </member>
        <member name="P:Furion.JsonSerialization.DateOnlyOffsetJsonConverter.Format">
            <summary>
            时间格式化格式
            </summary>
        </member>
        <member name="P:Furion.JsonSerialization.DateOnlyOffsetJsonConverter.Localized">
            <summary>
            是否输出为为当地时间
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.DateOnlyOffsetJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.DateOnlyOffsetJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.DateTimeOffset,System.Text.Json.JsonSerializerOptions)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:Furion.JsonSerialization.DateTimeJsonConverter">
            <summary>
            DateTime 类型序列化
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.DateTimeJsonConverter.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.DateTimeJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="P:Furion.JsonSerialization.DateTimeJsonConverter.Format">
            <summary>
            时间格式化格式
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.DateTimeJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.DateTimeJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.DateTime,System.Text.Json.JsonSerializerOptions)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:Furion.JsonSerialization.DateTimeOffsetJsonConverter">
            <summary>
            DateTimeOffset 类型序列化
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.DateTimeOffsetJsonConverter.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.DateTimeOffsetJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:Furion.JsonSerialization.DateTimeOffsetJsonConverter.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
            <param name="outputToLocalDateTime"></param>
        </member>
        <member name="P:Furion.JsonSerialization.DateTimeOffsetJsonConverter.Format">
            <summary>
            时间格式化格式
            </summary>
        </member>
        <member name="P:Furion.JsonSerialization.DateTimeOffsetJsonConverter.Localized">
            <summary>
            是否输出为为当地时间
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.DateTimeOffsetJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.DateTimeOffsetJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.DateTimeOffset,System.Text.Json.JsonSerializerOptions)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:Furion.JsonSerialization.JSON">
            <summary>
            JSON 静态帮助类
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.JSON.GetJsonSerializer(System.IServiceProvider)">
            <summary>
            获取 JSON 序列化提供器
            </summary>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.JSON.Serialize(System.Object,System.Object,System.IServiceProvider)">
            <summary>
            序列化对象
            </summary>
            <param name="value"></param>
            <param name="jsonSerializerOptions"></param>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.JSON.Deserialize``1(System.String,System.Object,System.IServiceProvider)">
            <summary>
            反序列化字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="jsonSerializerOptions"></param>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.JSON.GetSerializerOptions``1(System.IServiceProvider)">
            <summary>
            获取 JSON 配置选项
            </summary>
            <typeparam name="TOptions"></typeparam>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.JsonSerialization.IJsonSerializerProvider">
            <summary>
            Json 序列化提供器
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.IJsonSerializerProvider.Serialize(System.Object,System.Object)">
            <summary>
            序列化对象
            </summary>
            <param name="value"></param>
            <param name="jsonSerializerOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.IJsonSerializerProvider.Deserialize``1(System.String,System.Object)">
            <summary>
            反序列化字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="jsonSerializerOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.IJsonSerializerProvider.GetSerializerOptions">
            <summary>
            返回读取全局配置的 JSON 选项
            </summary>
            <returns></returns>
        </member>
        <member name="T:Furion.JsonSerialization.SystemTextJsonSerializerProvider">
            <summary>
            System.Text.Json 序列化提供器（默认实现）
            </summary>
        </member>
        <member name="F:Furion.JsonSerialization.SystemTextJsonSerializerProvider._jsonOptions">
            <summary>
            获取 JSON 配置选项
            </summary>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonSerializerProvider.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Mvc.JsonOptions})">
            <summary>
            构造函数
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonSerializerProvider.Serialize(System.Object,System.Object)">
            <summary>
            序列化对象
            </summary>
            <param name="value"></param>
            <param name="jsonSerializerOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonSerializerProvider.Deserialize``1(System.String,System.Object)">
            <summary>
            反序列化字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="jsonSerializerOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.JsonSerialization.SystemTextJsonSerializerProvider.GetSerializerOptions">
            <summary>
            返回读取全局配置的 JSON 选项
            </summary>
            <returns></returns>
        </member>
        <member name="T:Furion.LinqBuilder.LinqExpression">
            <summary>
            EF Core Linq 拓展
            </summary>
        </member>
        <member name="M:Furion.LinqBuilder.LinqExpression.Create``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            创建 Linq/Lambda 表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.LinqExpression.Create``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            创建 Linq/Lambda 表达式，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.LinqExpression.And``1">
            <summary>
            创建 And 表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.LinqExpression.IndexAnd``1">
            <summary>
            创建 And 表达式，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.LinqExpression.Or``1">
            <summary>
            创建 Or 表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.LinqExpression.IndexOr``1">
            <summary>
            创建 Or 表达式，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <returns>新的表达式</returns>
        </member>
        <member name="T:Furion.LinqBuilder.ExpressionExtensions">
            <summary>
            表达式拓展类
            </summary>
        </member>
        <member name="M:Furion.LinqBuilder.ExpressionExtensions.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            组合两个表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式1</param>
            <param name="extendExpression">表达式2</param>
            <param name="mergeWay">组合方式</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.ExpressionExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            与操作合并两个表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式1</param>
            <param name="extendExpression">表达式2</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.ExpressionExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            与操作合并两个表达式，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式1</param>
            <param name="extendExpression">表达式2</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.ExpressionExtensions.AndIf``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件成立再与操作合并两个表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式1</param>
            <param name="condition">布尔条件</param>
            <param name="extendExpression">表达式2</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.ExpressionExtensions.AndIf``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            根据条件成立再与操作合并两个表达式，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式1</param>
            <param name="condition">布尔条件</param>
            <param name="extendExpression">表达式2</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.ExpressionExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            或操作合并两个表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式1</param>
            <param name="extendExpression">表达式2</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.ExpressionExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            或操作合并两个表达式，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式1</param>
            <param name="extendExpression">表达式2</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.ExpressionExtensions.OrIf``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件成立再或操作合并两个表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式1</param>
            <param name="condition">布尔条件</param>
            <param name="extendExpression">表达式2</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.ExpressionExtensions.OrIf``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            根据条件成立再或操作合并两个表达式，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式1</param>
            <param name="condition">布尔条件</param>
            <param name="extendExpression">表达式2</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.ExpressionExtensions.GetExpressionPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            获取Lambda表达式属性名，只限 u=>u.Property 表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="expression">表达式</param>
            <returns>属性名</returns>
        </member>
        <member name="M:Furion.LinqBuilder.ExpressionExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            是否是空集合
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <returns>是否为空集合</returns>
        </member>
        <member name="T:Furion.LinqBuilder.ParameterReplaceExpressionVisitor">
            <summary>
            处理 Lambda 参数不一致问题
            </summary>
        </member>
        <member name="F:Furion.LinqBuilder.ParameterReplaceExpressionVisitor.parameterExpressionSetter">
            <summary>
            参数表达式映射集合
            </summary>
        </member>
        <member name="M:Furion.LinqBuilder.ParameterReplaceExpressionVisitor.#ctor(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression})">
            <summary>
            构造函数
            </summary>
            <param name="parameterExpressionSetter">参数表达式映射集合</param>
        </member>
        <member name="M:Furion.LinqBuilder.ParameterReplaceExpressionVisitor.ReplaceParameters(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)">
            <summary>
            替换表达式参数
            </summary>
            <param name="parameterExpressionSetter">参数表达式映射集合</param>
            <param name="expression">表达式</param>
            <returns>新的表达式</returns>
        </member>
        <member name="M:Furion.LinqBuilder.ParameterReplaceExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            重写基类参数访问器
            </summary>
            <param name="parameterExpression"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.Localization.Penetrates">
            <summary>
            常量、公共方法配置类
            </summary>
        </member>
        <member name="M:Furion.Localization.Penetrates.SetRequestLocalization(Microsoft.AspNetCore.Builder.RequestLocalizationOptions,Furion.Localization.LocalizationSettingsOptions)">
            <summary>
            设置请求多语言对象
            </summary>
            <param name="requestLocalization"></param>
            <param name="localizationSettings"></param>
        </member>
        <member name="T:Furion.Localization.L">
            <summary>
            全局多语言静态类
            </summary>
        </member>
        <member name="P:Furion.Localization.L.Text">
            <summary>
            String 多语言
            </summary>
        </member>
        <member name="P:Furion.Localization.L.Html">
            <summary>
            Html 多语言
            </summary>
        </member>
        <member name="M:Furion.Localization.L.SetCulture(System.String)">
            <summary>
            设置多语言区域
            </summary>
            <param name="culture"></param>
        </member>
        <member name="M:Furion.Localization.L.GetSelectCulture">
            <summary>
            获取当前选择的语言
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.Localization.L.GetCultures">
            <summary>
            获取系统提供的语言列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.Localization.L.GetString``1(System.Linq.Expressions.Expression{System.Func{``0,System.String}})">
            <summary>
            根据实体类属性名获取对应的多语言配置
            </summary>
            <typeparam name="TResource">通常命名为 SharedResource </typeparam>
            <param name="propertyExpression">属性表达式</param>
            <returns></returns>
        </member>
        <member name="T:Furion.Localization.LocalizationSettingsOptions">
            <summary>
            多语言配置选项
            </summary>
        </member>
        <member name="P:Furion.Localization.LocalizationSettingsOptions.ResourcesPath">
            <summary>
            资源路径
            </summary>
        </member>
        <member name="P:Furion.Localization.LocalizationSettingsOptions.SupportedCultures">
            <summary>
            支持的语言列表
            </summary>
        </member>
        <member name="P:Furion.Localization.LocalizationSettingsOptions.DefaultCulture">
            <summary>
            默认的语言
            </summary>
        </member>
        <member name="P:Furion.Localization.LocalizationSettingsOptions.LanguageFilePrefix">
            <summary>
            资源文件名前缀
            </summary>
        </member>
        <member name="P:Furion.Localization.LocalizationSettingsOptions.AssemblyName">
            <summary>
            资源所在程序集名称
            </summary>
        </member>
        <member name="M:Furion.Localization.LocalizationSettingsOptions.PostConfigure(Furion.Localization.LocalizationSettingsOptions,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            选项后期配置
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Furion.Logging.Extensions.StringLoggingExtensions">
            <summary>
            字符串日志输出拓展
            </summary>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.SetArgs(System.String,System.Object[])">
            <summary>
            设置消息格式化参数
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.SetLevel(System.String,Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            设置日志级别
            </summary>
            <param name="message"></param>
            <param name="level"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.SetEventId(System.String,Microsoft.Extensions.Logging.EventId)">
            <summary>
            设置事件 Id
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.SetCategory``1(System.String)">
            <summary>
            设置日志分类
            </summary>
            <param name="message"></param>
            <typeparam name="TClass"></typeparam>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.SetCategory(System.String,System.String)">
            <summary>
            设置日志分类名
            </summary>
            <param name="message"></param>
            <param name="categoryName"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.SetException(System.String,System.Exception)">
            <summary>
            设置异常对象
            </summary>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.SetLoggerScoped(System.String,System.IServiceProvider)">
            <summary>
            设置日志服务作用域
            </summary>
            <param name="message"></param>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogInformation(System.String,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogInformation(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogInformation(System.String,System.Exception,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogInformation(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogInformation``1(System.String,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogInformation``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogInformation``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogInformation``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogWarning(System.String,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogWarning(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogWarning(System.String,System.Exception,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogWarning(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogWarning``1(System.String,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogWarning``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogWarning``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogWarning``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogError(System.String,System.Object[])">
            <summary>
            LogError
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogError(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogError
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogError(System.String,System.Exception,System.Object[])">
            <summary>
            LogError
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogError(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogError
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogError``1(System.String,System.Object[])">
            <summary>
            LogError
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogError``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogError
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogError``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogError
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogError``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogError
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogDebug(System.String,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogDebug(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogDebug(System.String,System.Exception,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogDebug(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogDebug``1(System.String,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogDebug``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogDebug``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogDebug``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogTrace(System.String,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogTrace(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogTrace(System.String,System.Exception,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogTrace(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogTrace``1(System.String,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogTrace``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogTrace``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogTrace``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogCritical(System.String,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogCritical(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogCritical(System.String,System.Exception,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogCritical(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogCritical``1(System.String,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogCritical``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogCritical``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Extensions.StringLoggingExtensions.LogCritical``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="T:Furion.Logging.DatabaseLogger">
            <summary>
            数据库日志记录器
            </summary>
            <remarks>https://docs.microsoft.com/zh-cn/dotnet/core/extensions/custom-logging-provider</remarks>
        </member>
        <member name="F:Furion.Logging.DatabaseLogger.ExcludesOfLogCategoryName">
            <summary>
            排除日志分类名
            </summary>
            <remarks>避免数据库日志死循环</remarks>
        </member>
        <member name="F:Furion.Logging.DatabaseLogger._logName">
            <summary>
            记录器类别名称
            </summary>
        </member>
        <member name="F:Furion.Logging.DatabaseLogger._databaseLoggerProvider">
            <summary>
            数据库记录器提供器
            </summary>
        </member>
        <member name="M:Furion.Logging.DatabaseLogger.#ctor(System.String,Furion.Logging.DatabaseLoggerProvider)">
            <summary>
            构造函数
            </summary>
            <param name="logName">记录器类别名称</param>
            <param name="databaseLoggerProvider">数据库记录器提供器</param>
        </member>
        <member name="P:Furion.Logging.DatabaseLogger.Context">
            <summary>
            日志上下文
            </summary>
        </member>
        <member name="M:Furion.Logging.DatabaseLogger.BeginScope``1(``0)">
            <summary>
            开始逻辑操作范围
            </summary>
            <typeparam name="TState">标识符类型参数</typeparam>
            <param name="state">要写入的项/对象</param>
            <returns><see cref="T:System.IDisposable"/></returns>
        </member>
        <member name="M:Furion.Logging.DatabaseLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            检查是否已启用给定日志级别
            </summary>
            <param name="logLevel">日志级别</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.Logging.DatabaseLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            写入日志项
            </summary>
            <typeparam name="TState">标识符类型参数</typeparam>
            <param name="logLevel">日志级别</param>
            <param name="eventId">事件 Id</param>
            <param name="state">要写入的项/对象</param>
            <param name="exception">异常对象</param>
            <param name="formatter">日志格式化器</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Furion.Logging.DatabaseLoggerOptions">
            <summary>
            数据库记录器配置选项
            </summary>
        </member>
        <member name="P:Furion.Logging.DatabaseLoggerOptions.WriteFilter">
            <summary>
            自定义日志筛选器
            </summary>
        </member>
        <member name="P:Furion.Logging.DatabaseLoggerOptions.MinimumLevel">
            <summary>
            最低日志记录级别
            </summary>
        </member>
        <member name="P:Furion.Logging.DatabaseLoggerOptions.HandleWriteError">
            <summary>
            自定义数据库日志写入错误程序
            </summary>
            <remarks>主要解决日志在写入过程出现异常问题</remarks>
            <example>
            options.HandleWriteError = (err) => {
                // do anything
            };
            </example>
        </member>
        <member name="T:Furion.Logging.DatabaseLoggerProvider">
            <summary>
            数据库日志记录器提供程序
            </summary>
            <remarks>https://docs.microsoft.com/zh-cn/dotnet/core/extensions/custom-logging-provider</remarks>
        </member>
        <member name="F:Furion.Logging.DatabaseLoggerProvider._databaseLoggers">
            <summary>
            存储多日志分类日志记录器
            </summary>
        </member>
        <member name="F:Furion.Logging.DatabaseLoggerProvider._logMessageQueue">
            <summary>
            日志消息队列（线程安全）
            </summary>
        </member>
        <member name="F:Furion.Logging.DatabaseLoggerProvider._serviceScope">
            <summary>
            数据库日志写入器作用域范围
            </summary>
        </member>
        <member name="F:Furion.Logging.DatabaseLoggerProvider._databaseLoggingWriter">
            <summary>
            数据库日志写入器
            </summary>
        </member>
        <member name="F:Furion.Logging.DatabaseLoggerProvider._processQueueTask">
            <summary>
            长时间运行的后台任务
            </summary>
            <remarks>实现不间断写入</remarks>
        </member>
        <member name="M:Furion.Logging.DatabaseLoggerProvider.#ctor(Furion.Logging.DatabaseLoggerOptions)">
            <summary>
            构造函数
            </summary>
            <param name="databaseLoggerOptions">数据库日志记录器配置选项</param>
        </member>
        <member name="P:Furion.Logging.DatabaseLoggerProvider.MinimumLevel">
            <summary>
            最低日志记录级别
            </summary>
        </member>
        <member name="P:Furion.Logging.DatabaseLoggerProvider.HandleWriteError">
            <summary>
            自定义数据库日志写入错误程序
            </summary>
            <remarks>主要解决日志在写入过程出现异常问题</remarks>
            <example>
            options.HandleWriteError = (err) => {
                // do anything
            };
            </example>
        </member>
        <member name="P:Furion.Logging.DatabaseLoggerProvider.LoggerOptions">
            <summary>
            数据库日志记录器配置选项
            </summary>
        </member>
        <member name="M:Furion.Logging.DatabaseLoggerProvider.CreateLogger(System.String)">
            <summary>
            创建数据库日志记录器
            </summary>
            <param name="categoryName">日志分类名</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILogger"/></returns>
        </member>
        <member name="M:Furion.Logging.DatabaseLoggerProvider.Dispose">
            <summary>
            释放非托管资源
            </summary>
            <remarks>控制日志消息队列</remarks>
        </member>
        <member name="M:Furion.Logging.DatabaseLoggerProvider.WriteToQueue(Furion.Logging.LogMessage)">
            <summary>
            将日志消息写入队列中等待后台任务出队写入数据库
            </summary>
            <param name="logMsg">结构化日志消息</param>
        </member>
        <member name="M:Furion.Logging.DatabaseLoggerProvider.SetServiceProvider(System.IServiceProvider,System.Type)">
            <summary>
            设置服务提供器
            </summary>
            <param name="serviceProvider"></param>
            <param name="databaseLoggingWriterType"></param>
        </member>
        <member name="M:Furion.Logging.DatabaseLoggerProvider.ProcessQueue">
            <summary>
            将日志消息写入数据库中
            </summary>
        </member>
        <member name="M:Furion.Logging.DatabaseLoggerProvider.ClearScopeContext(System.String)">
            <summary>
            清空日志上下文
            </summary>
            <param name="categoryName"></param>
        </member>
        <member name="T:Furion.Logging.DatabaseLoggerSettings">
            <summary>
            数据库日志记录器配置选项
            </summary>
        </member>
        <member name="P:Furion.Logging.DatabaseLoggerSettings.MinimumLevel">
            <summary>
            最低日志记录级别
            </summary>
        </member>
        <member name="T:Furion.Logging.DatabaseWriteError">
            <summary>
            数据库写入错误信息上下文
            </summary>
        </member>
        <member name="M:Furion.Logging.DatabaseWriteError.#ctor(System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="exception">异常对象</param>
        </member>
        <member name="P:Furion.Logging.DatabaseWriteError.Exception">
            <summary>
            引起数据库写入异常信息
            </summary>
        </member>
        <member name="T:Furion.Logging.IDatabaseLoggingWriter">
            <summary>
            数据库日志写入器
            </summary>
        </member>
        <member name="M:Furion.Logging.IDatabaseLoggingWriter.Write(Furion.Logging.LogMessage,System.Boolean)">
            <summary>
            写入数据库
            </summary>
            <param name="logMsg">结构化日志消息</param>
            <param name="flush">清除缓冲区</param>
        </member>
        <member name="T:Furion.Logging.FileLogger">
            <summary>
            文件日志记录器
            </summary>
            <remarks>https://docs.microsoft.com/zh-cn/dotnet/core/extensions/custom-logging-provider</remarks>
        </member>
        <member name="F:Furion.Logging.FileLogger._logName">
            <summary>
            记录器类别名称
            </summary>
        </member>
        <member name="F:Furion.Logging.FileLogger._fileLoggerProvider">
            <summary>
            文件记录器提供器
            </summary>
        </member>
        <member name="F:Furion.Logging.FileLogger.EXCEPTION_SEPARATOR">
            <summary>
            异常分隔符
            </summary>
        </member>
        <member name="M:Furion.Logging.FileLogger.#ctor(System.String,Furion.Logging.FileLoggerProvider)">
            <summary>
            构造函数
            </summary>
            <param name="logName">记录器类别名称</param>
            <param name="fileLoggerProvider">文件记录器提供器</param>
        </member>
        <member name="P:Furion.Logging.FileLogger.Context">
            <summary>
            日志上下文
            </summary>
        </member>
        <member name="M:Furion.Logging.FileLogger.BeginScope``1(``0)">
            <summary>
            开始逻辑操作范围
            </summary>
            <typeparam name="TState">标识符类型参数</typeparam>
            <param name="state">要写入的项/对象</param>
            <returns><see cref="T:System.IDisposable"/></returns>
        </member>
        <member name="M:Furion.Logging.FileLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            检查是否已启用给定日志级别
            </summary>
            <param name="logLevel">日志级别</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.Logging.FileLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            写入日志项
            </summary>
            <typeparam name="TState">标识符类型参数</typeparam>
            <param name="logLevel">日志级别</param>
            <param name="eventId">事件 Id</param>
            <param name="state">要写入的项/对象</param>
            <param name="exception">异常对象</param>
            <param name="formatter">日志格式化器</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Furion.Logging.FileLogger.PadLeftAlign(System.String)">
            <summary>
            将日志内容进行对齐
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.Logging.FileLoggerOptions">
            <summary>
            文件日志记录器配置选项
            </summary>
        </member>
        <member name="P:Furion.Logging.FileLoggerOptions.Append">
            <summary>
            追加到已存在日志文件或覆盖它们
            </summary>
        </member>
        <member name="P:Furion.Logging.FileLoggerOptions.FileSizeLimitBytes">
            <summary>
            控制每一个日志文件最大存储大小，默认无限制
            </summary>
            <remarks>如果指定了该值，那么日志文件大小超出了该配置就会创建的日志文件，新创建的日志文件命名规则：文件名+[递增序号].log</remarks>
        </member>
        <member name="P:Furion.Logging.FileLoggerOptions.MaxRollingFiles">
            <summary>
            控制最大创建的日志文件数量，默认无限制，配合 <see cref="P:Furion.Logging.FileLoggerOptions.FileSizeLimitBytes"/> 使用
            </summary>
            <remarks>如果指定了该值，那么超出该值将从最初日志文件中从头写入覆盖</remarks>
        </member>
        <member name="P:Furion.Logging.FileLoggerOptions.UseUtcTimestamp">
            <summary>
            是否使用 UTC 时间戳，默认 false
            </summary>
        </member>
        <member name="P:Furion.Logging.FileLoggerOptions.MessageFormat">
            <summary>
            自定义日志消息格式化程序
            </summary>
        </member>
        <member name="P:Furion.Logging.FileLoggerOptions.WriteFilter">
            <summary>
            自定义日志筛选器
            </summary>
        </member>
        <member name="P:Furion.Logging.FileLoggerOptions.MinimumLevel">
            <summary>
            最低日志记录级别
            </summary>
        </member>
        <member name="P:Furion.Logging.FileLoggerOptions.FileNameRule">
             <summary>
             自定义日志文件名格式化程序（规则）
             </summary>
             <example>
             options.FileNameRule = (fileName) => {
                 return String.Format(Path.GetFileNameWithoutExtension(fileName) + "_{0:yyyy}-{0:MM}-{0:dd}" + Path.GetExtension(fileName), DateTime.UtcNow);
            
                 // 或者每天创建一个文件
                 // return String.Format(fileName, DateTime.UtcNow);
             }
             </example>
        </member>
        <member name="P:Furion.Logging.FileLoggerOptions.HandleWriteError">
            <summary>
            自定义日志文件写入错误程序
            </summary>
            <remarks>主要解决日志在写入过程中文件被打开或其他应用程序占用的情况，一旦出现上述情况可创建备用日志文件继续写入</remarks>
            <example>
            options.HandleWriteError = (err) => {
                err.UseRollbackFileName(Path.GetFileNameWithoutExtension(err.CurrentFileName)+ "_alt" + Path.GetExtension(err.CurrentFileName));
            };
            </example>
        </member>
        <member name="T:Furion.Logging.FileLoggerProvider">
            <summary>
            文件日志记录器提供程序
            </summary>
            <remarks>https://docs.microsoft.com/zh-cn/dotnet/core/extensions/custom-logging-provider</remarks>
        </member>
        <member name="F:Furion.Logging.FileLoggerProvider._fileLoggers">
            <summary>
            存储多日志分类日志记录器
            </summary>
        </member>
        <member name="F:Furion.Logging.FileLoggerProvider._logMessageQueue">
            <summary>
            日志消息队列（线程安全）
            </summary>
        </member>
        <member name="F:Furion.Logging.FileLoggerProvider._fileLoggingWriter">
            <summary>
            文件日志写入器
            </summary>
        </member>
        <member name="F:Furion.Logging.FileLoggerProvider._processQueueTask">
            <summary>
            长时间运行的后台任务
            </summary>
            <remarks>实现不间断写入</remarks>
        </member>
        <member name="M:Furion.Logging.FileLoggerProvider.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="fileName">日志文件名</param>
        </member>
        <member name="M:Furion.Logging.FileLoggerProvider.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="fileName">日志文件名</param>
            <param name="append">追加到已存在日志文件或覆盖它们</param>
        </member>
        <member name="M:Furion.Logging.FileLoggerProvider.#ctor(System.String,Furion.Logging.FileLoggerOptions)">
            <summary>
            构造函数
            </summary>
            <param name="fileName">日志文件名</param>
            <param name="fileLoggerOptions">文件日志记录器配置选项</param>
        </member>
        <member name="P:Furion.Logging.FileLoggerProvider.MinimumLevel">
            <summary>
            最低日志记录级别
            </summary>
        </member>
        <member name="P:Furion.Logging.FileLoggerProvider.UseUtcTimestamp">
            <summary>
            是否使用 UTC 时间戳，默认 false
            </summary>
        </member>
        <member name="P:Furion.Logging.FileLoggerProvider.MessageFormat">
            <summary>
            自定义日志消息格式化程序
            </summary>
        </member>
        <member name="P:Furion.Logging.FileLoggerProvider.FileNameRule">
             <summary>
             自定义日志文件名格式化程序（规则）
             </summary>
             <example>
             options.FileNameRule = (fileName) => {
                 return String.Format(Path.GetFileNameWithoutExtension(fileName) + "_{0:yyyy}-{0:MM}-{0:dd}" + Path.GetExtension(fileName), DateTime.UtcNow);
            
                 // 或者每天创建一个文件
                 // return String.Format(fileName, DateTime.UtcNow);
             }
             </example>
        </member>
        <member name="P:Furion.Logging.FileLoggerProvider.HandleWriteError">
            <summary>
            自定义日志文件写入错误程序
            </summary>
            <remarks>主要解决日志在写入过程中文件被打开或其他应用程序占用的情况，一旦出现上述情况可创建备用日志文件继续写入</remarks>
            <example>
            options.HandleWriteError = (err) => {
                err.UseRollbackFileName(Path.GetFileNameWithoutExtension(err.CurrentFileName)+ "_alt" + Path.GetExtension(err.CurrentFileName));
            };
            </example>
        </member>
        <member name="F:Furion.Logging.FileLoggerProvider.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:Furion.Logging.FileLoggerProvider.LoggerOptions">
            <summary>
            文件日志记录器配置选项
            </summary>
        </member>
        <member name="P:Furion.Logging.FileLoggerProvider.Append">
            <summary>
            追加到已存在日志文件或覆盖它们
            </summary>
        </member>
        <member name="P:Furion.Logging.FileLoggerProvider.FileSizeLimitBytes">
            <summary>
            控制每一个日志文件最大存储大小，默认无限制
            </summary>
            <remarks>如果指定了该值，那么日志文件大小超出了该配置就会创建的日志文件，新创建的日志文件命名规则：文件名+[递增序号].log</remarks>
        </member>
        <member name="P:Furion.Logging.FileLoggerProvider.MaxRollingFiles">
            <summary>
            控制最大创建的日志文件数量，默认无限制，配合 <see cref="P:Furion.Logging.FileLoggerProvider.FileSizeLimitBytes"/> 使用
            </summary>
            <remarks>如果指定了该值，那么超出该值将从最初日志文件中从头写入覆盖</remarks>
        </member>
        <member name="M:Furion.Logging.FileLoggerProvider.CreateLogger(System.String)">
            <summary>
            创建文件日志记录器
            </summary>
            <param name="categoryName">日志分类名</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILogger"/></returns>
        </member>
        <member name="M:Furion.Logging.FileLoggerProvider.Dispose">
            <summary>
            释放非托管资源
            </summary>
            <remarks>控制日志消息队列</remarks>
        </member>
        <member name="M:Furion.Logging.FileLoggerProvider.WriteToQueue(Furion.Logging.LogMessage)">
            <summary>
            将日志消息写入队列中等待后台任务出队写入文件
            </summary>
            <param name="logMsg">日志消息</param>
        </member>
        <member name="M:Furion.Logging.FileLoggerProvider.ProcessQueue">
            <summary>
            将日志消息写入文件中
            </summary>
        </member>
        <member name="M:Furion.Logging.FileLoggerProvider.ClearScopeContext(System.String)">
            <summary>
            清空日志上下文
            </summary>
            <param name="categoryName"></param>
        </member>
        <member name="T:Furion.Logging.FileLoggerSettings">
            <summary>
            文件日志记录器配置选项
            </summary>
        </member>
        <member name="P:Furion.Logging.FileLoggerSettings.FileName">
            <summary>
            日志文件完整路径或文件名，推荐 .log 作为拓展名
            </summary>
        </member>
        <member name="P:Furion.Logging.FileLoggerSettings.Append">
            <summary>
            追加到已存在日志文件或覆盖它们
            </summary>
        </member>
        <member name="P:Furion.Logging.FileLoggerSettings.FileSizeLimitBytes">
            <summary>
            控制每一个日志文件最大存储大小，默认无限制
            </summary>
            <remarks>如果指定了该值，那么日志文件大小超出了该配置就会创建的日志文件，新创建的日志文件命名规则：文件名+[递增序号].log</remarks>
        </member>
        <member name="P:Furion.Logging.FileLoggerSettings.MaxRollingFiles">
            <summary>
            控制最大创建的日志文件数量，默认无限制，配合 <see cref="P:Furion.Logging.FileLoggerSettings.FileSizeLimitBytes"/> 使用
            </summary>
            <remarks>如果指定了该值，那么超出该值将从最初日志文件中从头写入覆盖</remarks>
        </member>
        <member name="P:Furion.Logging.FileLoggerSettings.MinimumLevel">
            <summary>
            最低日志记录级别
            </summary>
        </member>
        <member name="T:Furion.Logging.FileLoggingWriter">
            <summary>
            文件日志写入器
            </summary>
        </member>
        <member name="F:Furion.Logging.FileLoggingWriter._fileLoggerProvider">
            <summary>
            文件日志记录器提供程序
            </summary>
        </member>
        <member name="F:Furion.Logging.FileLoggingWriter._fileName">
            <summary>
            日志文件名
            </summary>
        </member>
        <member name="F:Furion.Logging.FileLoggingWriter._fileStream">
            <summary>
            文件流
            </summary>
        </member>
        <member name="F:Furion.Logging.FileLoggingWriter._textWriter">
            <summary>
            文本写入器
            </summary>
        </member>
        <member name="F:Furion.Logging.FileLoggingWriter.__LastBaseFileName">
            <summary>
            缓存上次返回的基本日志文件名，避免重复解析
            </summary>
        </member>
        <member name="M:Furion.Logging.FileLoggingWriter.#ctor(Furion.Logging.FileLoggerProvider)">
            <summary>
            构造函数
            </summary>
            <param name="fileLoggerProvider">文件日志记录器提供程序</param>
        </member>
        <member name="M:Furion.Logging.FileLoggingWriter.GetBaseFileName">
            <summary>
            获取日志基础文件名
            </summary>
            <returns>日志文件名</returns>
        </member>
        <member name="M:Furion.Logging.FileLoggingWriter.GetCurrentFileName">
            <summary>
            解析当前写入日志的文件名
            </summary>
        </member>
        <member name="M:Furion.Logging.FileLoggingWriter.GetNextFileName">
            <summary>
            获取下一个匹配的日志文件名
            </summary>
            <remarks>只有配置了 <see cref="P:Furion.Logging.FileLoggerOptions.FileSizeLimitBytes"/> 或 <see cref="P:Furion.Logging.FileLoggerOptions.FileNameRule"/> 或 <see cref="P:Furion.Logging.FileLoggerOptions.MaxRollingFiles"/> 有效</remarks>
            <returns>新的文件名</returns>
        </member>
        <member name="M:Furion.Logging.FileLoggingWriter.OpenFile(System.Boolean)">
            <summary>
            打开文件
            </summary>
            <param name="append"></param>
        </member>
        <member name="M:Furion.Logging.FileLoggingWriter.CheckForNewLogFile">
            <summary>
            判断是否需要创建新文件写入
            </summary>
        </member>
        <member name="M:Furion.Logging.FileLoggingWriter.Write(Furion.Logging.LogMessage,System.Boolean)">
            <summary>
            写入文件
            </summary>
            <param name="logMsg">日志消息</param>
            <param name="flush"></param>
        </member>
        <member name="M:Furion.Logging.FileLoggingWriter.Close">
            <summary>
            关闭文本写入器并释放
            </summary>
        </member>
        <member name="T:Furion.Logging.FileWriteError">
            <summary>
            文件写入错误信息上下文
            </summary>
        </member>
        <member name="M:Furion.Logging.FileWriteError.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="currentFileName">当前日志文件名</param>
            <param name="exception">异常对象</param>
        </member>
        <member name="P:Furion.Logging.FileWriteError.CurrentFileName">
            <summary>
            当前日志文件名
            </summary>
        </member>
        <member name="P:Furion.Logging.FileWriteError.Exception">
            <summary>
            引起文件写入异常信息
            </summary>
        </member>
        <member name="P:Furion.Logging.FileWriteError.RollbackFileName">
            <summary>
            备用日志文件名
            </summary>
        </member>
        <member name="M:Furion.Logging.FileWriteError.UseRollbackFileName(System.String)">
            <summary>
            配置日志文件写入错误后新的备用日志文件名
            </summary>
            <param name="rollbackFileName">备用日志文件名</param>
        </member>
        <member name="T:Furion.Logging.LogContext">
            <summary>
            日志上下文
            </summary>
        </member>
        <member name="M:Furion.Logging.LogContext.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.Logging.LogContext.Properties">
            <summary>
            日志上下文数据
            </summary>
        </member>
        <member name="M:Furion.Logging.LogContext.Set(System.Object,System.Object)">
            <summary>
            设置上下文数据
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.LogContext.SetRange(System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            批量设置上下文数据
            </summary>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.LogContext.Get(System.Object)">
            <summary>
            获取上下文数据
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.LogContext.Get``1(System.Object)">
            <summary>
            获取上下文数据
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="T:Furion.Logging.LogMessage">
            <summary>
            日志结构化消息
            </summary>
        </member>
        <member name="M:Furion.Logging.LogMessage.#ctor(System.String,Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String,System.Exception,Furion.Logging.LogContext)">
            <summary>
            构造函数
            </summary>
            <param name="logName">记录器类别名称</param>
            <param name="logLevel">日志级别</param>
            <param name="eventId">事件 Id</param>
            <param name="message">日志消息</param>
            <param name="exception">异常对象</param>
            <param name="context">日志上下文</param>
        </member>
        <member name="F:Furion.Logging.LogMessage.LogName">
            <summary>
            记录器类别名称
            </summary>
        </member>
        <member name="F:Furion.Logging.LogMessage.LogLevel">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="F:Furion.Logging.LogMessage.EventId">
            <summary>
            事件 Id
            </summary>
        </member>
        <member name="P:Furion.Logging.LogMessage.Message">
            <summary>
            日志消息
            </summary>
        </member>
        <member name="F:Furion.Logging.LogMessage.Exception">
            <summary>
            异常对象
            </summary>
        </member>
        <member name="F:Furion.Logging.LogMessage.Context">
            <summary>
            日志上下文
            </summary>
        </member>
        <member name="M:Furion.Logging.LogMessage.ToString">
            <summary>
            重写默认输出
            </summary>
            <returns></returns>
        </member>
        <member name="T:Furion.Logging.LogMessageExtensions">
            <summary>
            <see cref="T:Furion.Logging.LogMessage"/> 拓展
            </summary>
        </member>
        <member name="M:Furion.Logging.LogMessageExtensions.Write(Furion.Logging.LogMessage,System.Action{System.Text.Json.Utf8JsonWriter})">
            <summary>
            高性能写入日志模板
            </summary>
            <param name="_"><see cref="T:Furion.Logging.LogMessage"/></param>
            <param name="writeAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.LogMessageExtensions.WriteArray(Furion.Logging.LogMessage,System.Action{System.Text.Json.Utf8JsonWriter})">
            <summary>
            高性能写入数组日志模板
            </summary>
            <param name="logMsg"><see cref="T:Furion.Logging.LogMessage"/></param>
            <param name="writeAction"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.Logging.Penetrates">
            <summary>
            常量、公共方法配置类
            </summary>
        </member>
        <member name="M:Furion.Logging.Penetrates.CreateFromConfiguration(System.Func{System.String},System.Action{Furion.Logging.FileLoggerOptions})">
            <summary>
            从配置文件中加载配置并创建文件日志记录器提供程序
            </summary>
            <param name="configuraionKey">获取配置文件对应的 Key</param>
            <param name="configure">文件日志记录器配置选项委托</param>
            <returns><see cref="T:Furion.Logging.FileLoggerProvider"/></returns>
        </member>
        <member name="M:Furion.Logging.Penetrates.CreateFromConfiguration(System.Func{System.String},System.Action{Furion.Logging.DatabaseLoggerOptions})">
            <summary>
            从配置文件中加载配置并创建数据库日志记录器提供程序
            </summary>
            <param name="configuraionKey">获取配置文件对应的 Key</param>
            <param name="configure">数据库日志记录器配置选项委托</param>
            <returns><see cref="T:Furion.Logging.DatabaseLoggerProvider"/></returns>
        </member>
        <member name="M:Furion.Logging.Penetrates.GetLogLevelString(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            获取日志级别短名称
            </summary>
            <param name="logLevel">日志级别</param>
            <returns></returns>
        </member>
        <member name="T:Furion.Logging.StringLoggingPart">
            <summary>
            构建字符串日志部分类
            </summary>
            <summary>
            构建字符串日志部分类
            </summary>
            <summary>
            构建字符串日志部分类
            </summary>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.Default">
            <summary>
            静态缺省日志部件
            </summary>
        </member>
        <member name="P:Furion.Logging.StringLoggingPart.Message">
            <summary>
            日志内容
            </summary>
        </member>
        <member name="P:Furion.Logging.StringLoggingPart.Level">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="P:Furion.Logging.StringLoggingPart.Args">
            <summary>
            消息格式化参数
            </summary>
        </member>
        <member name="P:Furion.Logging.StringLoggingPart.EventId">
            <summary>
            事件 Id
            </summary>
        </member>
        <member name="P:Furion.Logging.StringLoggingPart.CategoryType">
            <summary>
            日志分类类型（从依赖注入中解析）
            </summary>
        </member>
        <member name="P:Furion.Logging.StringLoggingPart.CategoryName">
            <summary>
            日志分类名（总是创建新的实例）
            </summary>
        </member>
        <member name="P:Furion.Logging.StringLoggingPart.Exception">
            <summary>
            异常对象
            </summary>
        </member>
        <member name="P:Furion.Logging.StringLoggingPart.LoggerScoped">
            <summary>
            日志对象所在作用域
            </summary>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.LogInformation">
            <summary>
            Information
            </summary>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.LogWarning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.LogError">
            <summary>
            Error
            </summary>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.LogDebug">
            <summary>
            Debug
            </summary>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.LogTrace">
            <summary>
            Trace
            </summary>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.LogCritical">
            <summary>
            Critical
            </summary>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.Log">
            <summary>
            写入日志
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.CreateDisposeLoggerFactory">
            <summary>
            创建待释放的日志工厂
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.SetMessage(System.String)">
            <summary>
            设置消息
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.SetLevel(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            设置日志级别
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.SetArgs(System.Object[])">
            <summary>
            设置消息格式化参数
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.SetEventId(Microsoft.Extensions.Logging.EventId)">
            <summary>
            设置事件 Id
            </summary>
            <param name="eventId"></param>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.SetCategory``1">
            <summary>
            设置日志分类
            </summary>
            <typeparam name="TClass"></typeparam>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.SetCategory(System.String)">
            <summary>
            设置日志分类名
            </summary>
            <param name="categoryName"></param>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.SetException(System.Exception)">
            <summary>
            设置异常对象
            </summary>
        </member>
        <member name="M:Furion.Logging.StringLoggingPart.SetLoggerScoped(System.IServiceProvider)">
            <summary>
            设置日志服务作用域
            </summary>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.Logging.Log">
            <summary>
            全局日志静态类
            </summary>
        </member>
        <member name="M:Furion.Logging.Log.Default">
            <summary>
            手动构建方式
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.Log.CreateLogger(System.String,Microsoft.Extensions.Logging.ILoggerProvider)">
            <summary>
            创建日志记录器
            </summary>
            <param name="categoryName"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.Log.CreateLoggerFactory(System.Action{Microsoft.Extensions.Logging.ILoggingBuilder})">
            <summary>
            创建日志工厂
            </summary>
            <param name="configure">日志构建器</param>
            <remarks><see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> 实现了 <see cref="T:System.IDisposable"/> 接口，注意使用 `using` 控制</remarks>
            <returns></returns>
        </member>
        <member name="M:Furion.Logging.Log.Information(System.String,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Information(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Information(System.String,System.Exception,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Information(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Information``1(System.String,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Information``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Information``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Information``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Warning(System.String,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Warning(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Warning(System.String,System.Exception,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Warning(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Warning``1(System.String,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Warning``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Warning``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Warning``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Error(System.String,System.Object[])">
            <summary>
            LogError
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Error(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogError
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Error(System.String,System.Exception,System.Object[])">
            <summary>
            LogError
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Error(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogError
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Error``1(System.String,System.Object[])">
            <summary>
            LogError
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Error``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogError
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Error``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogError
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Error``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogError
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Debug(System.String,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Debug(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Debug(System.String,System.Exception,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Debug(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Debug``1(System.String,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Debug``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Debug``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Debug``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Trace(System.String,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Trace(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Trace(System.String,System.Exception,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Trace(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Trace``1(System.String,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Trace``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Trace``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Trace``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Critical(System.String,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Critical(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Critical(System.String,System.Exception,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Critical(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Critical``1(System.String,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Critical``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Critical``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Furion.Logging.Log.Critical``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="T:Furion.Logging.LoggingMonitorMethod">
            <summary>
            LoggingMonitor 方法配置
            </summary>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorMethod.FullName">
            <summary>
            方法名称
            </summary>
            <remarks>完全限定名</remarks>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorMethod.WithReturnValue">
            <summary>
            是否记录返回值
            </summary>
            <remarks>bool 类型，默认输出</remarks>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorMethod.ReturnValueThreshold">
            <summary>
            设置返回值阈值
            </summary>
            <remarks>配置返回值字符串阈值，超过这个阈值将截断，默认全量输出</remarks>
        </member>
        <member name="T:Furion.Logging.LoggingMonitorSettings">
            <summary>
            日志监视器配置
            </summary>
            <remarks>默认配置节点：Logging:Monitor，支持自定义</remarks>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorSettings.GlobalEnabled">
            <summary>
            全局启用
            </summary>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorSettings.IncludeOfMethods">
            <summary>
            配置包含拦截的方法名列表（完全限定名格式：程序集名称.类名.方法名），注意无需添加参数签名
            </summary>
            <remarks>结合 <seealso cref="P:Furion.Logging.LoggingMonitorSettings.GlobalEnabled"/> 使用，当 <see cref="P:Furion.Logging.LoggingMonitorSettings.GlobalEnabled"/> 为 false 时有效，</remarks>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorSettings.ExcludeOfMethods">
            <summary>
            配置排除拦截的方法名列表（完全限定名格式：程序集名称.类名.方法名），注意无需添加参数签名
            </summary>
            <remarks>结合 <seealso cref="P:Furion.Logging.LoggingMonitorSettings.GlobalEnabled"/> 使用，当 <see cref="P:Furion.Logging.LoggingMonitorSettings.GlobalEnabled"/> 为 true 时有效，</remarks>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorSettings.MethodsSettings">
            <summary>
            配置方法更多信息
            </summary>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorSettings.BahLogLevel">
            <summary>
            业务日志消息级别
            </summary>
            <remarks>控制 Oops.Oh 或 Oops.Bah 日志记录位置，默认写入 <see cref="F:Microsoft.Extensions.Logging.LogLevel.Information"/></remarks>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorSettings.WithReturnValue">
            <summary>
            是否记录返回值
            </summary>
            <remarks>bool 类型，默认输出</remarks>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorSettings.ReturnValueThreshold">
            <summary>
            设置返回值阈值
            </summary>
            <remarks>配置返回值字符串阈值，超过这个阈值将截断，默认全量输出</remarks>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorSettings.IsMvcFilterRegister">
            <summary>
            是否 Mvc Filter 方式注册
            </summary>
            <remarks>解决旧版本兼容问题</remarks>
        </member>
        <member name="P:Furion.Logging.LoggingMonitorSettings.Configure">
            <summary>
            添加日志更多配置
            </summary>
        </member>
        <member name="M:Furion.Logging.LoggingMonitorSettings.ConfigureLogger(System.Action{Microsoft.Extensions.Logging.ILogger,Furion.Logging.LogContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext})">
            <summary>
            配置日志更多功能
            </summary>
            <param name="configure"></param>
        </member>
        <member name="T:Furion.Options.FailureMessageAttribute">
            <summary>
            选项校验失败消息特性
            </summary>
        </member>
        <member name="M:Furion.Options.FailureMessageAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="text">文本内容</param>
        </member>
        <member name="P:Furion.Options.FailureMessageAttribute.Text">
            <summary>
            文本内容
            </summary>
        </member>
        <member name="T:Furion.Options.OptionsBuilderAttribute">
            <summary>
            选项构建器特性
            </summary>
        </member>
        <member name="M:Furion.Options.OptionsBuilderAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Options.OptionsBuilderAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="sectionKey">配置节点</param>
        </member>
        <member name="P:Furion.Options.OptionsBuilderAttribute.SectionKey">
            <summary>
            配置节点
            </summary>
        </member>
        <member name="P:Furion.Options.OptionsBuilderAttribute.ErrorOnUnknownConfiguration">
            <summary>
            未知配置节点抛异常
            </summary>
        </member>
        <member name="P:Furion.Options.OptionsBuilderAttribute.BindNonPublicProperties">
            <summary>
            绑定非公开属性
            </summary>
        </member>
        <member name="P:Furion.Options.OptionsBuilderAttribute.ValidateDataAnnotations">
            <summary>
            启用验证特性支持
            </summary>
        </member>
        <member name="P:Furion.Options.OptionsBuilderAttribute.ValidateOptionsTypes">
            <summary>
            验证选项类型
            </summary>
        </member>
        <member name="T:Furion.Options.OptionsBuilderMethodMapAttribute">
            <summary>
            选项构建器方法映射特性
            </summary>
        </member>
        <member name="M:Furion.Options.OptionsBuilderMethodMapAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="methodName">映射方法名</param>
            <param name="voidReturn">无返回值</param>
        </member>
        <member name="P:Furion.Options.OptionsBuilderMethodMapAttribute.MethodName">
            <summary>
            方法名称
            </summary>
        </member>
        <member name="P:Furion.Options.OptionsBuilderMethodMapAttribute.VoidReturn">
            <summary>
            有无返回值
            </summary>
        </member>
        <member name="T:Furion.Options.Constants">
            <summary>
            Options 模块常量
            </summary>
        </member>
        <member name="F:Furion.Options.Constants.OptionsTypeSuffix">
            <summary>
            Options 类型后缀
            </summary>
            <remarks>主要用于匹配配置节点，自动去掉该后缀</remarks>
        </member>
        <member name="T:Furion.Options.IConfigureOptionsBuilder`1">
            <summary>
            选项配置依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
        </member>
        <member name="M:Furion.Options.IConfigureOptionsBuilder`1.Configure(`0)">
            <summary>
            选项配置
            </summary>
            <param name="options">选项实例</param>
        </member>
        <member name="T:Furion.Options.IConfigureOptionsBuilder`2">
            <summary>
            选项配置依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep">依赖服务</typeparam>
        </member>
        <member name="M:Furion.Options.IConfigureOptionsBuilder`2.Configure(`0,`1)">
            <summary>
            选项配置
            </summary>
            <param name="options">选项实例</param>
            <param name="dep">依赖服务</param>
        </member>
        <member name="T:Furion.Options.IConfigureOptionsBuilder`3">
            <summary>
            选项配置依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep1">依赖服务</typeparam>
            <typeparam name="TDep2">依赖服务</typeparam>
        </member>
        <member name="M:Furion.Options.IConfigureOptionsBuilder`3.Configure(`0,`1,`2)">
            <summary>
            选项配置
            </summary>
            <param name="options">选项实例</param>
            <param name="dep1">依赖服务</param>
            <param name="dep2">依赖服务</param>
        </member>
        <member name="T:Furion.Options.IConfigureOptionsBuilder`4">
            <summary>
            选项配置依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep1">依赖服务</typeparam>
            <typeparam name="TDep2">依赖服务</typeparam>
            <typeparam name="TDep3">依赖服务</typeparam>
        </member>
        <member name="M:Furion.Options.IConfigureOptionsBuilder`4.Configure(`0,`1,`2,`3)">
            <summary>
            选项配置
            </summary>
            <param name="options">选项实例</param>
            <param name="dep1">依赖服务</param>
            <param name="dep2">依赖服务</param>
            <param name="dep3">依赖服务</param>
        </member>
        <member name="T:Furion.Options.IConfigureOptionsBuilder`5">
            <summary>
            选项配置依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep1">依赖服务</typeparam>
            <typeparam name="TDep2">依赖服务</typeparam>
            <typeparam name="TDep3">依赖服务</typeparam>
            <typeparam name="TDep4">依赖服务</typeparam>
        </member>
        <member name="M:Furion.Options.IConfigureOptionsBuilder`5.Configure(`0,`1,`2,`3,`4)">
            <summary>
            选项配置
            </summary>
            <param name="options">选项实例</param>
            <param name="dep1">依赖服务</param>
            <param name="dep2">依赖服务</param>
            <param name="dep3">依赖服务</param>
            <param name="dep4">依赖服务</param>
        </member>
        <member name="T:Furion.Options.IConfigureOptionsBuilder`6">
            <summary>
            选项配置依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep1">依赖服务</typeparam>
            <typeparam name="TDep2">依赖服务</typeparam>
            <typeparam name="TDep3">依赖服务</typeparam>
            <typeparam name="TDep4">依赖服务</typeparam>
            <typeparam name="TDep5">依赖服务</typeparam>
        </member>
        <member name="M:Furion.Options.IConfigureOptionsBuilder`6.Configure(`0,`1,`2,`3,`4,`5)">
            <summary>
            选项配置
            </summary>
            <param name="options">选项实例</param>
            <param name="dep1">依赖服务</param>
            <param name="dep2">依赖服务</param>
            <param name="dep3">依赖服务</param>
            <param name="dep4">依赖服务</param>
            <param name="dep5">依赖服务</param>
        </member>
        <member name="T:Furion.Options.IOptionsBuilderDependency`1">
            <summary>
            选项构建器依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
        </member>
        <member name="T:Furion.Options.IPostConfigureOptionsBuilder`1">
            <summary>
            选项后期配置依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
        </member>
        <member name="M:Furion.Options.IPostConfigureOptionsBuilder`1.PostConfigure(`0)">
            <summary>
            选项后期配置
            </summary>
            <param name="options">选项实例</param>
        </member>
        <member name="T:Furion.Options.IPostConfigureOptionsBuilder`2">
            <summary>
            选项后期配置依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep">依赖服务</typeparam>
        </member>
        <member name="M:Furion.Options.IPostConfigureOptionsBuilder`2.PostConfigure(`0,`1)">
            <summary>
            选项后期配置
            </summary>
            <param name="options">选项实例</param>
            <param name="dep">依赖服务</param>
        </member>
        <member name="T:Furion.Options.IPostConfigureOptionsBuilder`3">
            <summary>
            选项后期配置依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep1">依赖服务</typeparam>
            <typeparam name="TDep2">依赖服务</typeparam>
        </member>
        <member name="M:Furion.Options.IPostConfigureOptionsBuilder`3.PostConfigure(`0,`1,`2)">
            <summary>
            选项后期配置
            </summary>
            <param name="options">选项实例</param>
            <param name="dep1">依赖服务</param>
            <param name="dep2">依赖服务</param>
        </member>
        <member name="T:Furion.Options.IPostConfigureOptionsBuilder`4">
            <summary>
            选项后期配置依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep1">依赖服务</typeparam>
            <typeparam name="TDep2">依赖服务</typeparam>
            <typeparam name="TDep3">依赖服务</typeparam>
        </member>
        <member name="M:Furion.Options.IPostConfigureOptionsBuilder`4.PostConfigure(`0,`1,`2,`3)">
            <summary>
            选项后期配置
            </summary>
            <param name="options">选项实例</param>
            <param name="dep1">依赖服务</param>
            <param name="dep2">依赖服务</param>
            <param name="dep3">依赖服务</param>
        </member>
        <member name="T:Furion.Options.IPostConfigureOptionsBuilder`5">
            <summary>
            选项后期配置依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep1">依赖服务</typeparam>
            <typeparam name="TDep2">依赖服务</typeparam>
            <typeparam name="TDep3">依赖服务</typeparam>
            <typeparam name="TDep4">依赖服务</typeparam>
        </member>
        <member name="M:Furion.Options.IPostConfigureOptionsBuilder`5.PostConfigure(`0,`1,`2,`3,`4)">
            <summary>
            选项后期配置
            </summary>
            <param name="options">选项实例</param>
            <param name="dep1">依赖服务</param>
            <param name="dep2">依赖服务</param>
            <param name="dep3">依赖服务</param>
            <param name="dep4">依赖服务</param>
        </member>
        <member name="T:Furion.Options.IPostConfigureOptionsBuilder`6">
            <summary>
            选项后期配置依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep1">依赖服务</typeparam>
            <typeparam name="TDep2">依赖服务</typeparam>
            <typeparam name="TDep3">依赖服务</typeparam>
            <typeparam name="TDep4">依赖服务</typeparam>
            <typeparam name="TDep5">依赖服务</typeparam>
        </member>
        <member name="M:Furion.Options.IPostConfigureOptionsBuilder`6.PostConfigure(`0,`1,`2,`3,`4,`5)">
            <summary>
            选项后期配置
            </summary>
            <param name="options">选项实例</param>
            <param name="dep1">依赖服务</param>
            <param name="dep2">依赖服务</param>
            <param name="dep3">依赖服务</param>
            <param name="dep4">依赖服务</param>
            <param name="dep5">依赖服务</param>
        </member>
        <member name="T:Furion.Options.IValidateOptionsBuilder`1">
            <summary>
            选项验证依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
        </member>
        <member name="M:Furion.Options.IValidateOptionsBuilder`1.Validate(`0)">
            <summary>
            复杂验证
            </summary>
            <param name="options">选项实例</param>
        </member>
        <member name="T:Furion.Options.IValidateOptionsBuilder`2">
            <summary>
            选项验证依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep">依赖服务</typeparam>
        </member>
        <member name="M:Furion.Options.IValidateOptionsBuilder`2.Validate(`0,`1)">
            <summary>
            复杂验证
            </summary>
            <param name="options">选项实例</param>
            <param name="dep">依赖服务</param>
        </member>
        <member name="T:Furion.Options.IValidateOptionsBuilder`3">
            <summary>
            选项验证依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep1">依赖服务</typeparam>
            <typeparam name="TDep2">依赖服务</typeparam>
        </member>
        <member name="M:Furion.Options.IValidateOptionsBuilder`3.Validate(`0,`1,`2)">
            <summary>
            复杂验证
            </summary>
            <param name="options">选项实例</param>
            <param name="dep1">依赖服务</param>
            <param name="dep2">依赖服务</param>
        </member>
        <member name="T:Furion.Options.IValidateOptionsBuilder`4">
            <summary>
            选项验证依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep1">依赖服务</typeparam>
            <typeparam name="TDep2">依赖服务</typeparam>
            <typeparam name="TDep3">依赖服务</typeparam>
        </member>
        <member name="M:Furion.Options.IValidateOptionsBuilder`4.Validate(`0,`1,`2,`3)">
            <summary>
            复杂验证
            </summary>
            <param name="options">选项实例</param>
            <param name="dep1">依赖服务</param>
            <param name="dep2">依赖服务</param>
            <param name="dep3">依赖服务</param>
        </member>
        <member name="T:Furion.Options.IValidateOptionsBuilder`5">
            <summary>
            选项验证依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep1">依赖服务</typeparam>
            <typeparam name="TDep2">依赖服务</typeparam>
            <typeparam name="TDep3">依赖服务</typeparam>
            <typeparam name="TDep4">依赖服务</typeparam>
        </member>
        <member name="M:Furion.Options.IValidateOptionsBuilder`5.Validate(`0,`1,`2,`3,`4)">
            <summary>
            复杂验证
            </summary>
            <param name="options">选项实例</param>
            <param name="dep1">依赖服务</param>
            <param name="dep2">依赖服务</param>
            <param name="dep3">依赖服务</param>
            <param name="dep4">依赖服务</param>
        </member>
        <member name="T:Furion.Options.IValidateOptionsBuilder`6">
            <summary>
            选项验证依赖接口
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <typeparam name="TDep1">依赖服务</typeparam>
            <typeparam name="TDep2">依赖服务</typeparam>
            <typeparam name="TDep3">依赖服务</typeparam>
            <typeparam name="TDep4">依赖服务</typeparam>
            <typeparam name="TDep5">依赖服务</typeparam>
        </member>
        <member name="M:Furion.Options.IValidateOptionsBuilder`6.Validate(`0,`1,`2,`3,`4,`5)">
            <summary>
            复杂验证
            </summary>
            <param name="options">选项实例</param>
            <param name="dep1">依赖服务</param>
            <param name="dep2">依赖服务</param>
            <param name="dep3">依赖服务</param>
            <param name="dep4">依赖服务</param>
            <param name="dep5">依赖服务</param>
        </member>
        <member name="T:Furion.Reflection.Extensions.MethodInfoExtensions">
            <summary>
            Method Info 拓展
            </summary>
        </member>
        <member name="M:Furion.Reflection.Extensions.MethodInfoExtensions.GetActualCustomAttributes(System.Reflection.MethodInfo,System.Object)">
            <summary>
            获取真实方法的特性集合
            </summary>
            <param name="method"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Extensions.MethodInfoExtensions.GetActualCustomAttributes(System.Reflection.MethodInfo,System.Object,System.Boolean)">
            <summary>
            获取真实方法的特性集合
            </summary>
            <param name="method"></param>
            <param name="target"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Extensions.MethodInfoExtensions.GetActualCustomAttributes(System.Reflection.MethodInfo,System.Object,System.Type)">
            <summary>
            获取真实方法的特性集合
            </summary>
            <param name="method"></param>
            <param name="target"></param>
            <param name="attributeType"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Extensions.MethodInfoExtensions.GetActualCustomAttributes(System.Reflection.MethodInfo,System.Object,System.Type,System.Boolean)">
            <summary>
            获取真实方法的特性集合
            </summary>
            <param name="method"></param>
            <param name="target"></param>
            <param name="attributeType"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Extensions.MethodInfoExtensions.GetActualCustomAttributes``1(System.Reflection.MethodInfo,System.Object)">
            <summary>
            获取真实方法的特性集合
            </summary>
            <param name="method"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Extensions.MethodInfoExtensions.GetActualCustomAttributes``1(System.Reflection.MethodInfo,System.Object,System.Boolean)">
            <summary>
            获取真实方法的特性集合
            </summary>
            <param name="method"></param>
            <param name="target"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Extensions.MethodInfoExtensions.GetActualCustomAttribute(System.Reflection.MethodInfo,System.Object,System.Type)">
            <summary>
            获取真实方法的特性
            </summary>
            <param name="method"></param>
            <param name="target"></param>
            <param name="attributeType"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Extensions.MethodInfoExtensions.GetActualCustomAttribute(System.Reflection.MethodInfo,System.Object,System.Type,System.Boolean)">
            <summary>
            获取真实方法的特性
            </summary>
            <param name="method"></param>
            <param name="target"></param>
            <param name="attributeType"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Extensions.MethodInfoExtensions.GetActualCustomAttribute``1(System.Reflection.MethodInfo,System.Object)">
            <summary>
            获取真实方法的特性
            </summary>
            <param name="method"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Extensions.MethodInfoExtensions.GetActualCustomAttribute``1(System.Reflection.MethodInfo,System.Object,System.Boolean)">
            <summary>
            获取真实方法的特性
            </summary>
            <param name="method"></param>
            <param name="target"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Extensions.MethodInfoExtensions.GetActualMethodInfo(System.Reflection.MethodInfo,System.Object)">
            <summary>
            获取实际方法对象
            </summary>
            <param name="method"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.Reflection.MethodParameterInfo">
            <summary>
            方法参数信息
            </summary>
        </member>
        <member name="P:Furion.Reflection.MethodParameterInfo.Parameter">
            <summary>
            参数
            </summary>
        </member>
        <member name="P:Furion.Reflection.MethodParameterInfo.Name">
            <summary>
            参数名
            </summary>
        </member>
        <member name="P:Furion.Reflection.MethodParameterInfo.Value">
            <summary>
            参数值
            </summary>
        </member>
        <member name="T:Furion.Reflection.AspectDispatchProxy">
            <summary>
            异步代理分发类
            </summary>
        </member>
        <member name="M:Furion.Reflection.AspectDispatchProxy.Create``2">
            <summary>
            创建代理
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProxy"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.AspectDispatchProxy.Invoke(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            执行同步代理
            </summary>
            <param name="method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.AspectDispatchProxy.InvokeAsync(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            执行异步代理
            </summary>
            <param name="method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.AspectDispatchProxy.InvokeAsyncT``1(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            执行异步返回 Task{T} 代理
            </summary>
            <typeparam name="T"></typeparam>
            <param name="method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.Reflection.AspectDispatchProxyGenerator">
            <summary>
            异步分发代理生成器
            </summary>
        </member>
        <member name="T:Furion.Reflection.DispatchProxyHandler">
            <summary>
            代理分发处理
            </summary>
        </member>
        <member name="M:Furion.Reflection.DispatchProxyHandler.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Reflection.DispatchProxyHandler.InvokeHandle(System.Object[])">
            <summary>
            同步处理
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.DispatchProxyHandler.InvokeAsyncHandle(System.Object[])">
            <summary>
            异步处理
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.DispatchProxyHandler.InvokeAsyncHandleT``1(System.Object[])">
            <summary>
            异步带返回值处理
            </summary>
            <typeparam name="T"></typeparam>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.Reflection.IDispatchProxy">
            <summary>
            代理拦截依赖接口
            </summary>
        </member>
        <member name="P:Furion.Reflection.IDispatchProxy.Target">
            <summary>
            实例
            </summary>
        </member>
        <member name="P:Furion.Reflection.IDispatchProxy.Services">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="T:Furion.Reflection.IGlobalDispatchProxy">
            <summary>
            全局代理拦截接口
            </summary>
        </member>
        <member name="T:Furion.Reflection.Reflect">
            <summary>
            内部反射静态类
            </summary>
        </member>
        <member name="M:Furion.Reflection.Reflect.GetEntryAssembly">
            <summary>
            获取入口程序集
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Reflect.GetAssembly(System.String)">
            <summary>
            根据程序集名称获取运行时程序集
            </summary>
            <param name="assemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Reflect.LoadAssembly(System.String)">
            <summary>
            根据路径加载程序集
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Reflect.LoadAssembly(System.IO.MemoryStream)">
            <summary>
            通过流加载程序集
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Reflect.GetType(System.String,System.String)">
            <summary>
            根据程序集名称、类型完整限定名获取运行时类型
            </summary>
            <param name="assemblyName"></param>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Reflect.GetType(System.Reflection.Assembly,System.String)">
            <summary>
            根据程序集和类型完全限定名获取运行时类型
            </summary>
            <param name="assembly"></param>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Reflect.GetType(System.IO.MemoryStream,System.String)">
            <summary>
            根据程序集和类型完全限定名获取运行时类型
            </summary>
            <param name="assembly"></param>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Reflect.GetAssemblyName(System.Reflection.Assembly)">
            <summary>
            获取程序集名称
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Reflect.GetAssemblyName(System.Type)">
            <summary>
            获取程序集名称
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Reflect.GetAssemblyName(System.Reflection.TypeInfo)">
            <summary>
            获取程序集名称
            </summary>
            <param name="typeInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Reflection.Reflect.GetStringType(System.String)">
            <summary>
            加载程序集类型，支持格式：程序集;网站类型命名空间
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.RemoteRequest.ClientAttribute">
            <summary>
            配置请求客户端
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.ClientAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Furion.RemoteRequest.ClientAttribute.Name">
            <summary>
            客户端名称
            </summary>
        </member>
        <member name="T:Furion.RemoteRequest.HeadersAttribute">
            <summary>
            配置请求报文头
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.HeadersAttribute.#ctor(System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Furion.RemoteRequest.HeadersAttribute.#ctor">
            <summary>
            构造函数
            </summary>
            <remarks>用于将参数添加到请求报文头中，如 Token </remarks>
        </member>
        <member name="M:Furion.RemoteRequest.HeadersAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <remarks>用于将参数添加到请求报文头中，如 Token </remarks>
            <param name="alias">别名</param>
        </member>
        <member name="P:Furion.RemoteRequest.HeadersAttribute.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HeadersAttribute.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:Furion.RemoteRequest.DeleteAttribute">
            <summary>
            HttpDelete 请求
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.DeleteAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.DeleteAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="requestUrl"></param>
        </member>
        <member name="T:Furion.RemoteRequest.GetAttribute">
            <summary>
            HttpGet 请求
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.GetAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.GetAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="requestUrl"></param>
        </member>
        <member name="T:Furion.RemoteRequest.HeadAttribute">
            <summary>
            HttpHead 请求
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.HeadAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.HeadAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="requestUrl"></param>
        </member>
        <member name="T:Furion.RemoteRequest.HttpMethodBaseAttribute">
            <summary>
            请求方法基类
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.HttpMethodBaseAttribute.#ctor(System.Net.Http.HttpMethod)">
            <summary>
            构造函数
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:Furion.RemoteRequest.HttpMethodBaseAttribute.#ctor(System.String,System.Net.Http.HttpMethod)">
            <summary>
            构造函数
            </summary>
            <param name="requestUrl"></param>
            <param name="method"></param>
        </member>
        <member name="P:Furion.RemoteRequest.HttpMethodBaseAttribute.RequestUrl">
            <summary>
            请求地址
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpMethodBaseAttribute.Method">
            <summary>
            请求谓词
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpMethodBaseAttribute.WithGZip">
            <summary>
            支持 GZip 压缩
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpMethodBaseAttribute.ContentType">
            <summary>
            内容类型
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpMethodBaseAttribute.Encoding">
            <summary>
            内容编码
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpMethodBaseAttribute.WithEncodeUrl">
            <summary>
            是否对 Url 进行 Uri.EscapeDataString
            </summary>
        </member>
        <member name="T:Furion.RemoteRequest.PatchAttribute">
            <summary>
            HttpPatch 请求
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.PatchAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.PatchAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="requestUrl"></param>
        </member>
        <member name="T:Furion.RemoteRequest.PostAttribute">
            <summary>
            HttpPost 请求
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.PostAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.PostAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="requestUrl"></param>
        </member>
        <member name="T:Furion.RemoteRequest.PutAttribute">
            <summary>
            HttpPut 请求
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.PutAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.PutAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="requestUrl"></param>
        </member>
        <member name="T:Furion.RemoteRequest.InterceptorAttribute">
            <summary>
            远程请求参数拦截器
            </summary>
            <remarks>如果贴在静态方法中，则为全局拦截</remarks>
        </member>
        <member name="M:Furion.RemoteRequest.InterceptorAttribute.#ctor(Furion.RemoteRequest.InterceptorTypes)">
            <summary>
            构造函数
            </summary>
            <param name="type"></param>
        </member>
        <member name="P:Furion.RemoteRequest.InterceptorAttribute.Type">
            <summary>
            拦截类型
            </summary>
        </member>
        <member name="T:Furion.RemoteRequest.JsonSerializationAttribute">
            <summary>
            JSON 序列化提供器
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.JsonSerializationAttribute.#ctor(System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="providerType"></param>
        </member>
        <member name="P:Furion.RemoteRequest.JsonSerializationAttribute.ProviderType">
            <summary>
            提供器类型
            </summary>
        </member>
        <member name="T:Furion.RemoteRequest.JsonSerializerOptionsAttribute">
            <summary>
            配置序列化选项
            </summary>
        </member>
        <member name="T:Furion.RemoteRequest.BodyAttribute">
            <summary>
            配置Body参数
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.BodyAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.BodyAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="contentType"></param>
        </member>
        <member name="M:Furion.RemoteRequest.BodyAttribute.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="contentType"></param>
            <param name="encoding"></param>
        </member>
        <member name="P:Furion.RemoteRequest.BodyAttribute.ContentType">
            <summary>
            内容类型
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.BodyAttribute.Encoding">
            <summary>
            内容编码
            </summary>
        </member>
        <member name="T:Furion.RemoteRequest.ParameterBaseAttribute">
            <summary>
            代理参数基类特性
            </summary>
        </member>
        <member name="T:Furion.RemoteRequest.QueryStringAttribute">
            <summary>
            配置查询参数
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.QueryStringAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.QueryStringAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="alias"></param>
        </member>
        <member name="P:Furion.RemoteRequest.QueryStringAttribute.Alias">
            <summary>
            参数别名
            </summary>
        </member>
        <member name="T:Furion.RemoteRequest.RetryPolicyAttribute">
            <summary>
            配置请求失败重试策略
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.RetryPolicyAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="numRetries"></param>
            <param name="retryTimeout">每次延迟时间（毫秒）</param>
        </member>
        <member name="P:Furion.RemoteRequest.RetryPolicyAttribute.NumRetries">
            <summary>
            重试次数
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.RetryPolicyAttribute.RetryTimeout">
            <summary>
            每次延迟时间（毫秒）
            </summary>
        </member>
        <member name="T:Furion.RemoteRequest.TimeoutAttribute">
            <summary>
            配置客户端请求超时时间
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.TimeoutAttribute.#ctor(System.Int64)">
            <summary>
            构造函数
            </summary>
            <param name="seconds">默认 100 秒</param>
        </member>
        <member name="P:Furion.RemoteRequest.TimeoutAttribute.Seconds">
            <summary>
            超时时间（秒）
            </summary>
        </member>
        <member name="T:Furion.RemoteRequest.InterceptorTypes">
            <summary>
            拦截类型
            </summary>
        </member>
        <member name="F:Furion.RemoteRequest.InterceptorTypes.Initiate">
            <summary>
            创建 HttpClient 拦截
            </summary>
        </member>
        <member name="F:Furion.RemoteRequest.InterceptorTypes.Client">
            <summary>
            HttpClient 拦截
            </summary>
        </member>
        <member name="F:Furion.RemoteRequest.InterceptorTypes.Request">
            <summary>
            HttpRequestMessage 拦截
            </summary>
        </member>
        <member name="F:Furion.RemoteRequest.InterceptorTypes.Response">
            <summary>
            HttpResponseMessage 拦截
            </summary>
        </member>
        <member name="F:Furion.RemoteRequest.InterceptorTypes.Exception">
            <summary>
            异常拦截
            </summary>
        </member>
        <member name="T:Furion.RemoteRequest.HttpRequestFaildedEventArgs">
            <summary>
            远程请求失败事件类
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestFaildedEventArgs.#ctor(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="request"></param>
            <param name="response"></param>
            <param name="exception"></param>
        </member>
        <member name="P:Furion.RemoteRequest.HttpRequestFaildedEventArgs.Request">
            <summary>
            请求对象
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpRequestFaildedEventArgs.Response">
            <summary>
            响应对象
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpRequestFaildedEventArgs.Exception">
            <summary>
            异常对象
            </summary>
        </member>
        <member name="T:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions">
            <summary>
            远程请求字符串拓展
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.SetTemplates(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            设置 URL 模板
            </summary>
            <param name="requestUrl"></param>
            <param name="templates"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.SetTemplates(System.String,System.Object)">
            <summary>
            设置 URL 模板
            </summary>
            <param name="requestUrl"></param>
            <param name="templates"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.SetHttpMethod(System.String,System.Net.Http.HttpMethod)">
            <summary>
            设置请求方法
            </summary>
            <param name="requestUrl"></param>
            <param name="httpMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.SetHeaders(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            设置请求报文头
            </summary>
            <param name="requestUrl"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.SetHeaders(System.String,System.Object)">
            <summary>
            设置请求报文头
            </summary>
            <param name="requestUrl"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.SetQueries(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            设置 URL 参数
            </summary>
            <param name="requestUrl"></param>
            <param name="queries"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.SetQueries(System.String,System.Object)">
            <summary>
            设置 URL 参数
            </summary>
            <param name="requestUrl"></param>
            <param name="queries"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.SetClient(System.String,System.String)">
            <summary>
            设置客户端分类名
            </summary>
            <param name="requestUrl"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.SetClient(System.String,System.Func{System.Net.Http.HttpClient})">
            <summary>
            设置客户端订阅者
            </summary>
            <param name="requestUrl"></param>
            <param name="clientProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.SetBody(System.String,System.Object,System.String,System.Text.Encoding)">
            <summary>
            设置 Body 内容
            </summary>
            <param name="requestUrl"></param>
            <param name="body"></param>
            <param name="contentType"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.SetContentType(System.String,System.String)">
            <summary>
            设置内容类型
            </summary>
            <param name="requestUrl"></param>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.SetContentEncoding(System.String,System.Text.Encoding)">
            <summary>
            设置内容编码
            </summary>
            <param name="requestUrl"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.SetFiles(System.String,Furion.RemoteRequest.HttpFile[])">
            <summary>
            设置文件
            </summary>
            <param name="requestUrl"></param>
            <param name="files"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.SetClientTimeout(System.String,System.Int64)">
            <summary>
            设置超时时间（秒）
            </summary>
            <param name="requestUrl"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.SetJsonSerialization``1(System.String,System.Object)">
            <summary>
            设置 JSON 序列化提供器
            </summary>
            <typeparam name="TJsonSerializationProvider"></typeparam>
            <param name="requestUrl"></param>
            <param name="jsonSerializerOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.SetJsonSerialization(System.String,System.Type,System.Object)">
            <summary>
            设置 JSON 序列化提供器
            </summary>
            <param name="requestUrl"></param>
            <param name="providerType"></param>
            <param name="jsonSerializerOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.SetValidationState(System.String,System.Boolean,System.Boolean)">
            <summary>
            是否启用验证状态
            </summary>
            <param name="requestUrl"></param>
            <param name="enabled"></param>
            <param name="includeNull"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.SetRequestScoped(System.String,System.IServiceProvider)">
            <summary>
            设置请求作用域
            </summary>
            <param name="requestUrl"></param>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.OnRequesting(System.String,System.Action{System.Net.Http.HttpClient,System.Net.Http.HttpRequestMessage})">
            <summary>
            构建请求对象拦截器
            </summary>
            <param name="requestUrl"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.OnClientCreating(System.String,System.Action{System.Net.Http.HttpClient})">
            <summary>
            创建客户端对象拦截器
            </summary>
            <param name="requestUrl"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.OnResponsing(System.String,System.Action{System.Net.Http.HttpClient,System.Net.Http.HttpResponseMessage})">
            <summary>
            请求成功拦截器
            </summary>
            <param name="requestUrl"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.OnException(System.String,System.Action{System.Net.Http.HttpClient,System.Net.Http.HttpResponseMessage,System.String})">
            <summary>
            请求异常拦截器
            </summary>
            <param name="requestUrl"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.SetRetryPolicy(System.String,System.Int32,System.Int32)">
            <summary>
            配置重试策略
            </summary>
            <param name="requestUrl"></param>
            <param name="numRetries"></param>
            <param name="retryTimeout">每次延迟时间（毫秒）</param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.WithGZip(System.String,System.Boolean)">
            <summary>
            启用 Gzip 压缩反压缩支持
            </summary>
            <param name="requestUrl"></param>
            <param name="supportGZip"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.WithEncodeUrl(System.String,System.Boolean)">
            <summary>
            启用对 Url 进行 Uri.EscapeDataString
            </summary>
            <param name="requestUrl"></param>
            <param name="encodeUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.GetAsAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            发送 GET 请求返回 T 对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="requestUrl"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.GetAsStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            发送 GET 请求返回 Stream
            </summary>
            <param name="requestUrl"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.GetAsStringAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            发送 GET 请求返回 String
            </summary>
            <param name="requestUrl"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.GetAsByteArrayAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            发送 GET 请求返回 ByteArray
            </summary>
            <param name="requestUrl"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            发送 GET 请求
            </summary>
            <param name="requestUrl"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.PostAsAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            发送 POST 请求返回 T 对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="requestUrl"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.PostAsStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            发送 POST 请求返回 Stream
            </summary>
            <param name="requestUrl"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.PostAsStringAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            发送 POST 请求返回 String
            </summary>
            <param name="requestUrl"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.PostAsByteArrayAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            发送 POST 请求返回 ByteArray
            </summary>
            <param name="requestUrl"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.PostAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            发送 POST 请求
            </summary>
            <param name="requestUrl"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.PutAsAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            发送 PUT 请求返回 T 对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="requestUrl"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.PutAsStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            发送 PUT 请求返回 Stream
            </summary>
            <param name="requestUrl"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.PutAsStringAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            发送 PUT 请求返回 String
            </summary>
            <param name="requestUrl"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.PutAsByteArrayAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            发送 PUT 请求返回 ByteArray
            </summary>
            <param name="requestUrl"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.PutAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            发送 PUT 请求
            </summary>
            <param name="requestUrl"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.DeleteAsAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            发送 DELETE 请求返回 T 对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="requestUrl"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.DeleteAsStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            发送 DELETE 请求返回 Stream
            </summary>
            <param name="requestUrl"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.DeleteAsStringAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            发送 DELETE 请求返回 String
            </summary>
            <param name="requestUrl"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.DeleteAsByteArrayAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            发送 DELETE 请求返回 ByteArray
            </summary>
            <param name="requestUrl"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            发送 DELETE 请求
            </summary>
            <param name="requestUrl"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.PatchAsAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            发送 PATCH 请求返回 T 对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="requestUrl"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.PatchAsStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            发送 PATCH 请求返回 Stream
            </summary>
            <param name="requestUrl"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.PatchAsStringAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            发送 PATCH 请求返回 String
            </summary>
            <param name="requestUrl"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.PatchAsByteArrayAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            发送 PATCH 请求返回 ByteArray
            </summary>
            <param name="requestUrl"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.PatchAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            发送 PATCH 请求
            </summary>
            <param name="requestUrl"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.HeadAsAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            发送 HEAD 请求返回 T 对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="requestUrl"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.HeadAsStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            发送 HEAD 请求返回 Stream
            </summary>
            <param name="requestUrl"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.HeadAsStringAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            发送 HEAD 请求返回 String
            </summary>
            <param name="requestUrl"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.HeadAsByteArrayAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            发送 HEAD 请求返回 ByteArray
            </summary>
            <param name="requestUrl"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.HeadAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            发送 HEAD 请求
            </summary>
            <param name="requestUrl"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.SendAsAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            发送请求返回 T 对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="requestUrl"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.SendAsStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            发送请求返回 Stream
            </summary>
            <param name="requestUrl"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.SendAsStringAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            发送请求返回 String
            </summary>
            <param name="requestUrl"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.SendAsByteArrayAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            发送请求返回 ByteArray
            </summary>
            <param name="requestUrl"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.Extensions.RemoteRequestStringExtensions.SendAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            发送请求
            </summary>
            <param name="requestUrl"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.RemoteRequest.Http">
            <summary>
            远程请求静态类
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.Http.GetHttpProxy``1(System.IServiceProvider)">
            <summary>
            获取远程请求代理
            </summary>
            <param name="serviceProvider"></param>
            <returns>IHttpDispatchProxy</returns>
        </member>
        <member name="T:Furion.RemoteRequest.HttpFile">
            <summary>
            远程请求文件类
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.HttpFile.Create(System.String,System.Byte[],System.String)">
            <summary>
            创建 HttpFile 类
            </summary>
            <param name="name"></param>
            <param name="bytes"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpFile.CreateMultiple(System.String,System.ValueTuple{System.Byte[],System.String}[])">
            <summary>
            添加多个文件
            </summary>
            <param name="name"></param>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="P:Furion.RemoteRequest.HttpFile.Name">
            <summary>
            表单名
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpFile.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpFile.Bytes">
            <summary>
            文件字节数组
            </summary>
        </member>
        <member name="T:Furion.RemoteRequest.HttpRequestPart">
            <summary>
            Http 请求对象组装部件
            </summary>
            <summary>
            HttpClient 对象组装部件
            </summary>
            <summary>
            HttpClient 对象组装部件
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.Default">
            <summary>
            静态缺省请求部件
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpRequestPart.RequestUrl">
            <summary>
            请求地址
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpRequestPart.Templates">
            <summary>
            Url 地址模板
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpRequestPart.Method">
            <summary>
            请求方式
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpRequestPart.Headers">
            <summary>
            请求报文头
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpRequestPart.Queries">
            <summary>
            查询参数
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpRequestPart.ClientName">
            <summary>
            客户端名称
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpRequestPart.ClientProvider">
            <summary>
            客户端提供者
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpRequestPart.Body">
            <summary>
            请求报文 Body 参数
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpRequestPart.ContentType">
            <summary>
            请求报文 Body 内容类型
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpRequestPart.ContentEncoding">
            <summary>
            内容编码
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpRequestPart.Files">
            <summary>
            上传文件
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpRequestPart.Timeout">
            <summary>
            超时时间（秒），默认 100 秒
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpRequestPart.JsonSerializerProvider">
            <summary>
            JSON 序列化提供器
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpRequestPart.JsonSerializerOptions">
            <summary>
            JSON 序列化配置选项
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpRequestPart.ValidationState">
            <summary>
            是否启用模型验证
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpRequestPart.RequestInterceptors">
            <summary>
            构建请求对象拦截器
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpRequestPart.HttpClientInterceptors">
            <summary>
            创建客户端对象拦截器
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpRequestPart.ResponseInterceptors">
            <summary>
            请求成功拦截器
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpRequestPart.ExceptionInterceptors">
            <summary>
            请求异常拦截器
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpRequestPart.RequestScoped">
            <summary>
            设置请求作用域
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpRequestPart.RetryPolicy">
            <summary>
            设置重试策略
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpRequestPart.SupportGZip">
            <summary>
            支持 GZip 压缩/反压缩
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpRequestPart.EncodeUrl">
            <summary>
            是否对 Url 进行 Uri.EscapeDataString
            </summary>
        </member>
        <member name="E:Furion.RemoteRequest.HttpRequestPart.OnRequestFailded">
            <summary>
            请求失败事件
            </summary>
        </member>
        <member name="F:Furion.RemoteRequest.HttpRequestPart.MiniProfilerCategory">
            <summary>
            MiniProfiler 分类名
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.GetAsAsync``1(System.Threading.CancellationToken)">
            <summary>
            发送 GET 请求返回 T 对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.GetAsStreamAsync(System.Threading.CancellationToken)">
            <summary>
            发送 GET 请求返回 Stream
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.GetAsStringAsync(System.Threading.CancellationToken)">
            <summary>
            发送 GET 请求返回 String
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.GetAsByteArrayAsync(System.Threading.CancellationToken)">
            <summary>
            发送 GET 请求返回 ByteArray
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.GetAsync(System.Threading.CancellationToken)">
            <summary>
            发送 GET 请求
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.PostAsAsync``1(System.Threading.CancellationToken)">
            <summary>
            发送 POST 请求返回 T 对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.PostAsStreamAsync(System.Threading.CancellationToken)">
            <summary>
            发送 POST 请求返回 Stream
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.PostAsStringAsync(System.Threading.CancellationToken)">
            <summary>
            发送 POST 请求返回 String
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.PostAsByteArrayAsync(System.Threading.CancellationToken)">
            <summary>
            发送 POST 请求返回 ByteArray
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.PostAsync(System.Threading.CancellationToken)">
            <summary>
            发送 POST 请求
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.PutAsAsync``1(System.Threading.CancellationToken)">
            <summary>
            发送 PUT 请求返回 T 对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.PutAsStreamAsync(System.Threading.CancellationToken)">
            <summary>
            发送 PUT 请求返回 Stream
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.PutAsStringAsync(System.Threading.CancellationToken)">
            <summary>
            发送 PUT 请求返回 String
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.PutAsByteArrayAsync(System.Threading.CancellationToken)">
            <summary>
            发送 PUT 请求返回 ByteArray
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.PutAsync(System.Threading.CancellationToken)">
            <summary>
            发送 PUT 请求
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.DeleteAsAsync``1(System.Threading.CancellationToken)">
            <summary>
            发送 DELETE 请求返回 T 对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.DeleteAsStreamAsync(System.Threading.CancellationToken)">
            <summary>
            发送 DELETE 请求返回 Stream
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.DeleteAsStringAsync(System.Threading.CancellationToken)">
            <summary>
            发送 DELETE 请求返回 String
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.DeleteAsByteArrayAsync(System.Threading.CancellationToken)">
            <summary>
            发送 DELETE 请求返回 ByteArray
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.DeleteAsync(System.Threading.CancellationToken)">
            <summary>
            发送 DELETE 请求
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.PatchAsAsync``1(System.Threading.CancellationToken)">
            <summary>
            发送 PATCH 请求返回 T 对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.PatchAsStreamAsync(System.Threading.CancellationToken)">
            <summary>
            发送 PATCH 请求返回 Stream
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.PatchAsStringAsync(System.Threading.CancellationToken)">
            <summary>
            发送 Patch 请求返回 String
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.PatchAsByteArrayAsync(System.Threading.CancellationToken)">
            <summary>
            发送 Patch 请求返回 ByteArray
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.PatchAsync(System.Threading.CancellationToken)">
            <summary>
            发送 PATCH 请求
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.HeadAsAsync``1(System.Threading.CancellationToken)">
            <summary>
            发送 HEAD 请求返回 T 对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.HeadAsStreamAsync(System.Threading.CancellationToken)">
            <summary>
            发送 HEAD 请求返回 Stream
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.HeadAsStringAsync(System.Threading.CancellationToken)">
            <summary>
            发送 Head 请求返回 String
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.HeadAsByteArrayAsync(System.Threading.CancellationToken)">
            <summary>
            发送 Head 请求返回 ByteArray
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.HeadAsync(System.Threading.CancellationToken)">
            <summary>
            发送 HEAD 请求
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.SendAsAsync``1(System.Threading.CancellationToken)">
            <summary>
            发送请求返回 T 对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.SendAsStreamAsync(System.Threading.CancellationToken)">
            <summary>
            发送请求返回 Stream
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.SendAsStringAsync(System.Threading.CancellationToken)">
            <summary>
            发送请求返回 String
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.SendAsByteArrayAsync(System.Threading.CancellationToken)">
            <summary>
            发送请求返回 ByteArray
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.SendAsync(System.Threading.CancellationToken)">
            <summary>
            发送请求
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.SetHttpContent(System.Net.Http.HttpRequestMessage)">
            <summary>
            设置 HttpContent
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.ConvertBodyToDictionary">
            <summary>
            转换 Body 为 字典类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.SerializerObject(System.Object)">
            <summary>
            序列化对象
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.GetCharsetEncoding(System.Net.Http.HttpResponseMessage)">
            <summary>
            解析响应报文 charset 编码
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.SetRequestUrl(System.String)">
            <summary>
            设置请求地址
            </summary>
            <param name="requestUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.SetTemplates(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            设置 URL 模板
            </summary>
            <param name="templates"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.SetTemplates(System.Object)">
            <summary>
            设置 URL 模板
            </summary>
            <param name="templates"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.SetHttpMethod(System.Net.Http.HttpMethod)">
            <summary>
            设置请求方法
            </summary>
            <param name="httpMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.SetHeaders(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            设置请求报文头
            </summary>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.SetHeaders(System.Object)">
            <summary>
            设置请求报文头
            </summary>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.SetQueries(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            设置 URL 参数
            </summary>
            <param name="queries"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.SetQueries(System.Object)">
            <summary>
            设置 URL 参数
            </summary>
            <param name="queries"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.SetClient(System.String)">
            <summary>
            设置客户端分类名
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.SetClient(System.Func{System.Net.Http.HttpClient})">
            <summary>
            设置客户端提供者
            </summary>
            <param name="clientProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.SetContentType(System.String)">
            <summary>
            设置内容类型
            </summary>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.SetContentEncoding(System.Text.Encoding)">
            <summary>
            设置内容编码
            </summary>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.SetBody(System.Object,System.String,System.Text.Encoding)">
            <summary>
            设置 Body 内容
            </summary>
            <param name="body"></param>
            <param name="contentType"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.SetFiles(Furion.RemoteRequest.HttpFile[])">
            <summary>
            设置文件
            </summary>
            <param name="files"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.SetClientTimeout(System.Int64)">
            <summary>
            设置超时时间（秒）
            </summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.SetJsonSerialization(System.Type,System.Object)">
            <summary>
            设置 JSON 序列化提供器
            </summary>
            <param name="providerType"></param>
            <param name="jsonSerializerOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.SetJsonSerialization``1(System.Object)">
            <summary>
            设置 JSON 序列化提供器
            </summary>
            <typeparam name="TJsonSerializationProvider"></typeparam>
            <param name="jsonSerializerOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.SetValidationState(System.Boolean,System.Boolean)">
            <summary>
            是否启用验证状态
            </summary>
            <param name="enabled"></param>
            <param name="includeNull"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.OnRequesting(System.Action{System.Net.Http.HttpClient,System.Net.Http.HttpRequestMessage})">
            <summary>
            构建请求对象拦截器
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.OnClientCreating(System.Action{System.Net.Http.HttpClient})">
            <summary>
            创建客户端对象拦截器
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.OnResponsing(System.Action{System.Net.Http.HttpClient,System.Net.Http.HttpResponseMessage})">
            <summary>
            请求成功拦截器
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.OnException(System.Action{System.Net.Http.HttpClient,System.Net.Http.HttpResponseMessage,System.String})">
            <summary>
            请求异常拦截器
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.SetRequestScoped(System.IServiceProvider)">
            <summary>
            设置请求作用域
            </summary>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.SetRetryPolicy(System.Int32,System.Int32)">
            <summary>
            配置重试策略
            </summary>
            <param name="numRetries"></param>
            <param name="retryTimeout">每次延迟时间（毫秒）</param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.WithGZip(System.Boolean)">
            <summary>
            启用 Gzip 压缩反压缩支持
            </summary>
            <param name="supportGzip"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpRequestPart.WithEncodeUrl(System.Boolean)">
            <summary>
            启用对 Url 进行 Uri.EscapeDataString
            </summary>
            <param name="encodeUrl"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.RemoteRequest.HttpDispatchProxy">
            <summary>
            远程请求实现类（以下代码还需进一步优化性能，启动时把所有扫描缓存起来）
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpDispatchProxy.Target">
            <summary>
            被代理对象
            </summary>
        </member>
        <member name="P:Furion.RemoteRequest.HttpDispatchProxy.Services">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="M:Furion.RemoteRequest.HttpDispatchProxy.Invoke(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            拦截同步方法
            </summary>
            <param name="method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpDispatchProxy.InvokeAsync(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            拦截异步无返回方法
            </summary>
            <param name="method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpDispatchProxy.InvokeAsyncT``1(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            拦截异步带返回方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpDispatchProxy.BuildHttpRequestPart(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            构建 HttpClient 请求部件
            </summary>
            <param name="method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.RemoteRequest.HttpDispatchProxy.SetQueries(System.Collections.Generic.IEnumerable{Furion.Reflection.MethodParameterInfo},Furion.RemoteRequest.HttpRequestPart)">
            <summary>
            设置 Url 地址参数
            </summary>
            <param name="parameters"></param>
            <param name="httpRequestPart"></param>
        </member>
        <member name="M:Furion.RemoteRequest.HttpDispatchProxy.SetBody(System.Collections.Generic.IEnumerable{Furion.Reflection.MethodParameterInfo},Furion.RemoteRequest.HttpRequestPart)">
            <summary>
            设置 Body 参数
            </summary>
            <param name="parameters"></param>
            <param name="httpRequestPart"></param>
        </member>
        <member name="M:Furion.RemoteRequest.HttpDispatchProxy.SetValidation(System.Collections.Generic.IEnumerable{Furion.Reflection.MethodParameterInfo})">
            <summary>
            设置验证
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="M:Furion.RemoteRequest.HttpDispatchProxy.SetJsonSerialization(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{Furion.Reflection.MethodParameterInfo},Furion.RemoteRequest.HttpRequestPart)">
            <summary>
            设置序列化
            </summary>
            <param name="method"></param>
            <param name="parameters"></param>
            <param name="httpRequestPart"></param>
        </member>
        <member name="M:Furion.RemoteRequest.HttpDispatchProxy.CallGlobalInterceptors(Furion.RemoteRequest.HttpRequestPart,System.Type)">
            <summary>
            调用全局拦截
            </summary>
            <param name="httpRequestPart"></param>
            <param name="declaringType"></param>
        </member>
        <member name="M:Furion.RemoteRequest.HttpDispatchProxy.CallMethodInterceptors(System.Collections.Generic.IEnumerable{Furion.Reflection.MethodParameterInfo},Furion.RemoteRequest.HttpRequestPart)">
            <summary>
            调用单个方法拦截
            </summary>
            <param name="parameters"></param>
            <param name="httpRequestPart"></param>
        </member>
        <member name="M:Furion.RemoteRequest.HttpDispatchProxy.SetHeaders(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{Furion.Reflection.MethodParameterInfo},Furion.RemoteRequest.HttpRequestPart)">
            <summary>
            设置请求报文头
            </summary>
            <param name="method"></param>
            <param name="parameters"></param>
            <param name="httpRequestPart"></param>
        </member>
        <member name="T:Furion.RemoteRequest.IHttpDispatchProxy">
            <summary>
            远程请求代理接口
            </summary>
        </member>
        <member name="T:Furion.SpecificationDocument.OperationIdAttribute">
            <summary>
            配置规范化文档 OperationId 问题
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.OperationIdAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="operationId">自定义 OperationId，可用户生成可读的前端代码</param>
        </member>
        <member name="P:Furion.SpecificationDocument.OperationIdAttribute.OperationId">
            <summary>
            自定义 OperationId
            </summary>
        </member>
        <member name="T:Furion.SpecificationDocument.SchemaIdAttribute">
            <summary>
            解决规范化文档 SchemaId 冲突问题
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.SchemaIdAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="schemaId">自定义 SchemaId，只能是字母开头，只运行下划线_连接</param>
        </member>
        <member name="M:Furion.SpecificationDocument.SchemaIdAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="schemaId">自定义 SchemaId</param>
            <param name="replace">默认在头部叠加，设置 true 之后，将直接使用 <see cref="P:Furion.SpecificationDocument.SchemaIdAttribute.SchemaId"/></param>
        </member>
        <member name="P:Furion.SpecificationDocument.SchemaIdAttribute.SchemaId">
            <summary>
            自定义 SchemaId
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SchemaIdAttribute.Replace">
            <summary>
            完全覆盖
            </summary>
            <remarks>默认在头部叠加，设置 true 之后，将直接使用 <see cref="P:Furion.SpecificationDocument.SchemaIdAttribute.SchemaId"/></remarks>
        </member>
        <member name="T:Furion.SpecificationDocument.SpecificationDocumentBuilder">
            <summary>
            规范化文档构建器
            </summary>
        </member>
        <member name="F:Furion.SpecificationDocument.SpecificationDocumentBuilder.AllGroupsKey">
            <summary>
            所有分组默认的组名 Key
            </summary>
        </member>
        <member name="F:Furion.SpecificationDocument.SpecificationDocumentBuilder._specificationDocumentSettings">
            <summary>
            规范化文档配置
            </summary>
        </member>
        <member name="F:Furion.SpecificationDocument.SpecificationDocumentBuilder._appSettings">
            <summary>
            应用全局配置
            </summary>
        </member>
        <member name="F:Furion.SpecificationDocument.SpecificationDocumentBuilder.DocumentGroupExtras">
            <summary>
            分组信息
            </summary>
        </member>
        <member name="F:Furion.SpecificationDocument.SpecificationDocumentBuilder._groupOrderRegex">
            <summary>
            带排序的分组名
            </summary>
        </member>
        <member name="F:Furion.SpecificationDocument.SpecificationDocumentBuilder.DocumentGroups">
            <summary>
            文档分组列表
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.CheckApiDescriptionInCurrentGroup(System.String,Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription)">
            <summary>
            检查方法是否在分组中
            </summary>
            <param name="currentGroup"></param>
            <param name="apiDescription"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetOpenApiGroups">
            <summary>
            获取所有的规范化分组信息
            </summary>
            <returns></returns>
        </member>
        <member name="F:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetGroupOpenApiInfoCached">
            <summary>
            获取分组信息缓存集合
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetGroupOpenApiInfo(System.String)">
            <summary>
            获取分组配置信息
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.Build(Swashbuckle.AspNetCore.Swagger.SwaggerOptions,System.Action{Swashbuckle.AspNetCore.Swagger.SwaggerOptions})">
            <summary>
            构建Swagger全局配置
            </summary>
            <param name="swaggerOptions">Swagger 全局配置</param>
            <param name="configure"></param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.BuildGen(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions,System.Action{Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions})">
            <summary>
            Swagger 生成器构建
            </summary>
            <param name="swaggerGenOptions">Swagger 生成器配置</param>
            <param name="configure">自定义配置</param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.BuildUI(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions,System.String,System.Action{Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions})">
            <summary>
            Swagger UI 构建
            </summary>
            <param name="swaggerUIOptions"></param>
            <param name="routePrefix"></param>
            <param name="configure"></param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.CreateSwaggerDocs(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            创建分组文档
            </summary>
            <param name="swaggerGenOptions">Swagger生成器对象</param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.LoadGroupControllerWithActions(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            加载分组控制器和动作方法列表
            </summary>
            <param name="swaggerGenOptions">Swagger 生成器配置</param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.ConfigureTagsAction(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
             配置标签
            </summary>
            <param name="swaggerGenOptions"></param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.ConfigureActionSequence(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
             配置 Action 排序
            </summary>
            <param name="swaggerGenOptions"></param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.ConfigureOperationIds(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            配置 Swagger OperationIds
            </summary>
            <param name="swaggerGenOptions">Swagger 生成器配置</param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.ConfigureSchemaIds(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            配置 Swagger SchemaIds
            </summary>
            <param name="swaggerGenOptions">Swagger 生成器配置</param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.LoadXmlComments(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            加载注释描述文件
            </summary>
            <param name="swaggerGenOptions">Swagger 生成器配置</param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.GenerateInheritdocCref(System.Xml.Linq.XDocument,System.String,System.String)">
            <summary>
            生成 Inheritdoc cref 属性
            </summary>
            <param name="xmlDoc"></param>
            <param name="memberName"></param>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.ConfigureSecurities(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            配置授权
            </summary>
            <param name="swaggerGenOptions">Swagger 生成器配置</param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.CreateGroupEndpoint(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions)">
            <summary>
            配置分组终点路由
            </summary>
            <param name="swaggerUIOptions"></param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.InjectMiniProfilerPlugin(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions)">
            <summary>
            注入 MiniProfiler 插件
            </summary>
            <param name="swaggerUIOptions"></param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.AddDefaultInterceptor(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions)">
            <summary>
            添加默认请求/响应拦截器
            </summary>
            <param name="swaggerUIOptions"></param>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.ReadGroups">
            <summary>
            读取所有分组信息
            </summary>
            <returns></returns>
        </member>
        <member name="F:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetControllerGroupsCached">
            <summary>
            获取控制器组缓存集合
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetControllerGroups(System.Type)">
            <summary>
            获取控制器分组列表
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="F:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetActionGroupsCached">
            <summary>
            <see cref="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetActionGroups(System.Reflection.MethodInfo)"/> 缓存集合
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetActionGroups(System.Reflection.MethodInfo)">
            <summary>
            获取动作方法分组列表
            </summary>
            <param name="method">方法</param>
            <returns></returns>
        </member>
        <member name="F:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetControllerTagCached">
            <summary>
            <see cref="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetActionTag(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription)"/> 缓存集合
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetControllerTag(Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor)">
            <summary>
            获取控制器标签
            </summary>
            <param name="controllerActionDescriptor">控制器接口描述器</param>
            <returns></returns>
        </member>
        <member name="F:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetActionTagCached">
            <summary>
            <see cref="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetActionTag(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription)"/> 缓存集合
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.GetActionTag(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription)">
            <summary>
            获取动作方法标签
            </summary>
            <param name="apiDescription">接口描述器</param>
            <returns></returns>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.IsApiAction(System.Reflection.MethodInfo,System.Type)">
            <summary>
            是否是动作方法
            </summary>
            <param name="method">方法</param>
            <param name="ReflectedType">声明类型</param>
            <returns></returns>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentBuilder.ResolveGroupExtraInfo(System.String)">
            <summary>
            解析分组附加信息
            </summary>
            <param name="group">分组名</param>
            <returns></returns>
        </member>
        <member name="T:Furion.SpecificationDocument.AnySchemaFilter">
            <summary>
            修正 规范化文档 object schema，统一显示为 any
            </summary>
            <remarks>相关 issue：https://github.com/swagger-api/swagger-codegen-generators/issues/692 </remarks>
        </member>
        <member name="M:Furion.SpecificationDocument.AnySchemaFilter.Apply(Microsoft.OpenApi.Models.OpenApiSchema,Swashbuckle.AspNetCore.SwaggerGen.SchemaFilterContext)">
            <summary>
            实现过滤器方法
            </summary>
            <param name="model"></param>
            <param name="context"></param>
        </member>
        <member name="T:Furion.SpecificationDocument.ApiActionFilter">
            <summary>
            规范化文档自定义更多功能
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.ApiActionFilter.Apply(Microsoft.OpenApi.Models.OpenApiOperation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
            实现过滤器方法
            </summary>
            <param name="operation"></param>
            <param name="context"></param>
        </member>
        <member name="T:Furion.SpecificationDocument.EnumSchemaFilter">
            <summary>
            修正 规范化文档 Enum 提示
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.EnumSchemaFilter.Apply(Microsoft.OpenApi.Models.OpenApiSchema,Swashbuckle.AspNetCore.SwaggerGen.SchemaFilterContext)">
            <summary>
            实现过滤器方法
            </summary>
            <param name="model"></param>
            <param name="context"></param>
        </member>
        <member name="T:Furion.SpecificationDocument.TagsOrderDocumentFilter">
            <summary>
            标签文档排序拦截器
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.TagsOrderDocumentFilter.Apply(Microsoft.OpenApi.Models.OpenApiDocument,Swashbuckle.AspNetCore.SwaggerGen.DocumentFilterContext)">
            <summary>
            配置拦截
            </summary>
            <param name="swaggerDoc"></param>
            <param name="context"></param>
        </member>
        <member name="M:Furion.SpecificationDocument.TagsOrderDocumentFilter.GetTagOrder(System.String)">
            <summary>
            获取标签排序
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.SpecificationDocument.GroupExtraInfo">
            <summary>
            分组附加信息
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.GroupExtraInfo.Group">
            <summary>
            分组名
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.GroupExtraInfo.Order">
            <summary>
            分组排序
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.GroupExtraInfo.Visible">
            <summary>
            是否可见
            </summary>
        </member>
        <member name="T:Furion.SpecificationDocument.SpecificationAuth">
            <summary>
            规范化文档授权参数类型
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationAuth.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationAuth.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="T:Furion.SpecificationDocument.SpecificationLoginInfo">
            <summary>
            规范化文档授权登录配置信息
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationLoginInfo.Enabled">
            <summary>
            是否启用授权控制
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationLoginInfo.CheckUrl">
            <summary>
            检查登录地址
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationLoginInfo.SubmitUrl">
            <summary>
            提交登录地址
            </summary>
        </member>
        <member name="T:Furion.SpecificationDocument.SpecificationOpenApiInfo">
            <summary>
            规范化文档开放接口信息
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationOpenApiInfo.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Furion.SpecificationDocument.SpecificationOpenApiInfo._group">
            <summary>
            分组私有字段
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationOpenApiInfo.Group">
            <summary>
            所属组
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationOpenApiInfo.Order">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationOpenApiInfo.Visible">
            <summary>
            是否可见
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationOpenApiInfo.RouteTemplate">
            <summary>
            路由模板
            </summary>
        </member>
        <member name="T:Furion.SpecificationDocument.SpecificationOpenApiSecurityRequirementItem">
            <summary>
            安全定义需求子项
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationOpenApiSecurityRequirementItem.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationOpenApiSecurityRequirementItem.Scheme">
            <summary>
            安全Schema
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationOpenApiSecurityRequirementItem.Accesses">
            <summary>
            权限
            </summary>
        </member>
        <member name="T:Furion.SpecificationDocument.SpecificationOpenApiSecurityScheme">
            <summary>
            规范化稳定安全配置
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationOpenApiSecurityScheme.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationOpenApiSecurityScheme.Id">
            <summary>
            唯一Id
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationOpenApiSecurityScheme.Requirement">
            <summary>
            安全需求
            </summary>
        </member>
        <member name="T:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions">
            <summary>
            规范化文档配置选项
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.DocumentTitle">
            <summary>
            文档标题
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.DefaultGroupName">
            <summary>
            默认分组名
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.EnableAuthorized">
            <summary>
            启用授权支持
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.FormatAsV2">
            <summary>
            格式化为V2版本
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.RoutePrefix">
            <summary>
            配置规范化文档地址
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.DocExpansionState">
            <summary>
            文档展开设置
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.XmlComments">
            <summary>
            XML 描述文件
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.GroupOpenApiInfos">
            <summary>
            分组信息
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.SecurityDefinitions">
            <summary>
            安全定义
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.Servers">
            <summary>
            配置 Servers
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.HideServers">
            <summary>
            隐藏 Servers
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.RouteTemplate">
            <summary>
            默认 swagger.json 路由模板
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.PackagesGroups">
            <summary>
            配置安装第三方包的分组名
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.EnableEnumSchemaFilter">
            <summary>
            启用枚举 Schema 筛选器
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.EnableTagsOrderDocumentFilter">
            <summary>
            启用标签排序筛选器
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.ServerDir">
            <summary>
            服务目录（修正 IIS 创建 Application 问题）
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.LoginInfo">
            <summary>
            配置规范化文档登录信息
            </summary>
        </member>
        <member name="P:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.EnableAllGroups">
            <summary>
            启用 All Groups 功能
            </summary>
        </member>
        <member name="M:Furion.SpecificationDocument.SpecificationDocumentSettingsOptions.PostConfigure(Furion.SpecificationDocument.SpecificationDocumentSettingsOptions,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            后期配置
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Furion.TaskScheduler.SpareTimeAttribute">
            <summary>
            配置定时任务特性
            </summary>
        </member>
        <member name="M:Furion.TaskScheduler.SpareTimeAttribute.#ctor(System.Double,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="interval"></param>
            <param name="workerName"></param>
        </member>
        <member name="M:Furion.TaskScheduler.SpareTimeAttribute.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="expressionOrKey">表达式或配置Key</param>
            <param name="workName"></param>
        </member>
        <member name="P:Furion.TaskScheduler.SpareTimeAttribute.Interval">
            <summary>
            间隔
            </summary>
        </member>
        <member name="P:Furion.TaskScheduler.SpareTimeAttribute.CronExpression">
            <summary>
            Cron 表达式
            </summary>
        </member>
        <member name="P:Furion.TaskScheduler.SpareTimeAttribute.WorkerName">
            <summary>
            任务名称
            </summary>
        </member>
        <member name="P:Furion.TaskScheduler.SpareTimeAttribute.Type">
            <summary>
            任务类型
            </summary>
        </member>
        <member name="P:Furion.TaskScheduler.SpareTimeAttribute.Description">
            <summary>
            任务描述
            </summary>
        </member>
        <member name="P:Furion.TaskScheduler.SpareTimeAttribute.DoOnce">
            <summary>
            只执行一次
            </summary>
        </member>
        <member name="P:Furion.TaskScheduler.SpareTimeAttribute.StartNow">
            <summary>
            立即执行（默认等待启动）
            </summary>
        </member>
        <member name="P:Furion.TaskScheduler.SpareTimeAttribute.ExecuteType">
            <summary>
            执行类型
            </summary>
        </member>
        <member name="P:Furion.TaskScheduler.SpareTimeAttribute.CronFormat">
            <summary>
            Cron 表达式格式化方式
            </summary>
        </member>
        <member name="T:Furion.TaskScheduler.CalendarHelper">
            <summary>
            日历帮助类
            </summary>
        </member>
        <member name="T:Furion.TaskScheduler.CronExpression">
            <summary>
            Cron 表达式的解析器和调度程序
            <para>代码参考自：https://github.com/HangfireIO/Cronos </para>
            </summary>
        </member>
        <member name="M:Furion.TaskScheduler.CronExpression.Parse(System.String)">
            <summary>
             Constructs a new <see cref="T:Furion.TaskScheduler.CronExpression"/> based on the specified
             cron expression. It's supported expressions consisting of 5 fields:
             minute, hour, day of month, month, day of week.
             If you want to parse non-standard cron expressions use <see cref="M:Furion.TaskScheduler.CronExpression.Parse(System.String,Furion.TaskScheduler.CronFormat)"/> with specified CronFields argument.
             See more: <a href="https://github.com/HangfireIO/Cronos">https://github.com/HangfireIO/Cronos</a>
             </summary>
        </member>
        <member name="M:Furion.TaskScheduler.CronExpression.Parse(System.String,Furion.TaskScheduler.CronFormat)">
            <summary>
             Constructs a new <see cref="T:Furion.TaskScheduler.CronExpression"/> based on the specified
             cron expression. It's supported expressions consisting of 5 or 6 fields:
             second (optional), minute, hour, day of month, month, day of week.
             See more: <a href="https://github.com/HangfireIO/Cronos">https://github.com/HangfireIO/Cronos</a>
             </summary>
        </member>
        <member name="M:Furion.TaskScheduler.CronExpression.GetNextOccurrence(System.DateTime,System.Boolean)">
            <summary>
            Calculates next occurrence starting with <paramref name="fromUtc"/> (optionally <paramref name="inclusive"/>) in UTC time zone.
            </summary>
        </member>
        <member name="M:Furion.TaskScheduler.CronExpression.GetOccurrences(System.DateTime,System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Returns the list of next occurrences within the given date/time range,
            including <paramref name="fromUtc"/> and excluding <paramref name="toUtc"/>
            by default, and UTC time zone. When none of the occurrences found, an
            empty list is returned.
            </summary>
        </member>
        <member name="M:Furion.TaskScheduler.CronExpression.GetNextOccurrence(System.DateTime,System.TimeZoneInfo,System.Boolean)">
            <summary>
            Calculates next occurrence starting with <paramref name="fromUtc"/> (optionally <paramref name="inclusive"/>) in given <paramref name="zone"/>
            </summary>
        </member>
        <member name="M:Furion.TaskScheduler.CronExpression.GetOccurrences(System.DateTime,System.DateTime,System.TimeZoneInfo,System.Boolean,System.Boolean)">
            <summary>
            Returns the list of next occurrences within the given date/time range, including
            <paramref name="fromUtc"/> and excluding <paramref name="toUtc"/> by default, and
            specified time zone. When none of the occurrences found, an empty list is returned.
            </summary>
        </member>
        <member name="M:Furion.TaskScheduler.CronExpression.GetNextOccurrence(System.DateTimeOffset,System.TimeZoneInfo,System.Boolean)">
            <summary>
            Calculates next occurrence starting with <paramref name="from"/> (optionally <paramref name="inclusive"/>) in given <paramref name="zone"/>
            </summary>
        </member>
        <member name="M:Furion.TaskScheduler.CronExpression.GetOccurrences(System.DateTimeOffset,System.DateTimeOffset,System.TimeZoneInfo,System.Boolean,System.Boolean)">
            <summary>
            Returns the list of occurrences within the given date/time offset range,
            including <paramref name="from"/> and excluding <paramref name="to"/> by
            default. When none of the occurrences found, an empty list is returned.
            </summary>
        </member>
        <member name="M:Furion.TaskScheduler.CronExpression.ToString">
            <inheritdoc />
        </member>
        <member name="M:Furion.TaskScheduler.CronExpression.Equals(Furion.TaskScheduler.CronExpression)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="other">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Furion.TaskScheduler.CronExpression.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Furion.TaskScheduler.CronExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data
            structures like a hash table.
            </returns>
        </member>
        <member name="M:Furion.TaskScheduler.CronExpression.op_Equality(Furion.TaskScheduler.CronExpression,Furion.TaskScheduler.CronExpression)">
            <summary>
            Implements the operator ==.
            </summary>
        </member>
        <member name="M:Furion.TaskScheduler.CronExpression.op_Inequality(Furion.TaskScheduler.CronExpression,Furion.TaskScheduler.CronExpression)">
            <summary>
            Implements the operator !=.
            </summary>
        </member>
        <member name="T:Furion.TaskScheduler.CronExpressionFlag">
            <summary>
            Cron 表达式标识
            </summary>
        </member>
        <member name="T:Furion.TaskScheduler.CronField">
            <summary>
            Cron 表达式内置字段
            </summary>
        </member>
        <member name="T:Furion.TaskScheduler.CronFormat">
            <summary>
            Cron 表达式支持类型
            </summary>
        </member>
        <member name="F:Furion.TaskScheduler.CronFormat.Standard">
            <summary>
            只有 5 个字符：分钟，小时，月/天，天，周/天
            </summary>
        </member>
        <member name="F:Furion.TaskScheduler.CronFormat.IncludeSeconds">
            <summary>
            支持秒解析，也就是 6 个字符
            </summary>
        </member>
        <member name="T:Furion.TaskScheduler.CronFormatException">
            <summary>
            解析 Cron 表达式出错异常类
            </summary>
        </member>
        <member name="M:Furion.TaskScheduler.CronFormatException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Furion.TaskScheduler.CronFormatException.#ctor(Furion.TaskScheduler.CronField,System.String)">
            <summary>
            内部构造函数
            </summary>
            <param name="field"></param>
            <param name="message"></param>
        </member>
        <member name="T:Furion.TaskScheduler.DateTimeHelper">
            <summary>
            日期时间帮助类
            </summary>
        </member>
        <member name="T:Furion.TaskScheduler.TimeZoneHelper">
            <summary>
            处理不同平台时区的区别
            </summary>
        </member>
        <member name="T:Furion.TaskScheduler.SpareTimeExecuteTypes">
            <summary>
            任务执行类型
            </summary>
        </member>
        <member name="F:Furion.TaskScheduler.SpareTimeExecuteTypes.Parallel">
            <summary>
            并行执行（默认方式）
            <para>无需等待上一个完成</para>
            </summary>
        </member>
        <member name="F:Furion.TaskScheduler.SpareTimeExecuteTypes.Serial">
            <summary>
            串行执行
            <para>需等待上一个完成</para>
            </summary>
        </member>
        <member name="T:Furion.TaskScheduler.SpareTimeStatus">
            <summary>
            任务状态
            </summary>
        </member>
        <member name="F:Furion.TaskScheduler.SpareTimeStatus.Running">
            <summary>
            运行中
            </summary>
        </member>
        <member name="F:Furion.TaskScheduler.SpareTimeStatus.Stopped">
            <summary>
            已停止或未启动
            </summary>
        </member>
        <member name="F:Furion.TaskScheduler.SpareTimeStatus.Failed">
            <summary>
            单次执行失败
            </summary>
        </member>
        <member name="F:Furion.TaskScheduler.SpareTimeStatus.CanceledOrNone">
            <summary>
            任务已取消或没有该任务
            </summary>
        </member>
        <member name="T:Furion.TaskScheduler.SpareTimeTypes">
            <summary>
            任务类型
            </summary>
        </member>
        <member name="F:Furion.TaskScheduler.SpareTimeTypes.Interval">
            <summary>
            间隔方式
            </summary>
        </member>
        <member name="F:Furion.TaskScheduler.SpareTimeTypes.Cron">
            <summary>
            Cron 表达式
            </summary>
        </member>
        <member name="T:Furion.TaskScheduler.SpareTimeListenerChannelHandler">
            <summary>
            定时器监听管道处理程序
            </summary>
        </member>
        <member name="M:Furion.TaskScheduler.SpareTimeListenerChannelHandler.InvokeAsync(Furion.TaskScheduler.SpareTimerExecuter)">
            <summary>
            触发程序
            </summary>
            <param name="executer"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.TaskScheduler.SpareTimer">
            <summary>
            内置时间调度器
            </summary>
        </member>
        <member name="M:Furion.TaskScheduler.SpareTimer.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="workerName"></param>
        </member>
        <member name="M:Furion.TaskScheduler.SpareTimer.#ctor(System.Double,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="interval"></param>
            <param name="workerName"></param>
        </member>
        <member name="P:Furion.TaskScheduler.SpareTimer.WorkerName">
            <summary>
            当前任务名
            </summary>
        </member>
        <member name="P:Furion.TaskScheduler.SpareTimer.Type">
            <summary>
            任务类型
            </summary>
        </member>
        <member name="P:Furion.TaskScheduler.SpareTimer.Description">
            <summary>
            任务描述
            </summary>
        </member>
        <member name="P:Furion.TaskScheduler.SpareTimer.Status">
            <summary>
            任务状态
            </summary>
        </member>
        <member name="P:Furion.TaskScheduler.SpareTimer.ExecuteType">
            <summary>
            执行类型
            </summary>
        </member>
        <member name="P:Furion.TaskScheduler.SpareTimer.Exception">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="P:Furion.TaskScheduler.SpareTimer.Tally">
            <summary>
            任务执行计数
            </summary>
        </member>
        <member name="T:Furion.TaskScheduler.SpareTimerExecuter">
            <summary>
            定时器执行状态器
            </summary>
        </member>
        <member name="M:Furion.TaskScheduler.SpareTimerExecuter.#ctor(Furion.TaskScheduler.SpareTimer,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="timer"></param>
            <param name="status"></param>
        </member>
        <member name="P:Furion.TaskScheduler.SpareTimerExecuter.Timer">
            <summary>
            定时器
            </summary>
        </member>
        <member name="P:Furion.TaskScheduler.SpareTimerExecuter.Status">
            <summary>
            状态
            </summary>
            <remarks>
            <para>0：任务开始</para>
            <para>1：执行之前</para>
            <para>2：执行成功</para>
            <para>3：执行失败</para>
            <para>-1：任务停止</para>
            <para>-2：任务取消</para>
            </remarks>
        </member>
        <member name="T:Furion.TaskScheduler.WorkerRecord">
            <summary>
            记录任务数据
            </summary>
        </member>
        <member name="P:Furion.TaskScheduler.WorkerRecord.Timer">
            <summary>
            定时器
            </summary>
        </member>
        <member name="P:Furion.TaskScheduler.WorkerRecord.Tally">
            <summary>
            任务执行计数
            </summary>
        </member>
        <member name="P:Furion.TaskScheduler.WorkerRecord.Interlocked">
            <summary>
            解决定时器重入问题
            </summary>
        </member>
        <member name="P:Furion.TaskScheduler.WorkerRecord.CronActualTally">
            <summary>
            Cron 表达式实际执行计数
            </summary>
        </member>
        <member name="P:Furion.TaskScheduler.WorkerRecord.IsCompleteOfPrev">
            <summary>
            是否上一个已完成
            </summary>
        </member>
        <member name="T:Furion.TaskScheduler.ISpareTimeListener">
            <summary>
            定时器监听接口（注册为单例）
            </summary>
        </member>
        <member name="M:Furion.TaskScheduler.ISpareTimeListener.OnListener(Furion.TaskScheduler.SpareTimerExecuter)">
            <summary>
            监听器
            </summary>
            <param name="executer"></param>
        </member>
        <member name="T:Furion.TaskScheduler.SpareTime">
            <summary>
            后台任务静态类
            </summary>
        </member>
        <member name="M:Furion.TaskScheduler.SpareTime.Do(System.Double,System.Action{Furion.TaskScheduler.SpareTimer,System.Int64},System.String,System.String,System.Boolean,System.Boolean,Furion.TaskScheduler.SpareTimeExecuteTypes)">
            <summary>
            开始执行简单任务（持续的）
            </summary>
            <param name="interval">时间间隔（毫秒）</param>
            <param name="doWhat"></param>
            <param name="workerName"></param>
            <param name="description"></param>
            <param name="startNow"></param>
            <param name="cancelInNoneNextTime"></param>
            <param name="executeType"></param>
        </member>
        <member name="M:Furion.TaskScheduler.SpareTime.Do(System.Double,System.Func{Furion.TaskScheduler.SpareTimer,System.Int64,System.Threading.Tasks.Task},System.String,System.String,System.Boolean,System.Boolean,Furion.TaskScheduler.SpareTimeExecuteTypes,System.Boolean)">
             <summary>
             开始执行简单任务（持续的）
             </summary>
             <param name="interval">时间间隔（毫秒）</param>
             <param name="doWhat"></param>
             <param name="workerName"></param>
             <param name="description"></param>
             <param name="startNow"></param>
             <param name="cancelInNoneNextTime"></param>
             <param name="executeType"></param>
             <param name="onlyInspect">无关紧要的参数（用于检查器，外部不可用）</param>
            
        </member>
        <member name="M:Furion.TaskScheduler.SpareTime.DoIt(System.Action,System.Double,System.Boolean,Furion.TaskScheduler.SpareTimeExecuteTypes)">
            <summary>
            模拟后台执行任务
            <para>10毫秒后执行</para>
            </summary>
            <param name="doWhat"></param>
            <param name="interval"></param>
            <param name="cancelInNoneNextTime"></param>
            <param name="executeType"></param>
        </member>
        <member name="M:Furion.TaskScheduler.SpareTime.DoIt(System.Func{System.Threading.Tasks.Task},System.Double,System.Boolean,Furion.TaskScheduler.SpareTimeExecuteTypes)">
            <summary>
            模拟后台执行任务
            <para>10毫秒后执行</para>
            </summary>
            <param name="doWhat"></param>
            <param name="interval"></param>
            <param name="cancelInNoneNextTime"></param>
            <param name="executeType"></param>
        </member>
        <member name="M:Furion.TaskScheduler.SpareTime.DoOnce(System.Double,System.Action{Furion.TaskScheduler.SpareTimer,System.Int64},System.String,System.String,System.Boolean,System.Boolean,Furion.TaskScheduler.SpareTimeExecuteTypes)">
            <summary>
            开始执行简单任务（只执行一次）
            </summary>
            <param name="interval">时间间隔（毫秒）</param>
            <param name="doWhat"></param>
            <param name="workerName"></param>
            <param name="description"></param>
            <param name="startNow"></param>
            <param name="cancelInNoneNextTime"></param>
            <param name="executeType"></param>
        </member>
        <member name="M:Furion.TaskScheduler.SpareTime.DoOnce(System.Double,System.Func{Furion.TaskScheduler.SpareTimer,System.Int64,System.Threading.Tasks.Task},System.String,System.String,System.Boolean,System.Boolean,Furion.TaskScheduler.SpareTimeExecuteTypes)">
            <summary>
            开始执行简单任务（只执行一次）
            </summary>
            <param name="interval">时间间隔（毫秒）</param>
            <param name="doWhat"></param>
            <param name="workerName"></param>
            <param name="description"></param>
            <param name="startNow"></param>
            <param name="cancelInNoneNextTime"></param>
            <param name="executeType"></param>
        </member>
        <member name="M:Furion.TaskScheduler.SpareTime.Do(System.String,System.Action{Furion.TaskScheduler.SpareTimer,System.Int64},System.String,System.String,System.Boolean,System.Boolean,System.Nullable{Furion.TaskScheduler.CronFormat},Furion.TaskScheduler.SpareTimeExecuteTypes)">
            <summary>
            开始执行 Cron 表达式任务
            </summary>
            <param name="expression">Cron 表达式</param>
            <param name="doWhat"></param>
            <param name="workerName"></param>
            <param name="description"></param>
            <param name="startNow"></param>
            <param name="cancelInNoneNextTime"></param>
            <param name="cronFormat">配置 Cron 表达式格式化</param>
            <param name="executeType"></param>
        </member>
        <member name="M:Furion.TaskScheduler.SpareTime.Do(System.String,System.Func{Furion.TaskScheduler.SpareTimer,System.Int64,System.Threading.Tasks.Task},System.String,System.String,System.Boolean,System.Boolean,System.Nullable{Furion.TaskScheduler.CronFormat},Furion.TaskScheduler.SpareTimeExecuteTypes)">
            <summary>
            开始执行 Cron 表达式任务
            </summary>
            <param name="expression">Cron 表达式</param>
            <param name="doWhat"></param>
            <param name="workerName"></param>
            <param name="description"></param>
            <param name="startNow"></param>
            <param name="cancelInNoneNextTime"></param>
            <param name="cronFormat">配置 Cron 表达式格式化</param>
            <param name="executeType"></param>
        </member>
        <member name="M:Furion.TaskScheduler.SpareTime.Do(System.Func{System.Nullable{System.DateTimeOffset}},System.Action{Furion.TaskScheduler.SpareTimer,System.Int64},System.String,System.String,System.Boolean,System.Boolean,Furion.TaskScheduler.SpareTimeExecuteTypes)">
            <summary>
            开始执行下一发生时间任务
            </summary>
            <param name="nextTimeHandler">返回下一次执行时间</param>
            <param name="doWhat"></param>
            <param name="workerName"></param>
            <param name="description"></param>
            <param name="startNow"></param>
            <param name="cancelInNoneNextTime">在下一个空时间取消任务</param>
            <param name="executeType"></param>
        </member>
        <member name="M:Furion.TaskScheduler.SpareTime.Do(System.Func{System.Nullable{System.DateTimeOffset}},System.Func{Furion.TaskScheduler.SpareTimer,System.Int64,System.Threading.Tasks.Task},System.String,System.String,System.Boolean,System.Boolean,Furion.TaskScheduler.SpareTimeExecuteTypes)">
            <summary>
            开始执行下一发生时间任务
            </summary>
            <param name="nextTimeHandler">返回下一次执行时间</param>
            <param name="doWhat"></param>
            <param name="workerName"></param>
            <param name="description"></param>
            <param name="startNow"></param>
            <param name="cancelInNoneNextTime">在下一个空时间取消任务</param>
            <param name="executeType"></param>
        </member>
        <member name="M:Furion.TaskScheduler.SpareTime.Do(System.Func{System.Double},System.Action{Furion.TaskScheduler.SpareTimer,System.Int64},System.String,System.String,System.Boolean,System.Boolean,Furion.TaskScheduler.SpareTimeExecuteTypes,System.Boolean)">
            <summary>
            开始执行简单任务
            </summary>
            <param name="intervalHandler">时间间隔（毫秒）</param>
            <param name="doWhat"></param>
            <param name="workerName"></param>
            <param name="description"></param>
            <param name="startNow"></param>
            <param name="cancelInNoneNextTime"></param>
            <param name="executeType"></param>
            <param name="continued">是否持续执行</param>
        </member>
        <member name="M:Furion.TaskScheduler.SpareTime.Do(System.Func{System.Double},System.Func{Furion.TaskScheduler.SpareTimer,System.Int64,System.Threading.Tasks.Task},System.String,System.String,System.Boolean,System.Boolean,Furion.TaskScheduler.SpareTimeExecuteTypes,System.Boolean,System.Boolean)">
            <summary>
            开始执行简单任务
            </summary>
            <param name="intervalHandler">时间间隔（毫秒）</param>
            <param name="doWhat"></param>
            <param name="workerName"></param>
            <param name="description"></param>
            <param name="startNow"></param>
            <param name="cancelInNoneNextTime"></param>
            <param name="executeType"></param>
            <param name="continued">是否持续执行</param>
            <param name="onlyInspect">无关紧要的参数（用于检查器，外部不可用）</param>
        </member>
        <member name="M:Furion.TaskScheduler.SpareTime.DoAsync(System.Int32,System.Action,System.Threading.CancellationToken)">
            <summary>
            开始简单任务（持续的）
            <para>用于 Worker Services</para>
            </summary>
            <param name="interval"></param>
            <param name="doWhat"></param>
            <param name="stoppingToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.TaskScheduler.SpareTime.DoAsync(System.Int32,System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            开始简单任务（持续的）
            <para>用于 Worker Services</para>
            </summary>
            <param name="interval"></param>
            <param name="doWhat"></param>
            <param name="stoppingToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.TaskScheduler.SpareTime.DoAsync(System.Func{System.Int32},System.Action,System.Threading.CancellationToken)">
            <summary>
            开始简单任务（持续的）
            <para>用于 Worker Services</para>
            </summary>
            <param name="intervalHandler"></param>
            <param name="doWhat"></param>
            <param name="stoppingToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.TaskScheduler.SpareTime.DoAsync(System.Func{System.Int32},System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            开始简单任务（持续的）
            <para>用于 Worker Services</para>
            </summary>
            <param name="intervalHandler"></param>
            <param name="doWhat"></param>
            <param name="stoppingToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.TaskScheduler.SpareTime.DoAsync(System.String,System.Action,System.Threading.CancellationToken,System.Nullable{Furion.TaskScheduler.CronFormat})">
            <summary>
            开始 Cron 表达式任务（持续的）
            <para>用于 Worker Services</para>
            </summary>
            <param name="expression"></param>
            <param name="doWhat"></param>
            <param name="stoppingToken"></param>
            <param name="cronFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.TaskScheduler.SpareTime.DoAsync(System.String,System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Nullable{Furion.TaskScheduler.CronFormat})">
            <summary>
            开始 Cron 表达式任务（持续的）
            <para>用于 Worker Services</para>
            </summary>
            <param name="expression"></param>
            <param name="doWhat"></param>
            <param name="stoppingToken"></param>
            <param name="cronFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.TaskScheduler.SpareTime.DoAsync(System.Func{System.Nullable{System.DateTimeOffset}},System.Action,System.Threading.CancellationToken)">
            <summary>
            开始 Cron 表达式任务（持续的）
            <para>用于 Worker Services</para>
            </summary>
            <param name="nextTimeHandler"></param>
            <param name="doWhat"></param>
            <param name="stoppingToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.TaskScheduler.SpareTime.DoAsync(System.Func{System.Nullable{System.DateTimeOffset}},System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            开始 Cron 表达式任务（持续的）
            <para>用于 Worker Services</para>
            </summary>
            <param name="nextTimeHandler"></param>
            <param name="doWhat"></param>
            <param name="stoppingToken"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.TaskScheduler.SpareTime.Start(System.String)">
            <summary>
            开始某个任务
            </summary>
            <param name="workerName"></param>
        </member>
        <member name="M:Furion.TaskScheduler.SpareTime.Stop(System.String,System.Boolean)">
            <summary>
            停止某个任务
            </summary>
            <param name="workerName"></param>
            <param name="isFaild"></param>
        </member>
        <member name="M:Furion.TaskScheduler.SpareTime.Cancel(System.String)">
            <summary>
            取消某个任务
            </summary>
            <param name="workerName"></param>
        </member>
        <member name="M:Furion.TaskScheduler.SpareTime.Dispose">
            <summary>
            销毁所有任务
            </summary>
        </member>
        <member name="M:Furion.TaskScheduler.SpareTime.GetWorkers">
            <summary>
            获取所有任务列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.TaskScheduler.SpareTime.GetWorker(System.String)">
            <summary>
            获取单个任务信息
            </summary>
            <param name="workerName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.TaskScheduler.SpareTime.GetCronNextOccurrence(System.String,System.Nullable{Furion.TaskScheduler.CronFormat})">
            <summary>
            获取 Cron 表达式下一个发生时间
            </summary>
            <param name="expression"></param>
            <param name="cronFormat"></param>
            <returns></returns>
        </member>
        <member name="F:Furion.TaskScheduler.SpareTime.CronExpressionSet">
            <summary>
            Cron 表达式解析对象
            </summary>
            <remarks>由于目前使用项目太多，放弃了进行破坏性更改，无奈之举牺牲点内存换来性能，该处理本不应该存在</remarks>
        </member>
        <member name="M:Furion.TaskScheduler.SpareTime.UpdateWorkerRecord(System.String,Furion.TaskScheduler.WorkerRecord)">
            <summary>
            更新工作记录
            </summary>
            <param name="workerName"></param>
            <param name="newRecord"></param>
        </member>
        <member name="M:Furion.TaskScheduler.SpareTime.WriteChannel(Furion.TaskScheduler.SpareTimer,System.Int32)">
            <summary>
            写入管道消息
            </summary>
            <param name="timer"></param>
            <param name="statues"></param>
            <returns></returns>
        </member>
        <member name="F:Furion.TaskScheduler.SpareTime.WorkerRecords">
            <summary>
            记录任务
            </summary>
        </member>
        <member name="M:Furion.TaskScheduler.SpareTime.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="T:Furion.TaskScheduler.ISpareTimeWorker">
            <summary>
            业务时间任务工作类
            </summary>
        </member>
        <member name="T:Furion.Templates.Extensions.StringRenderExtensions">
            <summary>
            字符串渲染模板拓展类
            </summary>
        </member>
        <member name="F:Furion.Templates.Extensions.StringRenderExtensions.commonTemplatePattern">
            <summary>
            模板正则表达式
            </summary>
        </member>
        <member name="F:Furion.Templates.Extensions.StringRenderExtensions.configTemplatePattern">
            <summary>
            读取配置模板正则表达式
            </summary>
        </member>
        <member name="M:Furion.Templates.Extensions.StringRenderExtensions.Render(System.String,System.Object,System.Boolean)">
            <summary>
            渲染模板
            </summary>
            <param name="template"></param>
            <param name="templateData"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Templates.Extensions.StringRenderExtensions.Render(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            渲染模板
            </summary>
            <param name="template"></param>
            <param name="templateData"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Templates.Extensions.StringRenderExtensions.Render(System.String,System.Boolean)">
            <summary>
            从配置中渲染字符串模板
            </summary>
            <param name="template"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Templates.Extensions.StringRenderExtensions.MatchTemplateValue(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            匹配模板值
            </summary>
            <param name="template"></param>
            <param name="templateData"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.Templates.Extensions.StringRenderExtensions.ResolveTemplateValue(System.String,System.Object)">
            <summary>
            解析模板的值
            </summary>
            <param name="template"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.Templates.TP">
            <summary>
            模板静态类
            </summary>
        </member>
        <member name="M:Furion.Templates.TP.Wrapper(System.String,System.String,System.String[])">
            <summary>
            生成规范日志模板
            </summary>
            <param name="title">标题</param>
            <param name="description">描述</param>
            <param name="items">列表项，如果以 [xxx] 开头，自动生成 xxx: 属性</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Templates.TP.PadRight(System.String,System.Int32)">
            <summary>
            等宽文字对齐
            </summary>
            <param name="str"></param>
            <param name="totalByteCount"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.TimeCrontab.Constants">
            <summary>
            TimeCrontab 模块常量
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.Constants.MaximumDateTimeValues">
            <summary>
            Cron 字段种类最大值
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.Constants.MinimumDateTimeValues">
            <summary>
            Cron 字段种类最大值
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.Constants.ExpectedFieldCounts">
            <summary>
            Cron 不同格式化类型字段数量
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.Constants.CronDays">
            <summary>
            配置 C# 中 <see cref="T:System.DayOfWeek"/> 枚举元素值
            </summary>
            <remarks>主要解决 C# 中该类型和 Cron 星期字段域不对应问题</remarks>
        </member>
        <member name="F:Furion.TimeCrontab.Constants.Days">
            <summary>
            定义 Cron 星期字段域值支持的星期英文缩写
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.Constants.Months">
            <summary>
            定义 Cron 月字段域值支持的星期英文缩写
            </summary>
        </member>
        <member name="T:Furion.TimeCrontab.CrontabFieldKind">
            <summary>
            Cron 字段种类
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.CrontabFieldKind.Second">
            <summary>
            秒
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.CrontabFieldKind.Minute">
            <summary>
            分
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.CrontabFieldKind.Hour">
            <summary>
            时
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.CrontabFieldKind.Day">
            <summary>
            天
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.CrontabFieldKind.Month">
            <summary>
            月
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.CrontabFieldKind.DayOfWeek">
            <summary>
            星期
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.CrontabFieldKind.Year">
            <summary>
            年
            </summary>
        </member>
        <member name="T:Furion.TimeCrontab.CronStringFormat">
            <summary>
            Cron 表达式格式化类型
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.CronStringFormat.Default">
            <summary>
            默认格式
            </summary>
            <remarks>书写顺序：分 时 天 月 周</remarks>
        </member>
        <member name="F:Furion.TimeCrontab.CronStringFormat.WithYears">
            <summary>
            带年份格式
            </summary>
            <remarks>书写顺序：分 时 天 月 周 年</remarks>
        </member>
        <member name="F:Furion.TimeCrontab.CronStringFormat.WithSeconds">
            <summary>
            带秒格式
            </summary>
            <remarks>书写顺序：秒 分 时 天 月 周</remarks>
        </member>
        <member name="F:Furion.TimeCrontab.CronStringFormat.WithSecondsAndYears">
            <summary>
            带秒和年格式
            </summary>
            <remarks>书写顺序：秒 分 时 天 月 周 年</remarks>
        </member>
        <member name="T:Furion.TimeCrontab.Crontab">
            <summary>
            Cron 表达式抽象类
            </summary>
            <remarks>主要将 Cron 表达式转换成 OOP 类进行操作</remarks>
            <summary>
            Cron 表达式抽象类
            </summary>
            <remarks>主要将 Cron 表达式转换成 OOP 类进行操作</remarks>
            <summary>
            Cron 表达式抽象类
            </summary>
            <remarks>主要将 Cron 表达式转换成 OOP 类进行操作</remarks>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.#ctor">
            <summary>
            构造函数
            </summary>
            <remarks>禁止外部 new 实例化</remarks>
        </member>
        <member name="P:Furion.TimeCrontab.Crontab.Parsers">
            <summary>
            Cron 字段解析器字典集合
            </summary>
        </member>
        <member name="P:Furion.TimeCrontab.Crontab.Format">
            <summary>
            Cron 表达式格式化类型
            </summary>
            <remarks>禁止运行时更改</remarks>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.Parse(System.String,Furion.TimeCrontab.CronStringFormat)">
            <summary>
            解析 Cron 表达式并转换成 <see cref="T:Furion.TimeCrontab.Crontab"/> 对象
            </summary>
            <param name="expression">Cron 表达式</param>
            <param name="format">Cron 表达式格式化类型</param>
            <returns><see cref="T:Furion.TimeCrontab.Crontab"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.TryParse(System.String,Furion.TimeCrontab.CronStringFormat)">
            <summary>
            解析 Cron 表达式并转换成 <see cref="T:Furion.TimeCrontab.Crontab"/> 对象
            </summary>
            <remarks>解析失败返回 default</remarks>
            <param name="expression">Cron 表达式</param>
            <param name="format">Cron 表达式格式化类型</param>
            <returns><see cref="T:Furion.TimeCrontab.Crontab"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.GetNextOccurrence(System.DateTime)">
            <summary>
            获取起始时间下一个发生时间
            </summary>
            <param name="baseTime">起始时间</param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.GetNextOccurrence(System.DateTime,System.DateTime)">
            <summary>
            获取特定时间范围下一个发生时间
            </summary>
            <param name="baseTime">起始时间</param>
            <param name="endTime">结束时间</param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.GetNextOccurrences(System.DateTime,System.DateTime)">
            <summary>
            获取特定时间范围所有发生时间
            </summary>
            <param name="baseTime">起始时间</param>
            <param name="endTime">结束时间</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.GetSleepMilliseconds(System.DateTime)">
            <summary>
            计算距离下一个发生时间相差毫秒数
            </summary>
            <param name="baseTime">起始时间</param>
            <returns></returns>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.ToString">
            <summary>
            将 <see cref="T:Furion.TimeCrontab.Crontab"/> 对象转换成 Cron 表达式字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.ParseToDictionary(System.String,Furion.TimeCrontab.CronStringFormat)">
            <summary>
            解析 Cron 表达式字段并存储其 所有发生值 字符解析器
            </summary>
            <param name="expression">Cron 表达式</param>
            <param name="format">Cron 表达式格式化类型</param>
            <returns><see cref="T:System.Collections.Generic.Dictionary`2"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.ParseField(System.String,Furion.TimeCrontab.CrontabFieldKind)">
            <summary>
            解析 Cron 单个字段域所有发生值 字符解析器
            </summary>
            <param name="field">字段值</param>
            <param name="kind">Cron 表达式格式化类型</param>
            <returns><see cref="T:System.Collections.Generic.List`1"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.ParseParser(System.String,Furion.TimeCrontab.CrontabFieldKind)">
            <summary>
            解析 Cron 字段域值中值
            </summary>
            <param name="parser">字段值中值</param>
            <param name="kind">Cron 表达式格式化类型</param>
            <returns><see cref="T:Furion.TimeCrontab.ICronParser"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.GetValue(System.String@,Furion.TimeCrontab.CrontabFieldKind)">
            <summary>
            将 Cron 字段值中值进一步解析
            </summary>
            <param name="parser">当前解析值</param>
            <param name="kind">Cron 表达式格式化类型</param>
            <returns><see cref="T:System.Int32"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.CheckForIllegalParsers(System.Collections.Generic.Dictionary{Furion.TimeCrontab.CrontabFieldKind,System.Collections.Generic.List{Furion.TimeCrontab.ICronParser}})">
            <summary>
            检查非法字符解析器，如 2 月没有 30 和 31 号
            </summary>
            <remarks>检查 2 月份是否存在 30 和 31 天的非法数值解析器</remarks>
            <param name="parsers">Cron 字段解析器字典集合</param>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.GetSpecificParsers(System.Collections.Generic.Dictionary{Furion.TimeCrontab.CrontabFieldKind,System.Collections.Generic.List{Furion.TimeCrontab.ICronParser}},Furion.TimeCrontab.CrontabFieldKind)">
            <summary>
            查找 Cron 字段类型所有具体值解析器
            </summary>
            <param name="parsers">Cron 字段解析器字典集合</param>
            <param name="kind">Cron 字段种类</param>
            <returns><see cref="T:System.Collections.Generic.List`1"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.InternalGetNextOccurence(System.DateTime,System.DateTime)">
            <summary>
            获取特定时间范围下一个发生时间
            </summary>
            <param name="baseTime">起始时间</param>
            <param name="endTime">结束时间</param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.Increment(System.Collections.Generic.IEnumerable{Furion.TimeCrontab.ITimeParser},System.Int32,System.Int32,System.Boolean@)">
            <summary>
            获取当前时间解析器下一个发生值
            </summary>
            <param name="parsers">解析器</param>
            <param name="value">当前值</param>
            <param name="defaultValue">默认值</param>
            <param name="overflow">控制秒、分钟、小时到达59秒/分和23小时开关</param>
            <returns><see cref="T:System.Int32"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.MinDate(System.DateTime,System.DateTime)">
            <summary>
            处理下一个发生时间边界值
            </summary>
            <remarks>如果发生时间大于终止时间，则返回终止时间，否则返回发生时间</remarks>
            <param name="newTime">下一个发生时间</param>
            <param name="endTime">终止时间</param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.IsMatch(System.DateTime)">
            <summary>
            判断 Cron 所有字段字符解析器是否都能匹配当前时间各个部分
            </summary>
            <param name="datetime">当前时间</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.IsMatch(System.DateTime,Furion.TimeCrontab.CrontabFieldKind)">
            <summary>
            判断当前 Cron 字段类型字符解析器和当前时间至少存在一种匹配
            </summary>
            <param name="datetime">当前时间</param>
            <param name="kind">Cron 字段种类</param>
            <returns></returns>
        </member>
        <member name="M:Furion.TimeCrontab.Crontab.JoinParsers(System.Collections.Generic.List{System.String},Furion.TimeCrontab.CrontabFieldKind)">
            <summary>
            将 Cron 字段解析器转换成字符串
            </summary>
            <param name="paramList">Cron 字段字符串集合</param>
            <param name="kind">Cron 字段种类</param>
        </member>
        <member name="F:Furion.TimeCrontab.Crontab.Secondly">
            <summary>
            表示每秒的 <see cref="T:Furion.TimeCrontab.Crontab"/> 对象
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.Crontab.Minutely">
            <summary>
            表示每分钟的 <see cref="T:Furion.TimeCrontab.Crontab"/> 对象
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.Crontab.Hourly">
            <summary>
            表示每小时开始 的 <see cref="T:Furion.TimeCrontab.Crontab"/> 对象
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.Crontab.Daily">
            <summary>
            表示每天（午夜）开始的 <see cref="T:Furion.TimeCrontab.Crontab"/> 对象
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.Crontab.Monthly">
            <summary>
            表示每月1号（午夜）开始的 <see cref="T:Furion.TimeCrontab.Crontab"/> 对象
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.Crontab.Weekly">
            <summary>
            表示每周日（午夜）开始的 <see cref="T:Furion.TimeCrontab.Crontab"/> 对象
            </summary>
        </member>
        <member name="F:Furion.TimeCrontab.Crontab.Yearly">
            <summary>
            表示每年1月1号（午夜）开始的 <see cref="T:Furion.TimeCrontab.Crontab"/> 对象
            </summary>
        </member>
        <member name="T:Furion.TimeCrontab.TimeCrontabException">
            <summary>
            TimeCrontab 模块异常类
            </summary>
        </member>
        <member name="M:Furion.TimeCrontab.TimeCrontabException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.TimeCrontab.TimeCrontabException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message">异常消息</param>
        </member>
        <member name="M:Furion.TimeCrontab.TimeCrontabException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message">异常消息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="T:Furion.TimeCrontab.DayOfWeekExtensions">
            <summary>
            <see cref="T:System.DayOfWeek"/> 拓展类
            </summary>
        </member>
        <member name="M:Furion.TimeCrontab.DayOfWeekExtensions.ToCronDayOfWeek(System.DayOfWeek)">
            <summary>
            将 C# 中 <see cref="T:System.DayOfWeek"/> 枚举元素转换成数值
            </summary>
            <param name="dayOfWeek"><see cref="T:System.DayOfWeek"/> 枚举</param>
            <returns><see cref="T:System.Int32"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.DayOfWeekExtensions.ToDayOfWeek(System.Int32)">
            <summary>
            将数值转换成 C# 中 <see cref="T:System.DayOfWeek"/> 枚举元素
            </summary>
            <param name="dayOfWeek"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.TimeCrontab.DayOfWeekExtensions.LastDayOfMonth(System.DayOfWeek,System.Int32,System.Int32)">
            <summary>
            获取当前年月最后一个星期几
            </summary>
            <param name="dayOfWeek">星期几，<see cref="T:System.DayOfWeek"/> 类型</param>
            <param name="year">年</param>
            <param name="month">月</param>
            <returns><see cref="T:System.Int32"/></returns>
        </member>
        <member name="T:Furion.TimeCrontab.AnyParser">
            <summary>
            Cron 字段值含 * 字符解析器
            </summary>
            <remarks>
            <para>* 表示任意值，该字符支持在 Cron 所有字段域中设置</para>
            </remarks>
        </member>
        <member name="M:Furion.TimeCrontab.AnyParser.#ctor(Furion.TimeCrontab.CrontabFieldKind)">
            <summary>
            构造函数
            </summary>
            <param name="kind">Cron 字段种类</param>
        </member>
        <member name="P:Furion.TimeCrontab.AnyParser.Kind">
            <summary>
            Cron 字段种类
            </summary>
        </member>
        <member name="M:Furion.TimeCrontab.AnyParser.IsMatch(System.DateTime)">
            <summary>
            判断当前时间是否符合 Cron 字段种类解析规则
            </summary>
            <param name="datetime">当前时间</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.AnyParser.Next(System.Int32)">
            <summary>
            获取 Cron 字段种类当前值的下一个发生值
            </summary>
            <param name="currentValue">时间值</param>
            <returns><see cref="T:System.Int32"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="M:Furion.TimeCrontab.AnyParser.First">
            <summary>
            获取 Cron 字段种类字段起始值
            </summary>
            <returns><see cref="T:System.Int32"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="M:Furion.TimeCrontab.AnyParser.ToString">
            <summary>
            将解析器转换成字符串输出
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Furion.TimeCrontab.BlankDayOfMonthOrWeekParser">
            <summary>
            Cron 字段值含 ? 字符解析器
            </summary>
            <remarks>
            <para>只能用在 Day 和 DayOfWeek 两个域使用。它也匹配域的任意值，但实际不会。因为 Day 和 DayOfWeek 会相互影响</para>
            <para>例如想在每月的 20 日触发调度，不管 20 日到底是星期几，则只能使用如下写法：13 15 20 * ?</para>
            <para>其中最后一位只能用 ?，而不能使用 *，如果使用 * 表示不管星期几都会触发，实际上并不是这样</para>
            <para>所以 ? 起着 Day 和 DayOfWeek 互斥性作用</para>
            <para>仅在 <see cref="F:Furion.TimeCrontab.CrontabFieldKind.Day"/> 或 <see cref="F:Furion.TimeCrontab.CrontabFieldKind.DayOfWeek"/> 字段域中使用</para>
            </remarks>
        </member>
        <member name="M:Furion.TimeCrontab.BlankDayOfMonthOrWeekParser.#ctor(Furion.TimeCrontab.CrontabFieldKind)">
            <summary>
             构造函数
            </summary>
            <param name="kind">Cron 字段种类</param>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="P:Furion.TimeCrontab.BlankDayOfMonthOrWeekParser.Kind">
            <summary>
            Cron 字段种类
            </summary>
        </member>
        <member name="M:Furion.TimeCrontab.BlankDayOfMonthOrWeekParser.IsMatch(System.DateTime)">
            <summary>
            判断当前时间是否符合 Cron 字段种类解析规则
            </summary>
            <param name="datetime">当前时间</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.BlankDayOfMonthOrWeekParser.Next(System.Int32)">
            <summary>
            获取 Cron 字段种类当前值的下一个发生值
            </summary>
            <param name="currentValue">时间值</param>
            <returns><see cref="T:System.Int32"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="M:Furion.TimeCrontab.BlankDayOfMonthOrWeekParser.First">
            <summary>
            获取 Cron 字段种类字段起始值
            </summary>
            <returns><see cref="T:System.Int32"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="M:Furion.TimeCrontab.BlankDayOfMonthOrWeekParser.ToString">
            <summary>
            将解析器转换成字符串输出
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Furion.TimeCrontab.ICronParser">
            <summary>
            Cron 字段字符解析器依赖接口
            </summary>
        </member>
        <member name="P:Furion.TimeCrontab.ICronParser.Kind">
            <summary>
            Cron 字段种类
            </summary>
        </member>
        <member name="M:Furion.TimeCrontab.ICronParser.IsMatch(System.DateTime)">
            <summary>
            判断当前时间是否符合 Cron 字段种类解析规则
            </summary>
            <param name="datetime">当前时间</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:Furion.TimeCrontab.ITimeParser">
            <summary>
            DateTime 时间解析器依赖接口
            </summary>
            <remarks>主要用于计算 DateTime 主要组成部分（秒，分，时，年）的下一个取值</remarks>
        </member>
        <member name="M:Furion.TimeCrontab.ITimeParser.Next(System.Int32)">
            <summary>
            获取 Cron 字段种类当前值的下一个发生值
            </summary>
            <param name="currentValue">时间值</param>
            <returns><see cref="T:System.Int32"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="M:Furion.TimeCrontab.ITimeParser.First">
            <summary>
            获取 Cron 字段种类字段起始值
            </summary>
            <returns><see cref="T:System.Int32"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="T:Furion.TimeCrontab.LastDayOfMonthParser">
            <summary>
            Cron 字段值含 L 字符解析器
            </summary>
            <remarks>
            <para>L 表示月中最后一天，仅在 <see cref="F:Furion.TimeCrontab.CrontabFieldKind.Day"/> 字段域中使用</para>
            </remarks>
        </member>
        <member name="M:Furion.TimeCrontab.LastDayOfMonthParser.#ctor(Furion.TimeCrontab.CrontabFieldKind)">
            <summary>
            构造函数
            </summary>
            <param name="kind">Cron 字段种类</param>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="P:Furion.TimeCrontab.LastDayOfMonthParser.Kind">
            <summary>
            Cron 字段种类
            </summary>
        </member>
        <member name="M:Furion.TimeCrontab.LastDayOfMonthParser.IsMatch(System.DateTime)">
            <summary>
            判断当前时间是否符合 Cron 字段种类解析规则
            </summary>
            <param name="datetime">当前时间</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.LastDayOfMonthParser.ToString">
            <summary>
            将解析器转换成字符串输出
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Furion.TimeCrontab.LastDayOfWeekInMonthParser">
            <summary>
            Cron 字段值含 {0}L 字符解析器
            </summary>
            <remarks>
            <para>表示月中最后一个星期{0}，仅在 <see cref="F:Furion.TimeCrontab.CrontabFieldKind.DayOfWeek"/> 字段域中使用</para>
            </remarks>
        </member>
        <member name="M:Furion.TimeCrontab.LastDayOfWeekInMonthParser.#ctor(System.Int32,Furion.TimeCrontab.CrontabFieldKind)">
            <summary>
            构造函数
            </summary>
            <param name="dayOfWeek">星期，0 = 星期天，7 = 星期六</param>
            <param name="kind">Cron 字段种类</param>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="P:Furion.TimeCrontab.LastDayOfWeekInMonthParser.Kind">
            <summary>
            Cron 字段种类
            </summary>
        </member>
        <member name="P:Furion.TimeCrontab.LastDayOfWeekInMonthParser.DayOfWeek">
            <summary>
            星期
            </summary>
        </member>
        <member name="P:Furion.TimeCrontab.LastDayOfWeekInMonthParser.DateTimeDayOfWeek">
            <summary>
            <see cref="P:Furion.TimeCrontab.LastDayOfWeekInMonthParser.DayOfWeek"/> 类型星期
            </summary>
        </member>
        <member name="M:Furion.TimeCrontab.LastDayOfWeekInMonthParser.IsMatch(System.DateTime)">
            <summary>
            判断当前时间是否符合 Cron 字段种类解析规则
            </summary>
            <param name="datetime">当前时间</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.LastDayOfWeekInMonthParser.ToString">
            <summary>
            将解析器转换成字符串输出
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Furion.TimeCrontab.LastWeekdayOfMonthParser">
            <summary>
            Cron 字段值含 LW 字符解析器
            </summary>
            <remarks>
            <para>表示月中最后一个工作日，即最后一个非周六周末的日期，仅在 <see cref="F:Furion.TimeCrontab.CrontabFieldKind.Day"/> 字段域中使用</para>
            </remarks>
        </member>
        <member name="M:Furion.TimeCrontab.LastWeekdayOfMonthParser.#ctor(Furion.TimeCrontab.CrontabFieldKind)">
            <summary>
            构造函数
            </summary>
            <param name="kind">Cron 字段种类</param>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="P:Furion.TimeCrontab.LastWeekdayOfMonthParser.Kind">
            <summary>
            Cron 字段种类
            </summary>
        </member>
        <member name="M:Furion.TimeCrontab.LastWeekdayOfMonthParser.IsMatch(System.DateTime)">
            <summary>
            判断当前时间是否符合 Cron 字段种类解析规则
            </summary>
            <param name="datetime">当前时间</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.LastWeekdayOfMonthParser.ToString">
            <summary>
            将解析器转换成字符串输出
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Furion.TimeCrontab.NearestWeekdayParser">
            <summary>
            Cron 字段值含 {0}W 字符解析器
            </summary>
            <remarks>
            <para>表示离指定日期最近的工作日，即最后一个非周六周末日，仅在 <see cref="F:Furion.TimeCrontab.CrontabFieldKind.Day"/> 字段域中使用</para>
            </remarks>
        </member>
        <member name="M:Furion.TimeCrontab.NearestWeekdayParser.#ctor(System.Int32,Furion.TimeCrontab.CrontabFieldKind)">
            <summary>
            构造函数
            </summary>
            <param name="specificValue">天数（具体值）</param>
            <param name="kind">Cron 字段种类</param>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException">Cron 字段种类</exception>
        </member>
        <member name="P:Furion.TimeCrontab.NearestWeekdayParser.Kind">
            <summary>
            Cron 字段种类
            </summary>
        </member>
        <member name="P:Furion.TimeCrontab.NearestWeekdayParser.SpecificValue">
            <summary>
            天数（具体值）
            </summary>
        </member>
        <member name="M:Furion.TimeCrontab.NearestWeekdayParser.IsMatch(System.DateTime)">
            <summary>
            判断当前时间是否符合 Cron 字段种类解析规则
            </summary>
            <param name="datetime">当前时间</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.NearestWeekdayParser.ToString">
            <summary>
            将解析器转换成字符串输出
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Furion.TimeCrontab.RangeParser">
            <summary>
            Cron 字段值含 - 字符解析器
            </summary>
            <remarks>
            <para>表示特定取值范围，如 1-5 或 1-5/2，该字符支持在 Cron 所有字段域中设置</para>
            </remarks>
        </member>
        <member name="M:Furion.TimeCrontab.RangeParser.#ctor(System.Int32,System.Int32,System.Nullable{System.Int32},Furion.TimeCrontab.CrontabFieldKind)">
            <summary>
            构造函数
            </summary>
            <param name="start">起始值</param>
            <param name="end">终止值</param>
            <param name="steps">步长</param>
            <param name="kind">Cron 字段种类</param>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="P:Furion.TimeCrontab.RangeParser.Kind">
            <summary>
            Cron 字段种类
            </summary>
        </member>
        <member name="P:Furion.TimeCrontab.RangeParser.Start">
            <summary>
            起始值
            </summary>
        </member>
        <member name="P:Furion.TimeCrontab.RangeParser.End">
            <summary>
            终止值
            </summary>
        </member>
        <member name="P:Furion.TimeCrontab.RangeParser.Steps">
            <summary>
            步长
            </summary>
        </member>
        <member name="P:Furion.TimeCrontab.RangeParser.SpecificParsers">
            <summary>
            所有满足范围计算的解析器
            </summary>
        </member>
        <member name="M:Furion.TimeCrontab.RangeParser.IsMatch(System.DateTime)">
            <summary>
            判断当前时间是否符合 Cron 字段种类解析规则
            </summary>
            <param name="datetime">当前时间</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.RangeParser.Next(System.Int32)">
            <summary>
            获取 Cron 字段种类当前值的下一个发生值
            </summary>
            <param name="currentValue">时间值</param>
            <returns><see cref="T:System.Int32"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="P:Furion.TimeCrontab.RangeParser.FirstCache">
            <summary>
            存储起始值，避免重复计算
            </summary>
        </member>
        <member name="M:Furion.TimeCrontab.RangeParser.First">
            <summary>
            获取 Cron 字段种类字段起始值
            </summary>
            <returns><see cref="T:System.Int32"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="M:Furion.TimeCrontab.RangeParser.ToString">
            <summary>
            将解析器转换成字符串输出
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.RangeParser.IsMatch(System.Int32)">
            <summary>
            判断是否符合范围或带步长范围解析规则
            </summary>
            <param name="evalValue">当前值</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:Furion.TimeCrontab.SpecificDayOfWeekInMonthParser">
            <summary>
            Cron 字段值含 {0}#{1} 字符解析器
            </summary>
            <remarks>
            <para>表示月中第{0}个星期{1}，仅在 <see cref="F:Furion.TimeCrontab.CrontabFieldKind.DayOfWeek"/> 字段域中使用</para>
            </remarks>
        </member>
        <member name="M:Furion.TimeCrontab.SpecificDayOfWeekInMonthParser.#ctor(System.Int32,System.Int32,Furion.TimeCrontab.CrontabFieldKind)">
            <summary>
            构造函数
            </summary>
            <param name="dayOfWeek">星期，0 = 星期天，7 = 星期六</param>
            <param name="weekNumber">月中第几个星期</param>
            <param name="kind">Cron 字段种类</param>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="P:Furion.TimeCrontab.SpecificDayOfWeekInMonthParser.Kind">
            <summary>
            Cron 字段种类
            </summary>
        </member>
        <member name="P:Furion.TimeCrontab.SpecificDayOfWeekInMonthParser.DayOfWeek">
            <summary>
            星期
            </summary>
        </member>
        <member name="P:Furion.TimeCrontab.SpecificDayOfWeekInMonthParser.DateTimeDayOfWeek">
            <summary>
            <see cref="P:Furion.TimeCrontab.SpecificDayOfWeekInMonthParser.DayOfWeek"/> 类型星期
            </summary>
        </member>
        <member name="P:Furion.TimeCrontab.SpecificDayOfWeekInMonthParser.WeekNumber">
            <summary>
            月中第几个星期
            </summary>
        </member>
        <member name="M:Furion.TimeCrontab.SpecificDayOfWeekInMonthParser.IsMatch(System.DateTime)">
            <summary>
            判断当前时间是否符合 Cron 字段种类解析规则
            </summary>
            <param name="datetime">当前时间</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.SpecificDayOfWeekInMonthParser.ToString">
            <summary>
            将解析器转换成字符串输出
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Furion.TimeCrontab.SpecificParser">
            <summary>
            Cron 字段值含 数值 字符解析器
            </summary>
            <remarks>
            <para>表示具体值，该字符支持在 Cron 所有字段域中设置</para>
            </remarks>
        </member>
        <member name="M:Furion.TimeCrontab.SpecificParser.#ctor(System.Int32,Furion.TimeCrontab.CrontabFieldKind)">
            <summary>
            构造函数
            </summary>
            <param name="specificValue">具体值</param>
            <param name="kind">Cron 字段种类</param>
        </member>
        <member name="P:Furion.TimeCrontab.SpecificParser.Kind">
            <summary>
            Cron 字段种类
            </summary>
        </member>
        <member name="P:Furion.TimeCrontab.SpecificParser.SpecificValue">
            <summary>
            具体值
            </summary>
        </member>
        <member name="M:Furion.TimeCrontab.SpecificParser.IsMatch(System.DateTime)">
            <summary>
            判断当前时间是否符合 Cron 字段种类解析规则
            </summary>
            <param name="datetime">当前时间</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.SpecificParser.Next(System.Int32)">
            <summary>
            获取 Cron 字段种类当前值的下一个发生值
            </summary>
            <param name="currentValue">时间值</param>
            <returns><see cref="T:System.Int32"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="M:Furion.TimeCrontab.SpecificParser.First">
            <summary>
            获取 Cron 字段种类字段起始值
            </summary>
            <returns><see cref="T:System.Int32"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="M:Furion.TimeCrontab.SpecificParser.ToString">
            <summary>
            将解析器转换成字符串输出
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.SpecificParser.ValidateBounds(System.Int32)">
            <summary>
            验证值有效性
            </summary>
            <param name="value">具体值</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:Furion.TimeCrontab.SpecificYearParser">
            <summary>
            Cron 字段值含 数值 字符解析器
            </summary>
            <remarks>
            <para>表示具体值，这里仅处理 <see cref="F:Furion.TimeCrontab.CrontabFieldKind.Year"/> 字段域</para>
            </remarks>
        </member>
        <member name="M:Furion.TimeCrontab.SpecificYearParser.#ctor(System.Int32,Furion.TimeCrontab.CrontabFieldKind)">
            <summary>
            构造函数
            </summary>
            <param name="specificValue">年（具体值)</param>
            <param name="kind">Cron 字段种类</param>
        </member>
        <member name="M:Furion.TimeCrontab.SpecificYearParser.Next(System.Int32)">
            <summary>
            获取 Cron 字段种类当前值的下一个发生值
            </summary>
            <param name="currentValue">时间值</param>
            <returns><see cref="T:System.Int32"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="T:Furion.TimeCrontab.StepParser">
            <summary>
            Cron 字段值含 / 字符解析器
            </summary>
            <remarks>
            <para>表示从某值开始，每隔固定值触发，该字符支持在 Cron 所有字段域中设置</para>
            </remarks>
        </member>
        <member name="M:Furion.TimeCrontab.StepParser.#ctor(System.Int32,System.Int32,Furion.TimeCrontab.CrontabFieldKind)">
            <summary>
            构造函数
            </summary>
            <param name="start">起始值</param>
            <param name="steps">步长</param>
            <param name="kind">Cron 字段种类</param>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="P:Furion.TimeCrontab.StepParser.Kind">
            <summary>
            Cron 字段种类
            </summary>
        </member>
        <member name="P:Furion.TimeCrontab.StepParser.Start">
            <summary>
            起始值
            </summary>
        </member>
        <member name="P:Furion.TimeCrontab.StepParser.Steps">
            <summary>
            步长
            </summary>
        </member>
        <member name="P:Furion.TimeCrontab.StepParser.SpecificParsers">
            <summary>
            所有满足间隔步长计算的解析器
            </summary>
        </member>
        <member name="M:Furion.TimeCrontab.StepParser.IsMatch(System.DateTime)">
            <summary>
            判断当前时间是否符合 Cron 字段种类解析规则
            </summary>
            <param name="datetime">当前时间</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.StepParser.Next(System.Int32)">
            <summary>
            获取 Cron 字段种类当前值的下一个发生值
            </summary>
            <param name="currentValue">时间值</param>
            <returns><see cref="T:System.Int32"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="P:Furion.TimeCrontab.StepParser.FirstCache">
            <summary>
            存储起始值，避免重复计算
            </summary>
        </member>
        <member name="M:Furion.TimeCrontab.StepParser.First">
            <summary>
            获取 Cron 字段种类字段起始值
            </summary>
            <returns><see cref="T:System.Int32"/></returns>
            <exception cref="T:Furion.TimeCrontab.TimeCrontabException"></exception>
        </member>
        <member name="M:Furion.TimeCrontab.StepParser.ToString">
            <summary>
            将解析器转换成字符串输出
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.TimeCrontab.StepParser.IsMatch(System.Int32)">
            <summary>
            判断是否符合间隔或带步长间隔解析规则
            </summary>
            <param name="evalValue">当前值</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:Furion.UnifyResult.UnifyModelAttribute">
            <summary>
            规范化模型特性
            </summary>
        </member>
        <member name="M:Furion.UnifyResult.UnifyModelAttribute.#ctor(System.Type)">
            <summary>
            规范化模型
            </summary>
            <param name="modelType"></param>
        </member>
        <member name="P:Furion.UnifyResult.UnifyModelAttribute.ModelType">
            <summary>
            模型类型（泛型）
            </summary>
        </member>
        <member name="T:Furion.UnifyResult.SucceededUnifyResultFilter">
            <summary>
            规范化结构（请求成功）过滤器
            </summary>
        </member>
        <member name="F:Furion.UnifyResult.SucceededUnifyResultFilter.FilterOrder">
            <summary>
            过滤器排序
            </summary>
        </member>
        <member name="P:Furion.UnifyResult.SucceededUnifyResultFilter.Order">
            <summary>
            排序属性
            </summary>
        </member>
        <member name="M:Furion.UnifyResult.SucceededUnifyResultFilter.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            处理规范化结果
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.UnifyResult.RESTfulResult`1">
            <summary>
            RESTful 风格结果集
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Furion.UnifyResult.RESTfulResult`1.StatusCode">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Furion.UnifyResult.RESTfulResult`1.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:Furion.UnifyResult.RESTfulResult`1.Succeeded">
            <summary>
            执行成功
            </summary>
        </member>
        <member name="P:Furion.UnifyResult.RESTfulResult`1.Errors">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:Furion.UnifyResult.RESTfulResult`1.Extras">
            <summary>
            附加数据
            </summary>
        </member>
        <member name="P:Furion.UnifyResult.RESTfulResult`1.Timestamp">
            <summary>
            时间戳
            </summary>
        </member>
        <member name="T:Furion.UnifyResult.UnifyMetadata">
            <summary>
            规范化元数据
            </summary>
        </member>
        <member name="P:Furion.UnifyResult.UnifyMetadata.ProviderName">
            <summary>
            提供器名称
            </summary>
        </member>
        <member name="P:Furion.UnifyResult.UnifyMetadata.ProviderType">
            <summary>
            提供器类型
            </summary>
        </member>
        <member name="P:Furion.UnifyResult.UnifyMetadata.ResultType">
            <summary>
            统一的结果类型
            </summary>
        </member>
        <member name="T:Furion.UnifyResult.UnifyResultStatusCodesMiddleware">
            <summary>
            状态码中间件
            </summary>
        </member>
        <member name="F:Furion.UnifyResult.UnifyResultStatusCodesMiddleware._next">
            <summary>
            请求委托
            </summary>
        </member>
        <member name="M:Furion.UnifyResult.UnifyResultStatusCodesMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            构造函数
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:Furion.UnifyResult.UnifyResultStatusCodesMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            中间件执行方法
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.UnifyResult.UnifyResultSettingsOptions">
            <summary>
            规范化配置选项
            </summary>
        </member>
        <member name="P:Furion.UnifyResult.UnifyResultSettingsOptions.Return200StatusCodes">
            <summary>
            设置返回 200 状态码列表
            <para>默认：401，403，如果设置为 null，则标识所有状态码都返回 200 </para>
            </summary>
        </member>
        <member name="P:Furion.UnifyResult.UnifyResultSettingsOptions.AdaptStatusCodes">
            <summary>
            适配（篡改）Http 状态码（只支持短路状态码，比如 401，403，500 等）
            </summary>
        </member>
        <member name="P:Furion.UnifyResult.UnifyResultSettingsOptions.SupportMvcController">
            <summary>
            是否支持 MVC 控制台规范化处理
            </summary>
        </member>
        <member name="M:Furion.UnifyResult.UnifyResultSettingsOptions.PostConfigure(Furion.UnifyResult.UnifyResultSettingsOptions,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            选项后期配置
            </summary>
            <param name="options"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Furion.UnifyResult.IUnifyResultProvider">
            <summary>
            规范化结果提供器
            </summary>
        </member>
        <member name="M:Furion.UnifyResult.IUnifyResultProvider.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext,Furion.FriendlyException.ExceptionMetadata)">
            <summary>
            异常返回值
            </summary>
            <param name="context"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.UnifyResult.IUnifyResultProvider.OnSucceeded(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext,System.Object)">
            <summary>
            成功返回值
            </summary>
            <param name="context"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.UnifyResult.IUnifyResultProvider.OnValidateFailed(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Furion.DataValidation.ValidationMetadata)">
            <summary>
            验证失败返回值
            </summary>
            <param name="context"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.UnifyResult.IUnifyResultProvider.OnResponseStatusCodes(Microsoft.AspNetCore.Http.HttpContext,System.Int32,Furion.UnifyResult.UnifyResultSettingsOptions)">
            <summary>
            拦截返回状态码
            </summary>
            <param name="context"></param>
            <param name="statusCode"></param>
            <param name="unifyResultSettings"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.UnifyResult.RESTfulResultProvider">
            <summary>
            RESTful 风格返回值
            </summary>
        </member>
        <member name="M:Furion.UnifyResult.RESTfulResultProvider.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext,Furion.FriendlyException.ExceptionMetadata)">
            <summary>
            异常返回值
            </summary>
            <param name="context"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.UnifyResult.RESTfulResultProvider.OnSucceeded(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext,System.Object)">
            <summary>
            成功返回值
            </summary>
            <param name="context"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.UnifyResult.RESTfulResultProvider.OnValidateFailed(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Furion.DataValidation.ValidationMetadata)">
            <summary>
            验证失败/业务异常返回值
            </summary>
            <param name="context"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.UnifyResult.RESTfulResultProvider.OnResponseStatusCodes(Microsoft.AspNetCore.Http.HttpContext,System.Int32,Furion.UnifyResult.UnifyResultSettingsOptions)">
            <summary>
            特定状态码返回值
            </summary>
            <param name="context"></param>
            <param name="statusCode"></param>
            <param name="unifyResultSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.UnifyResult.RESTfulResultProvider.RESTfulResult(System.Int32,System.Boolean,System.Object,System.Object)">
            <summary>
            返回 RESTful 风格结果集
            </summary>
            <param name="statusCode"></param>
            <param name="succeeded"></param>
            <param name="data"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.UnifyResult.UnifyContext">
            <summary>
            规范化结果上下文
            </summary>
        </member>
        <member name="F:Furion.UnifyResult.UnifyContext.EnabledUnifyHandler">
            <summary>
            是否启用规范化结果
            </summary>
        </member>
        <member name="F:Furion.UnifyResult.UnifyContext.UnifyResultExtrasKey">
            <summary>
            规范化结果额外数据键
            </summary>
        </member>
        <member name="F:Furion.UnifyResult.UnifyContext.UnifyProviders">
            <summary>
            规范化结果提供器
            </summary>
        </member>
        <member name="M:Furion.UnifyResult.UnifyContext.GetExceptionMetadata(Microsoft.AspNetCore.Mvc.ActionContext)">
            <summary>
            获取异常元数据
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.UnifyResult.UnifyContext.Fill(System.Object)">
            <summary>
            填充附加信息
            </summary>
            <param name="extras"></param>
        </member>
        <member name="M:Furion.UnifyResult.UnifyContext.Take">
            <summary>
            读取附加信息
            </summary>
        </member>
        <member name="M:Furion.UnifyResult.UnifyContext.SetResponseStatusCodes(Microsoft.AspNetCore.Http.HttpContext,System.Int32,Furion.UnifyResult.UnifyResultSettingsOptions)">
            <summary>
            设置响应状态码
            </summary>
            <param name="context"></param>
            <param name="statusCode"></param>
            <param name="unifyResultSettings"></param>
        </member>
        <member name="M:Furion.UnifyResult.UnifyContext.CheckSucceededNonUnify(System.Reflection.MethodInfo,Furion.UnifyResult.IUnifyResultProvider@,System.Boolean)">
            <summary>
            检查请求成功是否进行规范化处理
            </summary>
            <param name="method"></param>
            <param name="unifyResult"></param>
            <param name="isWebRequest"></param>
            <returns>返回 true 跳过处理，否则进行规范化处理</returns>
        </member>
        <member name="M:Furion.UnifyResult.UnifyContext.CheckFailedNonUnify(System.Reflection.MethodInfo,Furion.UnifyResult.IUnifyResultProvider@)">
            <summary>
            检查请求失败（验证失败、抛异常）是否进行规范化处理
            </summary>
            <param name="method"></param>
            <param name="unifyResult"></param>
            <returns>返回 true 跳过处理，否则进行规范化处理</returns>
        </member>
        <member name="M:Furion.UnifyResult.UnifyContext.CheckStatusCodeNonUnify(Microsoft.AspNetCore.Http.HttpContext,Furion.UnifyResult.IUnifyResultProvider@)">
            <summary>
            检查短路状态码（>=400）是否进行规范化处理
            </summary>
            <param name="context"></param>
            <param name="unifyResult"></param>
            <returns>返回 true 跳过处理，否则进行规范化处理</returns>
        </member>
        <member name="M:Furion.UnifyResult.UnifyContext.CheckSupportMvcController(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor,Furion.UnifyResult.UnifyResultSettingsOptions@)">
            <summary>
            判断是否支持 Mvc 控制器规范化处理
            </summary>
            <param name="httpContext"></param>
            <param name="actionDescriptor"></param>
            <param name="unifyResultSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.UnifyResult.UnifyContext.CheckVaildResult(Microsoft.AspNetCore.Mvc.IActionResult,System.Object@)">
            <summary>
            检查是否是有效的结果（可进行规范化的结果）
            </summary>
            <param name="result"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.UnifyResult.UnifyContext.GetMethodUnityMetadata(System.Reflection.MethodInfo)">
            <summary>
            获取方法规范化元数据
            </summary>
            <remarks>如果追求性能，这里理应缓存起来，避免每次请求去检测</remarks>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.DatabaseAccessor.ManualCommitAttribute">
            <summary>
            手动提交标识
            <para>默认情况下，框架会自动在方法结束之时调用 SaveChanges 方法，贴此特性可以忽略该行为</para>
            </summary>
        </member>
        <member name="T:Furion.DatabaseAccessor.UnitOfWorkAttribute">
            <summary>
            工作单元配置特性
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.UnitOfWorkAttribute.EnsureTransaction">
            <summary>
            确保事务可用
            <para>此方法为了解决静态类方式操作数据库的问题</para>
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.UnitOfWorkAttribute.UseAmbientTransaction">
            <summary>
            是否使用分布式环境事务
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.UnitOfWorkAttribute.TransactionScope">
            <summary>
            分布式环境事务范围
            </summary>
            <remarks><see cref="P:Furion.DatabaseAccessor.UnitOfWorkAttribute.UseAmbientTransaction"/> 为 true 有效</remarks>
        </member>
        <member name="P:Furion.DatabaseAccessor.UnitOfWorkAttribute.TransactionIsolationLevel">
            <summary>
            分布式环境事务隔离级别
            </summary>
            <remarks><see cref="P:Furion.DatabaseAccessor.UnitOfWorkAttribute.UseAmbientTransaction"/> 为 true 有效</remarks>
        </member>
        <member name="P:Furion.DatabaseAccessor.UnitOfWorkAttribute.TransactionTimeout">
            <summary>
            分布式环境事务超时时间
            </summary>
            <remarks>单位秒</remarks>
        </member>
        <member name="P:Furion.DatabaseAccessor.UnitOfWorkAttribute.TransactionScopeAsyncFlow">
            <summary>
            支持分布式环境事务异步流
            </summary>
            <remarks><see cref="P:Furion.DatabaseAccessor.UnitOfWorkAttribute.UseAmbientTransaction"/> 为 true 有效</remarks>
        </member>
        <member name="F:Furion.DatabaseAccessor.UnitOfWorkAttribute.MiniProfilerCategory">
            <summary>
             MiniProfiler 分类名
            </summary>
        </member>
        <member name="F:Furion.DatabaseAccessor.UnitOfWorkAttribute.FilterOrder">
            <summary>
            过滤器排序
            </summary>
        </member>
        <member name="P:Furion.DatabaseAccessor.UnitOfWorkAttribute.Order">
            <summary>
            排序属性
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.UnitOfWorkAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.UnitOfWorkAttribute.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="ensureTransaction"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.UnitOfWorkAttribute.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            拦截请求
            </summary>
            <param name="context">动作方法上下文</param>
            <param name="next">中间件委托</param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.UnitOfWorkAttribute.OnPageHandlerSelectionAsync(Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext)">
            <summary>
            模型绑定拦截
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.UnitOfWorkAttribute.OnPageHandlerExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext,Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutionDelegate)">
            <summary>
            拦截请求
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.UnitOfWorkAttribute.CreateTransactionScope(Microsoft.AspNetCore.Mvc.Filters.FilterContext)">
            <summary>
            创建分布式环境事务
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.DatabaseAccessor.UnitOfWorkAttribute.BeginTransaction(Microsoft.AspNetCore.Mvc.Filters.FilterContext,System.Reflection.MethodInfo,Furion.DatabaseAccessor.IUnitOfWork@,Furion.DatabaseAccessor.UnitOfWorkAttribute@)">
            <summary>
            开始事务
            </summary>
            <param name="context"></param>
            <param name="method"></param>
            <param name="_unitOfWork"></param>
            <param name="unitOfWorkAttribute"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.UnitOfWorkAttribute.CommitTransaction(Microsoft.AspNetCore.Mvc.Filters.FilterContext,Furion.DatabaseAccessor.IUnitOfWork,Furion.DatabaseAccessor.UnitOfWorkAttribute,Microsoft.AspNetCore.Mvc.Filters.FilterContext)">
            <summary>
            提交事务
            </summary>
            <param name="context"></param>
            <param name="_unitOfWork"></param>
            <param name="unitOfWorkAttribute"></param>
            <param name="resultContext"></param>
        </member>
        <member name="T:Furion.DatabaseAccessor.IUnitOfWork">
            <summary>
            工作单元依赖接口
            </summary>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUnitOfWork.BeginTransaction(Microsoft.AspNetCore.Mvc.Filters.FilterContext,Furion.DatabaseAccessor.UnitOfWorkAttribute)">
            <summary>
            开启工作单元处理
            </summary>
            <param name="context"></param>
            <param name="unitOfWork"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUnitOfWork.CommitTransaction(Microsoft.AspNetCore.Mvc.Filters.FilterContext,Furion.DatabaseAccessor.UnitOfWorkAttribute)">
            <summary>
            提交工作单元处理
            </summary>
            <param name="resultContext"></param>
            <param name="unitOfWork"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUnitOfWork.RollbackTransaction(Microsoft.AspNetCore.Mvc.Filters.FilterContext,Furion.DatabaseAccessor.UnitOfWorkAttribute)">
            <summary>
            回滚工作单元处理
            </summary>
            <param name="resultContext"></param>
            <param name="unitOfWork"></param>
        </member>
        <member name="M:Furion.DatabaseAccessor.IUnitOfWork.OnCompleted(Microsoft.AspNetCore.Mvc.Filters.FilterContext,Microsoft.AspNetCore.Mvc.Filters.FilterContext)">
            <summary>
            执行完毕（无论成功失败）
            </summary>
            <param name="context"></param>
            <param name="resultContext"></param>
        </member>
        <member name="T:Furion.ViewEngine.IViewEngineOptionsBuilder">
            <summary>
            视图引擎选项构建器
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.IViewEngineOptionsBuilder.Options">
            <summary>
            视图编译选项
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineOptionsBuilder.AddAssemblyReferenceByName(System.String)">
            <summary>
            添加程序集引用
            </summary>
            <param name="assemblyName"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineOptionsBuilder.AddAssemblyReference(System.Reflection.Assembly)">
            <summary>
            添加程序集引用
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineOptionsBuilder.AddAssemblyReference(System.Type)">
            <summary>
            添加程序集引用
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineOptionsBuilder.AddMetadataReference(Microsoft.CodeAnalysis.MetadataReference)">
            <summary>
            添加元数据引用
            </summary>
            <param name="reference"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineOptionsBuilder.AddUsing(System.String)">
            <summary>
            添加 Using
            </summary>
            <param name="namespaceName"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineOptionsBuilder.Inherits(System.Type)">
            <summary>
            添加继承类型
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:Furion.ViewEngine.ViewEngineOptionsBuilder">
            <summary>
            视图编译构建器
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.ViewEngineOptionsBuilder.Options">
            <summary>
            视图编译选项
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineOptionsBuilder.#ctor(Furion.ViewEngine.ViewEngineOptions)">
            <summary>
            构造函数
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineOptionsBuilder.AddAssemblyReferenceByName(System.String)">
            <summary>
            添加程序集引用
            </summary>
            <param name="assemblyName"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineOptionsBuilder.AddAssemblyReference(System.Reflection.Assembly)">
            <summary>
            添加程序集引用
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineOptionsBuilder.AddAssemblyReference(System.Type)">
            <summary>
            添加程序集引用
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineOptionsBuilder.AddMetadataReference(Microsoft.CodeAnalysis.MetadataReference)">
            <summary>
            添加元数据引用
            </summary>
            <param name="reference"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineOptionsBuilder.AddUsing(System.String)">
            <summary>
            添加 Using
            </summary>
            <param name="namespaceName"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineOptionsBuilder.Inherits(System.Type)">
            <summary>
            添加继承类型
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineOptionsBuilder.RenderTypeName(System.Type)">
            <summary>
            渲染类型名
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.ViewEngine.IViewEngine">
            <summary>
            视图引擎接口
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngine.RunCompile(System.String,System.Object,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译并运行
            </summary>
            <param name="content"></param>
            <param name="model"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngine.RunCompileAsync(System.String,System.Object,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译并运行
            </summary>
            <param name="content"></param>
            <param name="model"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngine.RunCompile``1(System.String,``0,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译并运行
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content"></param>
            <param name="model"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngine.RunCompileAsync``1(System.String,``0,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译并运行
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content"></param>
            <param name="model"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngine.RunCompileFromCached(System.String,System.Object,System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            通过缓存解析模板
            </summary>
            <param name="content"></param>
            <param name="model"></param>
            <param name="cacheFileName"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngine.RunCompileFromCachedAsync(System.String,System.Object,System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            通过缓存解析模板
            </summary>
            <param name="content"></param>
            <param name="model"></param>
            <param name="cacheFileName"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngine.RunCompileFromCached``1(System.String,``0,System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            通过缓存解析模板
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content"></param>
            <param name="model"></param>
            <param name="cacheFileName"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngine.RunCompileFromCachedAsync``1(System.String,``0,System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            通过缓存解析模板
            </summary>
            <param name="content"></param>
            <param name="model"></param>
            <param name="cacheFileName"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngine.Compile(System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译模板
            </summary>
            <param name="content"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngine.CompileAsync(System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译模板
            </summary>
            <param name="content"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngine.Compile``1(System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译模板
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngine.CompileAsync``1(System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译模板
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.ViewEngine.ViewEngine">
            <summary>
            视图引擎实现类
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.RunCompile(System.String,System.Object,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译并运行
            </summary>
            <param name="content"></param>
            <param name="model"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.RunCompileAsync(System.String,System.Object,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译并运行
            </summary>
            <param name="content"></param>
            <param name="model"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.RunCompile``1(System.String,``0,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译并运行
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content"></param>
            <param name="model"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.RunCompileAsync``1(System.String,``0,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译并运行
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content"></param>
            <param name="model"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.RunCompileFromCached(System.String,System.Object,System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            通过缓存解析模板
            </summary>
            <param name="content"></param>
            <param name="model"></param>
            <param name="cacheFileName"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.RunCompileFromCachedAsync(System.String,System.Object,System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            通过缓存解析模板
            </summary>
            <param name="content"></param>
            <param name="model"></param>
            <param name="cacheFileName"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.RunCompileFromCached``1(System.String,``0,System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            通过缓存解析模板
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content"></param>
            <param name="model"></param>
            <param name="cacheFileName"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.RunCompileFromCachedAsync``1(System.String,``0,System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            通过缓存解析模板
            </summary>
            <param name="content"></param>
            <param name="model"></param>
            <param name="cacheFileName"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.Compile(System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译模板
            </summary>
            <param name="content"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.CompileAsync(System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译模板
            </summary>
            <param name="content"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.Compile``1(System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译模板
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.CompileAsync``1(System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译模板
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.CreateAndCompileToStream(System.String,Furion.ViewEngine.ViewEngineOptions)">
            <summary>
            将模板内容编译并输出内存流
            </summary>
            <param name="templateSource"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngine.WriteDirectives(System.String,Furion.ViewEngine.ViewEngineOptions)">
            <summary>
            写入Razor 命令
            </summary>
            <param name="content"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.ViewEngine.ViewEngineException">
            <summary>
            视图引擎异常类
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Furion.ViewEngine.ViewEngineTemplateException">
            <summary>
            视图引擎模板编译异常类
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplateException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplateException.#ctor(System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="P:Furion.ViewEngine.ViewEngineTemplateException.Errors">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.ViewEngineTemplateException.GeneratedCode">
            <summary>
            生成的代码
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.ViewEngineTemplateException.Message">
            <summary>
            重写异常消息
            </summary>
        </member>
        <member name="T:Furion.ViewEngine.Extensions.ViewEngineStringExtensions">
            <summary>
            字符串视图引擎拓展
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.Extensions.ViewEngineStringExtensions.SetTemplateModel``1(System.String,``0)">
            <summary>
            设置模板数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="template"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.Extensions.ViewEngineStringExtensions.SetTemplateModel(System.String,System.Object)">
            <summary>
            设置模板数据
            </summary>
            <param name="template"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.Extensions.ViewEngineStringExtensions.SetTemplateOptionsBuilder(System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            设置模板构建选项
            </summary>
            <param name="template"></param>
            <param name="optionsBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.Extensions.ViewEngineStringExtensions.SetTemplateCachedFileName(System.String,System.String)">
            <summary>
            设置模板缓存文件名（不含拓展名）
            </summary>
            <param name="template"></param>
            <param name="cachedFileName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.Extensions.ViewEngineStringExtensions.SetViewEngineScoped(System.String,System.IServiceProvider)">
            <summary>
            视图模板服务作用域
            </summary>
            <param name="template"></param>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.Extensions.ViewEngineStringExtensions.RunCompile(System.String,System.Object,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译并运行
            </summary>
            <param name="template"></param>
            <param name="model"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.Extensions.ViewEngineStringExtensions.RunCompileAsync(System.String,System.Object,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译并运行
            </summary>
            <param name="template"></param>
            <param name="model"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.Extensions.ViewEngineStringExtensions.RunCompile``1(System.String,``0,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译并运行
            </summary>
            <typeparam name="T"></typeparam>
            <param name="template"></param>
            <param name="model"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.Extensions.ViewEngineStringExtensions.RunCompileAsync``1(System.String,``0,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            编译并运行
            </summary>
            <typeparam name="T"></typeparam>
            <param name="template"></param>
            <param name="model"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.Extensions.ViewEngineStringExtensions.RunCompileFromCached(System.String,System.Object,System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            通过缓存解析模板
            </summary>
            <param name="template"></param>
            <param name="model"></param>
            <param name="cachedFileName"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.Extensions.ViewEngineStringExtensions.RunCompileFromCachedAsync(System.String,System.Object,System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            通过缓存解析模板
            </summary>
            <param name="template"></param>
            <param name="model"></param>
            <param name="cachedFileName"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.Extensions.ViewEngineStringExtensions.RunCompileFromCached``1(System.String,``0,System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            通过缓存解析模板
            </summary>
            <typeparam name="T"></typeparam>
            <param name="template"></param>
            <param name="model"></param>
            <param name="cachedFileName"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.Extensions.ViewEngineStringExtensions.RunCompileFromCachedAsync``1(System.String,``0,System.String,System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            通过缓存解析模板
            </summary>
            <param name="template"></param>
            <param name="model"></param>
            <param name="cachedFileName"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.ViewEngine.AnonymousTypeWrapper">
            <summary>
            匿名类型包装器
            </summary>
        </member>
        <member name="F:Furion.ViewEngine.AnonymousTypeWrapper.model">
            <summary>
            匿名模型
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.AnonymousTypeWrapper.#ctor(System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:Furion.ViewEngine.AnonymousTypeWrapper.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            获取成员信息
            </summary>
            <param name="binder"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.ViewEngine.Penetrates">
            <summary>
            常量、公共方法配置类
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.Penetrates.GetTemplateFileName(System.String)">
            <summary>
            获取模板文件名
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.ViewEngine.ViewEnginePart">
            <summary>
            字符串模板执行部件
            </summary>
            <summary>
            字符串模板执行部件
            </summary>
            <summary>
            字符串模板执行部件
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEnginePart.Default">
            <summary>
            静态缺省 视图 部件
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.ViewEnginePart.Template">
            <summary>
            字符串模板
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.ViewEnginePart.TemplateOptionsBuilder">
            <summary>
            视图配置选项
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.ViewEnginePart.TemplateModel">
            <summary>
            模型数据
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.ViewEnginePart.TemplateCachedFileName">
            <summary>
            模板缓存名称（不含拓展名）
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.ViewEnginePart.ViewEngineScoped">
            <summary>
            视图模板服务作用域
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEnginePart.RunCompile">
            <summary>
            编译并运行
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEnginePart.RunCompileAsync">
            <summary>
            编译并运行
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEnginePart.RunCompileFromCached">
            <summary>
            通过缓存解析模板
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEnginePart.RunCompileFromCachedAsync">
            <summary>
            通过缓存解析模板
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEnginePart.InvokeRunCompileMethod(System.String,System.Boolean)">
            <summary>
            执行模板方法
            </summary>
            <param name="methodName"></param>
            <param name="isCached"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEnginePart.GetViewEngine">
            <summary>
            获取视图引擎对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEnginePart.SetTemplate(System.String)">
            <summary>
            设置模板
            </summary>
            <param name="template"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEnginePart.SetTemplateModel``1(``0)">
            <summary>
            设置模板数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEnginePart.SetTemplateModel(System.Object)">
            <summary>
            设置模板数据
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEnginePart.SetTemplateOptionsBuilder(System.Action{Furion.ViewEngine.IViewEngineOptionsBuilder})">
            <summary>
            设置模板构建选项
            </summary>
            <param name="optionsBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEnginePart.SetTemplateCachedFileName(System.String)">
            <summary>
            设置模板缓存文件名（不含拓展名）
            </summary>
            <param name="cachedFileName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEnginePart.SetViewEngineScoped(System.IServiceProvider)">
            <summary>
            视图模板服务作用域
            </summary>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.ViewEngine.IViewEngineModel">
            <summary>
            视图引擎模板模型接口
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.IViewEngineModel.Model">
            <summary>
            模型
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineModel.WriteLiteral(System.String)">
            <summary>
            写入字面量
            </summary>
            <param name="literal"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineModel.WriteLiteralAsync(System.String)">
            <summary>
            写入字面量
            </summary>
            <param name="literal"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineModel.Write(System.Object)">
            <summary>
            写入对象
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineModel.WriteAsync(System.Object)">
            <summary>
            写入对象
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineModel.BeginWriteAttribute(System.String,System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            开始写入特性
            </summary>
            <param name="name"></param>
            <param name="prefix"></param>
            <param name="prefixOffset"></param>
            <param name="suffix"></param>
            <param name="suffixOffset"></param>
            <param name="attributeValuesCount"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineModel.BeginWriteAttributeAsync(System.String,System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            开始写入特性
            </summary>
            <param name="name"></param>
            <param name="prefix"></param>
            <param name="prefixOffset"></param>
            <param name="suffix"></param>
            <param name="suffixOffset"></param>
            <param name="attributeValuesCount"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineModel.WriteAttributeValue(System.String,System.Int32,System.Object,System.Int32,System.Int32,System.Boolean)">
            <summary>
            写入特性值
            </summary>
            <param name="prefix"></param>
            <param name="prefixOffset"></param>
            <param name="value"></param>
            <param name="valueOffset"></param>
            <param name="valueLength"></param>
            <param name="isLiteral"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineModel.WriteAttributeValueAsync(System.String,System.Int32,System.Object,System.Int32,System.Int32,System.Boolean)">
            <summary>
            写入特性值
            </summary>
            <param name="prefix"></param>
            <param name="prefixOffset"></param>
            <param name="value"></param>
            <param name="valueOffset"></param>
            <param name="valueLength"></param>
            <param name="isLiteral"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineModel.EndWriteAttribute">
            <summary>
            结束写入特性
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineModel.EndWriteAttributeAsync">
            <summary>
            结束写入特性
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineModel.Execute">
            <summary>
            执行
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineModel.ExecuteAsync">
            <summary>
            执行
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineModel.Result">
            <summary>
            获取结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineModel.ResultAsync">
            <summary>
            获取结果
            </summary>
            <returns></returns>
        </member>
        <member name="T:Furion.ViewEngine.ViewEngineModel">
            <summary>
            视图引擎模板模型实现类
            </summary>
        </member>
        <member name="F:Furion.ViewEngine.ViewEngineModel.stringBuilder">
            <summary>
            字符串构建器
            </summary>
        </member>
        <member name="F:Furion.ViewEngine.ViewEngineModel.attributeSuffix">
            <summary>
            特性前缀
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.ViewEngineModel.Model">
            <summary>
            模型
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineModel.WriteLiteral(System.String)">
            <summary>
            写入字面量
            </summary>
            <param name="literal"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineModel.WriteLiteralAsync(System.String)">
            <summary>
            写入字面量
            </summary>
            <param name="literal"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineModel.Write(System.Object)">
            <summary>
            写入对象
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineModel.WriteAsync(System.Object)">
            <summary>
            写入对象
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineModel.BeginWriteAttribute(System.String,System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            写入特性
            </summary>
            <param name="name"></param>
            <param name="prefix"></param>
            <param name="prefixOffset"></param>
            <param name="suffix"></param>
            <param name="suffixOffset"></param>
            <param name="attributeValuesCount"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineModel.BeginWriteAttributeAsync(System.String,System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            写入特性
            </summary>
            <param name="name"></param>
            <param name="prefix"></param>
            <param name="prefixOffset"></param>
            <param name="suffix"></param>
            <param name="suffixOffset"></param>
            <param name="attributeValuesCount"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineModel.WriteAttributeValue(System.String,System.Int32,System.Object,System.Int32,System.Int32,System.Boolean)">
            <summary>
            写入特性值
            </summary>
            <param name="prefix"></param>
            <param name="prefixOffset"></param>
            <param name="value"></param>
            <param name="valueOffset"></param>
            <param name="valueLength"></param>
            <param name="isLiteral"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineModel.WriteAttributeValueAsync(System.String,System.Int32,System.Object,System.Int32,System.Int32,System.Boolean)">
            <summary>
            写入特性值
            </summary>
            <param name="prefix"></param>
            <param name="prefixOffset"></param>
            <param name="value"></param>
            <param name="valueOffset"></param>
            <param name="valueLength"></param>
            <param name="isLiteral"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineModel.EndWriteAttribute">
            <summary>
            结束写入特性
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineModel.EndWriteAttributeAsync">
            <summary>
            结束写入特性
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineModel.Execute">
            <summary>
            执行
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineModel.ExecuteAsync">
            <summary>
            执行
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineModel.Result">
            <summary>
            获取结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineModel.ResultAsync">
            <summary>
            获取结果
            </summary>
            <returns></returns>
        </member>
        <member name="T:Furion.ViewEngine.ViewEngineModel`1">
            <summary>
            视图引擎模板模型实现类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Furion.ViewEngine.ViewEngineModel`1.Model">
            <summary>
            强类型
            </summary>
        </member>
        <member name="T:Furion.ViewEngine.ViewEngineOptions">
            <summary>
            视图引擎编译选项
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineOptions.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.ViewEngineOptions.ReferencedAssemblies">
            <summary>
            引用程序集
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.ViewEngineOptions.MetadataReferences">
            <summary>
            元数据引用
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.ViewEngineOptions.TemplateNamespace">
            <summary>
            模板命名空间
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.ViewEngineOptions.Inherits">
            <summary>
            继承
            </summary>
        </member>
        <member name="P:Furion.ViewEngine.ViewEngineOptions.DefaultUsings">
            <summary>
            默认 Using
            </summary>
        </member>
        <member name="T:Furion.ViewEngine.IViewEngineTemplate">
            <summary>
            视图引擎模板（编译后）
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineTemplate.SaveToStream(System.IO.Stream)">
            <summary>
            保存到流中
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineTemplate.SaveToStreamAsync(System.IO.Stream)">
            <summary>
            保存到流中
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineTemplate.SaveToFile(System.String)">
            <summary>
            保存到文件
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineTemplate.SaveToFileAsync(System.String)">
            <summary>
            保存到文件
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineTemplate.Run(System.Object)">
            <summary>
            执行编译
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineTemplate.RunAsync(System.Object)">
            <summary>
            执行编译
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.ViewEngine.IViewEngineTemplate`1">
            <summary>
            泛型视图编译模板接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineTemplate`1.SaveToStream(System.IO.Stream)">
            <summary>
            保存到流中
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineTemplate`1.SaveToStreamAsync(System.IO.Stream)">
            <summary>
            保存到流中
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineTemplate`1.SaveToFile(System.String)">
            <summary>
            保存到文件
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineTemplate`1.SaveToFileAsync(System.String)">
            <summary>
            保存到文件
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineTemplate`1.Run(System.Action{`0})">
            <summary>
            执行编译
            </summary>
            <param name="initializer"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.IViewEngineTemplate`1.RunAsync(System.Action{`0})">
            <summary>
            执行编译
            </summary>
            <param name="initializer"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.ViewEngine.ViewEngineTemplate">
            <summary>
            视图引擎模板（编译后）
            </summary>
        </member>
        <member name="F:Furion.ViewEngine.ViewEngineTemplate.assemblyByteCode">
            <summary>
            内存流
            </summary>
        </member>
        <member name="F:Furion.ViewEngine.ViewEngineTemplate.templateType">
            <summary>
            模板类型
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate.#ctor(System.IO.MemoryStream)">
            <summary>
            构造函数
            </summary>
            <param name="assemblyByteCode"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate.SaveToStream(System.IO.Stream)">
            <summary>
            保存到流中
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate.SaveToStreamAsync(System.IO.Stream)">
            <summary>
            保存到流中
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate.SaveToFile(System.String)">
            <summary>
            保存到文件
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate.SaveToFileAsync(System.String)">
            <summary>
            保存到文件
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate.Run(System.Object)">
            <summary>
            执行编译
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate.RunAsync(System.Object)">
            <summary>
            执行编译
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate.LoadFromFile(System.String)">
            <summary>
            从文件中加载模板
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate.LoadFromFileAsync(System.String)">
            <summary>
            从文件中加载模板
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate.LoadFromStream(System.IO.Stream)">
            <summary>
            从流中加载模板
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate.LoadFromStreamAsync(System.IO.Stream)">
            <summary>
            从流中加载模板
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.ViewEngine.ViewEngineTemplate`1">
            <summary>
            视图引擎模板（编译后）
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Furion.ViewEngine.ViewEngineTemplate`1.assemblyByteCode">
            <summary>
            内存流
            </summary>
        </member>
        <member name="F:Furion.ViewEngine.ViewEngineTemplate`1.templateType">
            <summary>
            内存流
            </summary>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate`1.#ctor(System.IO.MemoryStream)">
            <summary>
            构造函数
            </summary>
            <param name="assemblyByteCode"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate`1.SaveToStream(System.IO.Stream)">
            <summary>
            保存到流中
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate`1.SaveToStreamAsync(System.IO.Stream)">
            <summary>
            保存到流中
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate`1.SaveToFile(System.String)">
            <summary>
            保存到文件中
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate`1.SaveToFileAsync(System.String)">
            <summary>
            保存到文件中
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate`1.Run(System.Action{`0})">
            <summary>
            执行编译
            </summary>
            <param name="initializer"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate`1.RunAsync(System.Action{`0})">
            <summary>
            执行编译
            </summary>
            <param name="initializer"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate`1.LoadFromFile(System.String)">
            <summary>
            从文件中加载模板
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate`1.LoadFromFileAsync(System.String)">
            <summary>
            从文件中加载模板
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate`1.LoadFromStream(System.IO.Stream)">
            <summary>
            从流中加载模板
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.ViewEngine.ViewEngineTemplate`1.LoadFromStreamAsync(System.IO.Stream)">
            <summary>
            从流中加载模板
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="T:Furion.VirtualFileServer.FileProviderTypes">
            <summary>
            文件提供器类型
            </summary>
        </member>
        <member name="F:Furion.VirtualFileServer.FileProviderTypes.Physical">
            <summary>
            物理文件
            </summary>
        </member>
        <member name="F:Furion.VirtualFileServer.FileProviderTypes.Embedded">
            <summary>
            嵌入资源文件
            </summary>
        </member>
        <member name="T:Furion.VirtualFileServer.FS">
            <summary>
            虚拟文件服务静态类
            </summary>
        </member>
        <member name="M:Furion.VirtualFileServer.FS.GetPhysicalFileProvider(System.String,System.IServiceProvider)">
            <summary>
            获取物理文件提供器
            </summary>
            <param name="root"></param>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.VirtualFileServer.FS.GetEmbeddedFileProvider(System.Reflection.Assembly,System.IServiceProvider)">
            <summary>
            获取嵌入资源文件提供器
            </summary>
            <param name="assembly"></param>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.VirtualFileServer.FS.GetFileProvider(Furion.VirtualFileServer.FileProviderTypes,System.Object,System.IServiceProvider)">
            <summary>
            文件提供器
            </summary>
            <param name="fileProviderTypes"></param>
            <param name="args"></param>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Furion.VirtualFileServer.FS.TryGetContentType(System.String,System.String@)">
            <summary>
            根据文件名获取文件的 ContentType 或 MIME
            </summary>
            <param name="fileName">文件名（带拓展）</param>
            <param name="contentType">ContentType 或 MIME</param>
            <returns></returns>
        </member>
        <member name="M:Furion.VirtualFileServer.FS.InitialContentTypeProvider">
            <summary>
            初始化文件 ContentType 提供器
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.AppApplicationBuilderExtensions">
            <summary>
            应用中间件拓展类（由框架内部调用）
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppApplicationBuilderExtensions.UseInject(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String,System.Action{Furion.UseInjectOptions})">
            <summary>
            注入基础中间件（带Swagger）
            </summary>
            <param name="app"></param>
            <param name="routePrefix">空字符串将为首页</param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppApplicationBuilderExtensions.UseInjectBase(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            注入基础中间件
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppApplicationBuilderExtensions.MapRouteControllers(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            解决 .NET6 WebApplication 模式下二级虚拟目录错误问题
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppApplicationBuilderExtensions.UseApp(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})">
            <summary>
            添加应用中间件
            </summary>
            <param name="app">应用构建器</param>
            <param name="configure">应用配置</param>
            <returns>应用构建器</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.AppWebApplicationBuilderExtensions">
            <summary>
            WebApplication 拓展
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppWebApplicationBuilderExtensions.Inject(Microsoft.AspNetCore.Builder.WebApplicationBuilder)">
            <summary>
            Web 应用注入
            </summary>
            <param name="webApplicationBuilder">Web应用构建器</param>
            <returns>WebApplicationBuilder</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppWebApplicationBuilderExtensions.AddComponent``1(Microsoft.AspNetCore.Builder.WebApplicationBuilder,System.Object)">
            <summary>
            注册依赖组件
            </summary>
            <typeparam name="TComponent">派生自 <see cref="T:System.IServiceComponent"/></typeparam>
            <param name="webApplicationBuilder">Web应用构建器</param>
            <param name="options">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppWebApplicationBuilderExtensions.AddComponent``2(Microsoft.AspNetCore.Builder.WebApplicationBuilder,``1)">
            <summary>
            注册依赖组件
            </summary>
            <typeparam name="TComponent">派生自 <see cref="T:System.IServiceComponent"/></typeparam>
            <typeparam name="TComponentOptions">组件参数</typeparam>
            <param name="webApplicationBuilder">Web应用构建器</param>
            <param name="options">组件参数</param>
            <returns><see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppWebApplicationBuilderExtensions.AddComponent(Microsoft.AspNetCore.Builder.WebApplicationBuilder,System.Type,System.Object)">
            <summary>
            注册依赖组件
            </summary>
            <param name="webApplicationBuilder">Web应用构建器</param>
            <param name="componentType">组件类型</param>
            <param name="options">组件参数</param>
            <returns><see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppWebApplicationBuilderExtensions.AddWebComponent``1(Microsoft.AspNetCore.Builder.WebApplicationBuilder,System.Object)">
            <summary>
            注册 WebApplicationBuilder 依赖组件
            </summary>
            <typeparam name="TComponent">派生自 <see cref="T:System.IWebComponent"/></typeparam>
            <param name="webApplicationBuilder">Web应用构建器</param>
            <param name="options">组件参数</param>
            <returns><see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppWebApplicationBuilderExtensions.AddWebComponent``2(Microsoft.AspNetCore.Builder.WebApplicationBuilder,``1)">
            <summary>
            注册 WebApplicationBuilder 依赖组件
            </summary>
            <typeparam name="TComponent">派生自 <see cref="T:System.IWebComponent"/></typeparam>
            <typeparam name="TComponentOptions">组件参数</typeparam>
            <param name="webApplicationBuilder">Web应用构建器</param>
            <param name="options">组件参数</param>
            <returns><see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppWebApplicationBuilderExtensions.AddWebComponent(Microsoft.AspNetCore.Builder.WebApplicationBuilder,System.Type,System.Object)">
            <summary>
            注册 WebApplicationBuilder 依赖组件
            </summary>
            <param name="webApplicationBuilder"><see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/></param>
            <param name="componentType">组件类型</param>
            <param name="options">组件参数</param>
            <returns><see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AppWebApplicationBuilderExtensions.UseVirtualPath(Microsoft.AspNetCore.Builder.WebApplication,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})">
            <summary>
            解决 .NET6 WebApplication 模式下二级虚拟目录错误问题
            </summary>
            <param name="app"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.ComponentApplicationBuilderExtensions">
            <summary>
            组件应用中间件拓展类
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.ComponentApplicationBuilderExtensions.UseComponent``1(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,System.Object)">
            <summary>
            注册依赖组件
            </summary>
            <typeparam name="TComponent">派生自 <see cref="T:System.IApplicationComponent"/></typeparam>
            <param name="app"><see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/></param>
            <param name="env"><see cref="T:Microsoft.AspNetCore.Hosting.IWebHostEnvironment"/></param>
            <param name="options">组件参数</param>
            <returns><see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.ComponentApplicationBuilderExtensions.UseComponent``2(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,``1)">
            <summary>
            注册依赖组件
            </summary>
            <typeparam name="TComponent">派生自 <see cref="T:System.IApplicationComponent"/></typeparam>
            <typeparam name="TComponentOptions">组件参数</typeparam>
            <param name="app"><see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/></param>
            <param name="env"><see cref="T:Microsoft.AspNetCore.Hosting.IWebHostEnvironment"/></param>
            <param name="options">组件参数</param>
            <returns><see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.ComponentApplicationBuilderExtensions.UseComponent(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,System.Type,System.Object)">
            <summary>
            注册依赖组件
            </summary>
            <param name="app"><see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/></param>
            <param name="env"><see cref="T:Microsoft.AspNetCore.Hosting.IWebHostEnvironment"/></param>
            <param name="componentType">组件类型</param>
            <param name="options">组件参数</param>
            <returns><see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.CorsAccessorApplicationBuilderExtensions">
            <summary>
            跨域中间件拓展
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.CorsAccessorApplicationBuilderExtensions.UseCorsAccessor(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder})">
            <summary>
            添加跨域中间件
            </summary>
            <param name="app"></param>
            <param name="corsPolicyBuilderHandler"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.IEndpointRouteBuilderExtensions">
            <summary>
            终点路由构建器拓展
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.IEndpointRouteBuilderExtensions.MapHubs(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)">
            <summary>
            扫描配置所有集线器
            </summary>
            <param name="endpoints"></param>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.LocalizationApplicationBuilderExtensions">
            <summary>
            多语言中间件拓展
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.LocalizationApplicationBuilderExtensions.UseAppLocalization(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            配置多语言中间件拓展
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.SpecificationDocumentApplicationBuilderExtensions">
            <summary>
            规范化文档中间件拓展
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SpecificationDocumentApplicationBuilderExtensions.UseSpecificationDocuments(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String,System.Action{Swashbuckle.AspNetCore.Swagger.SwaggerOptions},System.Action{Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions})">
            <summary>
            添加规范化文档中间件
            </summary>
            <param name="app"></param>
            <param name="routePrefix"></param>
            <param name="configureSwagger"></param>
            <param name="configureSwaggerUI"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.UnifyResultMiddlewareExtensions">
            <summary>
            状态码中间件拓展
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.UnifyResultMiddlewareExtensions.UseUnifyResultStatusCodes(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            添加状态码拦截中间件
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.VirtualFileServerApplicationBuilderExtensions">
            <summary>
            虚拟文件服务中间件
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.VirtualFileServerApplicationBuilderExtensions.UseVirtualFileServer(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            虚拟文件系统中间件
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.HttpContextExtensions">
            <summary>
            Http 拓展类
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetMetadata``1(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取 Action 特性
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetControllerActionDescriptor(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取 控制器/Action 描述器
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.SigninToSwagger(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            设置规范化文档自动登录
            </summary>
            <param name="httpContext"></param>
            <param name="accessToken"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.SignoutToSwagger(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            设置规范化文档退出登录
            </summary>
            <param name="httpContext"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetLocalIpAddressToIPv4(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取本机 IPv4地址
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetLocalIpAddressToIPv6(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取本机 IPv6地址
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetRemoteIpAddressToIPv4(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取远程 IPv4地址
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetRemoteIpAddressToIPv6(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取远程 IPv6地址
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetRequestUrlAddress(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            获取完整请求地址
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetRefererUrlAddress(Microsoft.AspNetCore.Http.HttpRequest,System.String)">
            <summary>
            获取来源地址
            </summary>
            <param name="request"></param>
            <param name="refererHeaderKey"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContextExtensions">
            <summary>
            <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext"/> 拓展
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContextExtensions.DefaultAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext,System.Action{Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext})">
            <summary>
            解析默认模型绑定
            </summary>
            <param name="bindingContext"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.FromConvertAttribute">
            <summary>
            自定义参数绑定转换特性
            </summary>
            <remarks>供模型绑定使用</remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.FromConvertAttribute.AllowStringEmpty">
            <summary>
            是否允许空字符串
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.FromConvertAttribute.ModelConvertBinder">
            <summary>
            模型转换绑定器
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.FromConvertAttribute.Extras">
            <summary>
            额外数据
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.FromConvertAttribute.Customize">
            <summary>
            完全自定义
            </summary>
            <remarks>框架内部不做任何处理</remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.NonValidationAttribute">
            <summary>
            跳过验证
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute">
            <summary>
            接口描述设置
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="enabled">是否启用</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.#ctor(System.String[])">
            <summary>
            构造函数
            </summary>
            <param name="groups">分组列表</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.Name">
            <summary>
            自定义名称
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.KeepName">
            <summary>
            保留原有名称（Boolean 类型）
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.SplitCamelCase">
            <summary>
            切割骆驼命名（Boolean 类型）
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.AsLowerCamelCase">
            <summary>
            小驼峰命名（首字符小写）
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.KeepVerb">
            <summary>
            保留路由谓词（Boolean 类型）
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.LowercaseRoute">
            <summary>
            小写路由（Boolean 类型）
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.Module">
            <summary>
            模块名
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.Groups">
            <summary>
            分组
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.Tag">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.Order">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.Area">
            <summary>
            配置控制器区域（只对控制器有效）
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.Description">
            <summary>
            额外描述，支持 HTML
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiDescriptionSettingsAttribute.ForceWithRoutePrefix">
            <summary>
            强制携带路由前缀，即使使用 [Route] 重写，仅对 Class/Controller 有效
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.ApiSeatAttribute">
            <summary>
            接口参数位置设置
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.ApiSeatAttribute.#ctor(Microsoft.AspNetCore.Mvc.ApiSeats)">
            <summary>
            构造函数
            </summary>
            <param name="seat"></param>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.ApiSeatAttribute.Seat">
            <summary>
            参数位置
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.RouteConstraintAttribute">
            <summary>
            接口参数约束
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.RouteConstraintAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="constraint"></param>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.RouteConstraintAttribute.Constraint">
            <summary>
            参数位置
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.ApiSeats">
            <summary>
            接口参数位置
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Mvc.ApiSeats.ControllerStart">
            <summary>
            控制器之前
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Mvc.ApiSeats.ControllerEnd">
            <summary>
            控制器之后
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Mvc.ApiSeats.ActionStart">
            <summary>
            行为之前
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Mvc.ApiSeats.ActionEnd">
            <summary>
            行为之后
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.Filters.FriendlyExceptionFilter">
            <summary>
            友好异常拦截器
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Mvc.Filters.FriendlyExceptionFilter.LOG_CATEGORY_NAME">
            <summary>
            固定日志分类名
            </summary>
            <remarks>方便对日志进行过滤写入不同的存储介质中</remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.Filters.FriendlyExceptionFilter.OnExceptionAsync(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            异常拦截
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.Filters.FriendlyExceptionFilter.PrintToMiniProfiler(System.Exception)">
            <summary>
            打印错误到 MiniProfiler 中
            </summary>
            <param name="exception"></param>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizerFactoryExtensions">
            <summary>
            IHtmlLocalizerFactory 拓展类
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizerFactoryExtensions.Create(Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizerFactory)">
            <summary>
            创建默认多语言工厂
            </summary>
            <param name="htmlLocalizerFactory"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.NonUnifyAttribute">
            <summary>
            禁止规范化处理
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.UnifyProviderAttribute">
            <summary>
            规范化提供器特性
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.UnifyProviderAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.UnifyProviderAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Microsoft.AspNetCore.Mvc.UnifyProviderAttribute.Name">
            <summary>
            提供器名称
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.UnifyResultAttribute">
            <summary>
            规范化结果配置
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.UnifyResultAttribute.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="statusCode"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.UnifyResultAttribute.#ctor(System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.UnifyResultAttribute.#ctor(System.Type,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="type"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.UnifyResultAttribute.#ctor(System.Type,System.Int32,System.Reflection.MethodInfo)">
            <summary>
            构造函数
            </summary>
            <param name="type"></param>
            <param name="statusCode"></param>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.UnifyResultAttribute.WrapType(System.Type,System.Reflection.MethodInfo)">
            <summary>
            包装类型
            </summary>
            <param name="type"></param>
            <param name="method"></param>
        </member>
        <member name="T:Microsoft.AspNetCore.Authorization.AppAuthorizeAttribute">
            <summary>
            策略授权特性
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Authorization.AppAuthorizeAttribute.#ctor(System.String[])">
            <summary>
            构造函数
            </summary>
            <param name="policies">多个策略</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Authorization.AppAuthorizeAttribute.Policies">
            <summary>
            策略
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Authorization.SecurityDefineAttribute">
            <summary>
            安全定义特性
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Authorization.SecurityDefineAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Authorization.SecurityDefineAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="resourceId"></param>
        </member>
        <member name="P:Microsoft.AspNetCore.Authorization.SecurityDefineAttribute.ResourceId">
            <summary>
            资源Id，必须是唯一的
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Authorization.AuthorizationHandlerContextExtensions">
            <summary>
            授权处理上下文拓展类
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Authorization.AuthorizationHandlerContextExtensions.GetCurrentHttpContext(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)">
            <summary>
            获取当前 HttpContext 上下文
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions">
            <summary>
            应用服务集合拓展类（由框架内部调用）
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddInject(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Furion.AddInjectOptions})">
            <summary>
            Mvc 注入基础配置（带Swagger）
            </summary>
            <param name="mvcBuilder">Mvc构建器</param>
            <param name="configure"></param>
            <returns>IMvcBuilder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddInject(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Furion.AddInjectOptions})">
            <summary>
            服务注入基础配置（带Swagger）
            </summary>
            <param name="services">服务集合</param>
            <param name="configure"></param>
            <returns>IMvcBuilder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddInjectMini(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Furion.AddInjectOptions})">
            <summary>
            MiniAPI 服务注入基础配置（带Swagger）
            </summary>
            <param name="services">服务集合</param>
            <param name="configure"></param>
            <returns>IMvcBuilder</returns>
            <remarks>https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/minimal-apis?view=aspnetcore-6.0</remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddInjectBase(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Furion.AddInjectOptions})">
            <summary>
            Mvc 注入基础配置
            </summary>
            <param name="mvcBuilder">Mvc构建器</param>
            <param name="configure"></param>
            <returns>IMvcBuilder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddInjectBase(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Furion.AddInjectOptions})">
            <summary>
            Mvc 注入基础配置
            </summary>
            <param name="services">服务集合</param>
            <param name="configure"></param>
            <returns>IMvcBuilder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddInjectWithUnifyResult(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Furion.AddInjectOptions})">
            <summary>
            Mvc 注入基础配置和规范化结果
            </summary>
            <param name="mvcBuilder"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddInjectWithUnifyResult(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Furion.AddInjectOptions})">
            <summary>
            注入基础配置和规范化结果
            </summary>
            <param name="services"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddInjectWithUnifyResult``1(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Furion.AddInjectOptions})">
            <summary>
            Mvc 注入基础配置和规范化结果
            </summary>
            <typeparam name="TUnifyResultProvider"></typeparam>
            <param name="mvcBuilder"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddInjectWithUnifyResult``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Furion.AddInjectOptions})">
            <summary>
            Mvc 注入基础配置和规范化结果
            </summary>
            <typeparam name="TUnifyResultProvider"></typeparam>
            <param name="configure"></param>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddAppHostedService(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            自动添加主机服务
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.Build(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            供控制台构建根服务
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddApp(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            添加应用配置
            </summary>
            <param name="services">服务集合</param>
            <param name="configure">服务配置</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.AddStartups(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加 Startup 自动扫描
            </summary>
            <param name="services">服务集合</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AppServiceCollectionExtensions.GetStartupOrder(System.Type)">
            <summary>
            获取 Startup 排序
            </summary>
            <param name="type">排序类型</param>
            <returns>int</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.AspNetCoreBuilderServiceCollectionExtensions">
            <summary>
            ASP.NET Core 服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AspNetCoreBuilderServiceCollectionExtensions.AddMvcFilter``1(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.MvcOptions})">
            <summary>
            注册 Mvc 过滤器
            </summary>
            <typeparam name="TFilter"></typeparam>
            <param name="mvcBuilder"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AspNetCoreBuilderServiceCollectionExtensions.AddMvcFilter``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Mvc.MvcOptions})">
            <summary>
            注册 Mvc 过滤器
            </summary>
            <typeparam name="TFilter"></typeparam>
            <param name="services"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AspNetCoreBuilderServiceCollectionExtensions.AddMvcFilter(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata,System.Action{Microsoft.AspNetCore.Mvc.MvcOptions})">
            <summary>
            注册 Mvc 过滤器
            </summary>
            <param name="services"></param>
            <param name="filter"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AspNetCoreBuilderServiceCollectionExtensions.AddFromConvertBinding(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{System.Collections.Concurrent.ConcurrentDictionary{System.Type,System.Type}})">
            <summary>
            添加 [FromConvert] 模型绑定
            </summary>
            <param name="mvcBuilder"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AspNetCoreBuilderServiceCollectionExtensions.AddFromConvertBinding(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.Collections.Concurrent.ConcurrentDictionary{System.Type,System.Type}})">
            <summary>
            添加 [FromConvert] 模型绑定
            </summary>
            <param name="services"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.AuthorizationServiceCollectionExtensions">
            <summary>
            策略授权服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AuthorizationServiceCollectionExtensions.AddAppAuthorization``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection},System.Boolean)">
            <summary>
            添加策略授权服务
            </summary>
            <typeparam name="TAuthorizationHandler">策略授权处理程序</typeparam>
            <param name="services">服务集合</param>
            <param name="configure">自定义配置</param>
            <param name="enableGlobalAuthorize">是否启用全局授权</param>
            <returns>服务集合</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ComponentServiceCollectionExtensions">
            <summary>
            组件应用服务集合拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ComponentServiceCollectionExtensions.AddComponent``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Object)">
            <summary>
            注册单个组件
            </summary>
            <typeparam name="TComponent"></typeparam>
            <param name="services"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ComponentServiceCollectionExtensions.AddComponent``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,``1)">
            <summary>
            注册依赖组件
            </summary>
            <typeparam name="TComponent">派生自 <see cref="T:System.IServiceComponent"/></typeparam>
            <typeparam name="TComponentOptions">组件参数</typeparam>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <param name="options">组件参数</param>
            <returns><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ComponentServiceCollectionExtensions.AddComponent(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Object)">
            <summary>
            注册依赖组件
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <param name="componentType">组件类型</param>
            <param name="options">组件参数</param>
            <returns><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ConfigurableOptionsServiceCollectionExtensions">
            <summary>
            可变选项服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ConfigurableOptionsServiceCollectionExtensions.AddConfigurableOptions``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加选项配置
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <param name="services">服务集合</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ConfigurableOptionsServiceCollectionExtensions.GetConfigurationPath(Furion.ConfigurableOptions.OptionsSettingsAttribute,System.Type)">
            <summary>
            获取配置路径
            </summary>
            <param name="optionsSettings">选项配置特性</param>
            <param name="optionsType">选项类型</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.CorsAccessorServiceCollectionExtensions">
            <summary>
            跨域访问服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.CorsAccessorServiceCollectionExtensions.AddCorsAccessor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions},System.Action{Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder})">
            <summary>
            配置跨域
            </summary>
            <param name="services">服务集合</param>
            <param name="corsOptionsHandler"></param>
            <param name="corsPolicyBuilderHandler"></param>
            <returns>服务集合</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.DataValidationServiceCollectionExtensions">
            <summary>
            友好异常服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DataValidationServiceCollectionExtensions.AddDataValidation``1(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Furion.DataValidation.DataValidationOptions})">
            <summary>
            添加全局数据验证
            </summary>
            <typeparam name="TValidationMessageTypeProvider">验证类型消息提供器</typeparam>
            <param name="mvcBuilder"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DataValidationServiceCollectionExtensions.AddDataValidation``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Furion.DataValidation.DataValidationOptions})">
            <summary>
            添加全局数据验证
            </summary>
            <typeparam name="TValidationMessageTypeProvider">验证类型消息提供器</typeparam>
            <param name="services"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DataValidationServiceCollectionExtensions.AddDataValidation(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Furion.DataValidation.DataValidationOptions})">
            <summary>
            添加全局数据验证
            </summary>
            <param name="mvcBuilder"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DataValidationServiceCollectionExtensions.AddDataValidation(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Furion.DataValidation.DataValidationOptions})">
            <summary>
            添加全局数据验证
            </summary>
            <param name="services"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions">
            <summary>
            依赖注入拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.AddDependencyInjection(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加依赖注入接口
            </summary>
            <param name="services">服务集合</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.AddScopedDispatchProxyForInterface``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加接口代理
            </summary>
            <typeparam name="TDispatchProxy">代理类</typeparam>
            <typeparam name="TIDispatchProxy">被代理接口依赖</typeparam>
            <param name="services">服务集合</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.AddInnerDependencyInjection(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加扫描注入
            </summary>
            <param name="services">服务集合</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.RegisterService(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,Furion.DependencyInjection.InjectionAttribute,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            注册服务
            </summary>
            <param name="services">服务集合</param>
            <param name="dependencyType"></param>
            <param name="type">类型</param>
            <param name="injectionAttribute">注入特性</param>
            <param name="canInjectInterfaces">能被注册的接口</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.Register(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,Furion.DependencyInjection.InjectionAttribute,System.Type)">
            <summary>
            注册类型
            </summary>
            <param name="services">服务</param>
            <param name="dependencyType"></param>
            <param name="type">类型</param>
            <param name="injectionAttribute">注入特性</param>
            <param name="inter">接口</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.AddDispatchProxy(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Type,System.Boolean)">
            <summary>
            创建服务代理
            </summary>
            <param name="services">服务集合</param>
            <param name="dependencyType"></param>
            <param name="type">拦截的类型</param>
            <param name="proxyType">代理类型</param>
            <param name="inter">代理接口</param>
            <param name="hasTarget">是否有实现类</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.RegisterNamedService``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册命名服务（接口多实现）
            </summary>
            <typeparam name="TDependency"></typeparam>
            <param name="services"></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.RegisterExternalServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册外部服务
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.FixedGenericType(System.Type)">
            <summary>
            修复泛型类型注册类型问题
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.GetOrder(System.Type)">
            <summary>
            获取 注册 排序
            </summary>
            <param name="type">排序类型</param>
            <returns>int</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.TryGetServiceLifetime(System.Type)">
            <summary>
            根据依赖接口类型解析 ServiceLifetime 对象
            </summary>
            <param name="dependencyType"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.TypeNamedCollection">
            <summary>
            类型名称集合
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.DispatchCreateMethod">
            <summary>
            创建代理方法
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.GlobalServiceProxyType">
            <summary>
            全局服务代理类型
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.DynamicApiControllerServiceCollectionExtensions">
            <summary>
            动态接口控制器拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DynamicApiControllerServiceCollectionExtensions.AddDynamicApiControllers(Microsoft.Extensions.DependencyInjection.IMvcBuilder)">
            <summary>
            添加动态接口控制器服务
            </summary>
            <param name="mvcBuilder">Mvc构建器</param>
            <returns>Mvc构建器</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DynamicApiControllerServiceCollectionExtensions.AddDynamicApiControllers(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加动态接口控制器服务
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DynamicApiControllerServiceCollectionExtensions.AddExternalAssemblyParts(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            添加外部程序集部件集合
            </summary>
            <param name="mvcBuilder">Mvc构建器</param>
            <param name="assemblies"></param>
            <returns>Mvc构建器</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.EventBusServiceCollectionExtensions">
            <summary>
            EventBus 模块服务拓展
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EventBusServiceCollectionExtensions.AddEventBus(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Furion.EventBus.EventBusOptionsBuilder})">
            <summary>
            添加 EventBus 模块注册
            </summary>
            <param name="services">服务集合对象</param>
            <param name="configureOptionsBuilder">事件总线配置选项构建器委托</param>
            <returns>服务集合实例</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EventBusServiceCollectionExtensions.AddEventBus(Microsoft.Extensions.DependencyInjection.IServiceCollection,Furion.EventBus.EventBusOptionsBuilder)">
            <summary>
            添加 EventBus 模块注册
            </summary>
            <param name="services">服务集合对象</param>
            <param name="eventBusOptionsBuilder">事件总线配置选项构建器</param>
            <returns>服务集合实例</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EventBusServiceCollectionExtensions.AddInternalService(Microsoft.Extensions.DependencyInjection.IServiceCollection,Furion.EventBus.EventBusOptionsBuilder)">
            <summary>
            注册内部服务
            </summary>
            <param name="services">服务集合对象</param>
            <param name="eventBusOptions">事件总线配置选项</param>
            <returns>服务集合实例</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.FriendlyExceptionServiceCollectionExtensions">
            <summary>
            友好异常服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.FriendlyExceptionServiceCollectionExtensions.AddFriendlyException``1(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Furion.FriendlyException.FriendlyExceptionOptions})">
            <summary>
            添加友好异常服务拓展服务
            </summary>
            <typeparam name="TErrorCodeTypeProvider">异常错误码提供器</typeparam>
            <param name="mvcBuilder">Mvc构建器</param>
            <param name="configure">是否启用全局异常过滤器</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.FriendlyExceptionServiceCollectionExtensions.AddFriendlyException``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Furion.FriendlyException.FriendlyExceptionOptions})">
            <summary>
            添加友好异常服务拓展服务
            </summary>
            <typeparam name="TErrorCodeTypeProvider">异常错误码提供器</typeparam>
            <param name="services"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.FriendlyExceptionServiceCollectionExtensions.AddFriendlyException(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Furion.FriendlyException.FriendlyExceptionOptions})">
            <summary>
            添加友好异常服务拓展服务
            </summary>
            <param name="mvcBuilder">Mvc构建器</param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.FriendlyExceptionServiceCollectionExtensions.AddFriendlyException(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Furion.FriendlyException.FriendlyExceptionOptions})">
            <summary>
            添加友好异常服务拓展服务
            </summary>
            <param name="services"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.JsonSerializationServiceCollectionExtensions">
            <summary>
            Json 序列化服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.JsonSerializationServiceCollectionExtensions.AddJsonSerialization``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            配置 Json 序列化提供器
            </summary>
            <typeparam name="TJsonSerializerProvider"></typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.JsonSerializationServiceCollectionExtensions.AddJsonOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Mvc.JsonOptions})">
            <summary>
            配置 JsonOptions 序列化选项
            <para>主要给非 Web 环境使用</para>
            </summary>
            <param name="services"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.LocalizationServiceCollectionExtensions">
            <summary>
            多语言服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LocalizationServiceCollectionExtensions.AddAppLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder)">
            <summary>
            配置多语言服务
            </summary>
            <param name="mvcBuilde"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions">
            <summary>
            日志服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions.AddMonitorLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Furion.Logging.LoggingMonitorSettings},System.String)">
            <summary>
            添加日志监视器服务
            </summary>
            <param name="services"></param>
            <param name="configure">添加更多配置</param>
            <param name="jsonKey">配置文件对于的 Key，默认为 Logging:Monitor</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions.AddFileLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Boolean)">
            <summary>
            添加文件日志服务
            </summary>
            <param name="services"></param>
            <param name="fileName">日志文件完整路径或文件名，推荐 .log 作为拓展名</param>
            <param name="append">追加到已存在日志文件或覆盖它们</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions.AddFileLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{Furion.Logging.FileLoggerOptions})">
            <summary>
            添加文件日志服务
            </summary>
            <param name="services"></param>
            <param name="fileName">日志文件完整路径或文件名，推荐 .log 作为拓展名</param>
            <param name="configure">文件日志记录器配置选项委托</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions.AddFileLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Furion.Logging.FileLoggerOptions})">
            <summary>
            添加文件日志服务（从配置文件中读取配置）
            </summary>
            <param name="services"></param>
            <param name="configure">文件日志记录器配置选项委托</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions.AddFileLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.String},System.Action{Furion.Logging.FileLoggerOptions})">
            <summary>
            添加文件日志服务（从配置文件中读取配置）
            </summary>
            <param name="services"></param>
            <param name="configuraionKey">获取配置文件对应的 Key</param>
            <param name="configure">文件日志记录器配置选项委托</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions.AddDatabaseLogging``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Furion.Logging.DatabaseLoggerOptions})">
            <summary>
            添加数据库日志服务
            </summary>
            <param name="services"></param>
            <param name="configure">数据库日志记录器配置选项委托</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions.AddDatabaseLogging``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{Furion.Logging.DatabaseLoggerOptions})">
            <summary>
            添加数据库日志服务
            </summary>
            <param name="services"></param>
            <param name="configuraionKey">配置文件对于的 Key</param>
            <param name="configure">数据库日志记录器配置选项委托</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions.AddDatabaseLogging``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.String},System.Action{Furion.Logging.DatabaseLoggerOptions})">
            <summary>
            添加数据库日志服务
            </summary>
            <param name="services"></param>
            <param name="configuraionKey">获取配置文件对于的 Key</param>
            <param name="configure">数据库日志记录器配置选项委托</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ObjectMapperServiceCollectionExtensions">
            <summary>
            对象映射拓展类
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.DependencyInjection.ObjectMapperServiceCollectionExtensions.ASSEMBLY_NAME">
            <summary>
            对象映射程序集名称
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ObjectMapperServiceCollectionExtensions.AddObjectMapper(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加对象映射
            </summary>
            <param name="services">服务集合</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.RemoteRequestServiceCollectionExtensions">
            <summary>
            远程请求服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RemoteRequestServiceCollectionExtensions.AddRemoteRequest(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection},System.Boolean)">
            <summary>
            注册远程请求
            </summary>
            <param name="services"></param>
            <param name="configure"></param>
            <param name="inludeDefaultHttpClient">是否包含默认客户端</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RemoteRequestServiceCollectionExtensions.ApproveAllCerts(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            忽略所有请求证书
            </summary>
            <remarks>慎用</remarks>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.SensitiveDetectionServiceCollectionExtensions">
            <summary>
            脱敏词汇处理服务
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SensitiveDetectionServiceCollectionExtensions.AddSensitiveDetection(Microsoft.Extensions.DependencyInjection.IMvcBuilder)">
            <summary>
            添加脱敏词汇服务
            <para>需要在入口程序集目录下创建 sensitive-words.txt</para>
            </summary>
            <param name="mvcBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SensitiveDetectionServiceCollectionExtensions.AddSensitiveDetection``1(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            添加脱敏词汇服务
            </summary>
            <typeparam name="TSensitiveDetectionProvider"></typeparam>
            <param name="mvcBuilder"></param>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SensitiveDetectionServiceCollectionExtensions.AddSensitiveDetection(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加脱敏词汇服务
            <para>需要在入口程序集目录下创建 sensitive-words.txt</para>
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SensitiveDetectionServiceCollectionExtensions.AddSensitiveDetection``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            添加脱敏词汇服务
            </summary>
            <typeparam name="TSensitiveDetectionProvider"></typeparam>
            <param name="services"></param>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.SpecificationDocumentServiceCollectionExtensions">
            <summary>
            规范化接口服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SpecificationDocumentServiceCollectionExtensions.AddSpecificationDocuments(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions})">
            <summary>
            添加规范化文档服务
            </summary>
            <param name="mvcBuilder">Mvc 构建器</param>
            <param name="configure">自定义配置</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SpecificationDocumentServiceCollectionExtensions.AddSpecificationDocuments(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions})">
            <summary>
            添加规范化文档服务
            </summary>
            <param name="services">服务集合</param>
            <param name="configure">自定义配置</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SpecificationDocumentServiceCollectionExtensions.AddMiniProfiler(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加 MiniProfiler 配置
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.TaskSchedulerServiceCollectionExtensions">
            <summary>
            任务调度类服务拓展
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.TaskSchedulerServiceCollectionExtensions.AddTaskScheduler(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加任务调度服务
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.UnifyResultServiceCollectionExtensions">
            <summary>
            规范化结果服务拓展
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.UnifyResultServiceCollectionExtensions.AddUnifyResult(Microsoft.Extensions.DependencyInjection.IMvcBuilder)">
            <summary>
            添加规范化结果服务
            </summary>
            <param name="mvcBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.UnifyResultServiceCollectionExtensions.AddUnifyResult(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加规范化结果服务
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.UnifyResultServiceCollectionExtensions.AddUnifyResult``1(Microsoft.Extensions.DependencyInjection.IMvcBuilder)">
            <summary>
            添加规范化结果服务
            </summary>
            <typeparam name="TUnifyResultProvider"></typeparam>
            <param name="mvcBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.UnifyResultServiceCollectionExtensions.AddUnifyResult``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加规范化结果服务
            </summary>
            <typeparam name="TUnifyResultProvider"></typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.UnifyResultServiceCollectionExtensions.AddUnifyProvider``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            替换默认的规范化结果
            </summary>
            <typeparam name="TUnifyResultProvider"></typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.UnifyResultServiceCollectionExtensions.AddUnifyProvider``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            添加规范化提供器
            </summary>
            <typeparam name="TUnifyResultProvider"></typeparam>
            <param name="services"></param>
            <param name="providerName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.UnitOfWorkServiceCollectionExtensions">
            <summary>
            工作单元拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.UnitOfWorkServiceCollectionExtensions.AddUnitOfWork``1(Microsoft.Extensions.DependencyInjection.IMvcBuilder)">
            <summary>
            添加工作单元服务
            </summary>
            <param name="mvcBuilder">Mvc构建器</param>
            <returns>Mvc构建器</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.UnitOfWorkServiceCollectionExtensions.AddUnitOfWork``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加工作单元服务
            </summary>
            <param name="services"></param>
            <returns>Mvc构建器</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ViewEngineServiceCollectionExtensions">
            <summary>
            视图引擎服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ViewEngineServiceCollectionExtensions.AddViewEngine(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加视图引擎
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.VirtualFileServerServiceCollectionExtensions">
            <summary>
            虚拟文件服务服务拓展
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.VirtualFileServerServiceCollectionExtensions.AddVirtualFileServer(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            文件提供器系统服务拓展
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.Hosting.HostBuilderExtensions">
            <summary>
            主机构建器拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.HostBuilderExtensions.Inject(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.String)">
            <summary>
            Web 主机注入
            </summary>
            <param name="hostBuilder">Web主机构建器</param>
            <param name="assemblyName">外部程序集名称</param>
            <returns>IWebHostBuilder</returns>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.HostBuilderExtensions.Inject(Microsoft.Extensions.Hosting.IHostBuilder,System.Boolean)">
            <summary>
            泛型主机注入
            </summary>
            <param name="hostBuilder">泛型主机注入构建器</param>
            <param name="autoRegisterBackgroundService">是否自动注册 BackgroundService</param>
            <returns>IWebHostBuilder</returns>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.HostBuilderExtensions.AddWebComponent``1(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Object)">
            <summary>
            注册 IWebHostBuilder 依赖组件
            </summary>
            <typeparam name="TComponent">派生自 <see cref="T:System.IWebComponent"/></typeparam>
            <param name="hostBuilder">Web应用构建器</param>
            <param name="options">组件参数</param>
            <returns><see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.HostBuilderExtensions.AddWebComponent``2(Microsoft.AspNetCore.Hosting.IWebHostBuilder,``1)">
            <summary>
            注册 IWebHostBuilder 依赖组件
            </summary>
            <typeparam name="TComponent">派生自 <see cref="T:System.IWebComponent"/></typeparam>
            <typeparam name="TComponentOptions">组件参数</typeparam>
            <param name="hostBuilder">Web应用构建器</param>
            <param name="options">组件参数</param>
            <returns><see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.HostBuilderExtensions.AddWebComponent(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Type,System.Object)">
            <summary>
            注册 IWebHostBuilder 依赖组件
            </summary>
            <param name="hostBuilder"><see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder"/></param>
            <param name="componentType">组件类型</param>
            <param name="options">组件参数</param>
            <returns><see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder"/></returns>
        </member>
        <member name="T:Microsoft.Extensions.Hosting.GenericHostLifetimeEventsHostedService">
            <summary>
            监听泛型主机启动事件
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.GenericHostLifetimeEventsHostedService.#ctor(Microsoft.Extensions.Hosting.IHost)">
            <summary>
            构造函数
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.GenericHostLifetimeEventsHostedService.StartAsync(System.Threading.CancellationToken)">
            <summary>
            监听主机启动
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.GenericHostLifetimeEventsHostedService.StopAsync(System.Threading.CancellationToken)">
            <summary>
            监听主机停止
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.IConfigurationBuilderExtensions">
            <summary>
            IConfigurationBuilder 接口拓展
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfigurationBuilderExtensions.AddFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,Microsoft.Extensions.Hosting.IHostEnvironment,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            添加配置文件
            </summary>
            <param name="configurationBuilder">配置构建对象</param>
            <param name="fileName">文件名</param>
            <param name="environment">环境对象</param>
            <param name="optional">可选文件，设置 true 跳过文件存在检查</param>
            <param name="reloadOnChange">是否监听文件更改</param>
            <param name="includeEnvironment">是否包含环境文件格式注册</param>
            <returns>配置构建对象</returns>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfigurationBuilderExtensions.CheckFileNamePattern(System.String,System.String@,System.String@,System.String@,System.Collections.Generic.IDictionary{System.String,System.Boolean}@)">
            <summary>
            检查文件名格式是否是受支持的格式
            </summary>
            <param name="fileName">文件名</param>
            <param name="fileNamePart">返回文件名匹配部分</param>
            <param name="environmentNamePart">环境名匹配部分</param>
            <param name="fileNameWithEnvironmentPart">带环境标识的文件名</param>
            <param name="parameterPart">参数匹配部分</param>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfigurationBuilderExtensions.ResolveRealAbsolutePath(System.String)">
            <summary>
            分析配置文件名并返回真实绝对路径
            </summary>
            <param name="fileName">文件名</param>
            <returns>返回文件绝对路径</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfigurationBuilderExtensions.CreateFileConfigurationSource(System.String,System.Boolean,System.Boolean)">
            <summary>
            根据文件路径创建文件配置源
            </summary>
            <param name="filePath">文件路径</param>
            <param name="optional">可选文件，设置 true 跳过文件存在检查</param>
            <param name="reloadOnChange">是否监听文件更改</param>
            <returns><see cref="T:Microsoft.Extensions.Configuration.FileConfigurationSource"/> 实例</returns>
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfigurationBuilderExtensions.TrySetParameter(System.Collections.Generic.IDictionary{System.String,System.Boolean},System.String,System.Boolean@)">
            <summary>
            设置 FileConfigurationSouce 参数
            </summary>
            <param name="parameters">字典参数结合</param>
            <param name="parameterName">参数名</param>
            <param name="value">参数值</param>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.IConfigurationExtensions">
            <summary>
            IConfiguration 接口拓展
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfigurationExtensions.Exists(Microsoft.Extensions.Configuration.IConfiguration,System.String)">
            <summary>
            判断配置节点是否存在
            </summary>
            <param name="configuration">配置对象</param>
            <param name="key">节点路径</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfigurationExtensions.Get``1(Microsoft.Extensions.Configuration.IConfiguration,System.String)">
            <summary>
            获取配置节点并转换成指定类型
            </summary>
            <typeparam name="T">节点类型</typeparam>
            <param name="configuration">配置对象</param>
            <param name="key">节点路径</param>
            <returns>节点类型实例</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfigurationExtensions.Get``1(Microsoft.Extensions.Configuration.IConfiguration,System.String,System.Action{Microsoft.Extensions.Configuration.BinderOptions})">
            <summary>
            获取配置节点并转换成指定类型
            </summary>
            <typeparam name="T">节点类型</typeparam>
            <param name="configuration">配置对象</param>
            <param name="key">节点路径</param>
            <param name="configureOptions">配置值绑定到指定类型额外配置</param>
            <returns>节点类型实例</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfigurationExtensions.Get(Microsoft.Extensions.Configuration.IConfiguration,System.String,System.Type)">
            <summary>
            获取节点配置
            </summary>
            <param name="configuration">配置对象</param>
            <param name="key">节点路径</param>
            <param name="type">节点类型</param>
            <returns><see cref="T:System.Object"/> 实例</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfigurationExtensions.Get(Microsoft.Extensions.Configuration.IConfiguration,System.String,System.Type,System.Action{Microsoft.Extensions.Configuration.BinderOptions})">
            <summary>
            获取节点配置
            </summary>
            <param name="configuration">配置对象</param>
            <param name="key">节点路径</param>
            <param name="type">节点类型</param>
            <param name="configureOptions">配置值绑定到指定类型额外配置</param>
            <returns><see cref="T:System.Object"/> 实例</returns>
        </member>
        <member name="T:Microsoft.Extensions.Localization.ILocalizerExtensions">
            <summary>
            <see cref="T:Microsoft.Extensions.Localization.IStringLocalizer"/> 和 <see cref="T:Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer"/> 拓展
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Localization.ILocalizerExtensions.GetString``1(Microsoft.Extensions.Localization.IStringLocalizer,System.Linq.Expressions.Expression{System.Func{``0,System.String}})">
            <summary>
            根据实体类属性名获取对应的多语言配置
            </summary>
            <typeparam name="TResource">通常命名为 SharedResource </typeparam>
            <param name="stringLocalizer"><see cref="T:Microsoft.Extensions.Localization.IStringLocalizer"/></param>
            <param name="propertyExpression">属性表达式</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.Localization.IStringLocalizerFactoryExtensions">
            <summary>
            IStringLocalizerFactory 拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Localization.IStringLocalizerFactoryExtensions.Create(Microsoft.Extensions.Localization.IStringLocalizerFactory)">
            <summary>
            创建默认多语言工厂
            </summary>
            <param name="stringLocalizerFactory"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.Logging.ILoggerExtensions">
            <summary>
            <see cref="T:Microsoft.Extensions.Logging.ILogger"/> 拓展
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggerExtensions.ScopeContext(Microsoft.Extensions.Logging.ILogger,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            配置日志上下文
            </summary>
            <param name="logger"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggerExtensions.ScopeContext(Microsoft.Extensions.Logging.ILogger,System.Action{Furion.Logging.LogContext})">
            <summary>
            配置日志上下文
            </summary>
            <param name="logger"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggerExtensions.ScopeContext(Microsoft.Extensions.Logging.ILogger,Furion.Logging.LogContext)">
            <summary>
            配置日志上下文
            </summary>
            <param name="logger"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.Logging.ILoggerFactoryExtensions">
            <summary>
            <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> 拓展
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggerFactoryExtensions.AddFile(Microsoft.Extensions.Logging.ILoggerFactory,System.String,System.Boolean)">
            <summary>
            添加文件日志记录器
            </summary>
            <param name="factory">日志工厂</param>
            <param name="fileName">日志文件完整路径或文件名，推荐 .log 作为拓展名</param>
            <param name="append">追加到已存在日志文件或覆盖它们</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggerFactoryExtensions.AddFile(Microsoft.Extensions.Logging.ILoggerFactory,System.String,System.Action{Furion.Logging.FileLoggerOptions})">
            <summary>
            添加文件日志记录器
            </summary>
            <param name="factory">日志工厂</param>
            <param name="fileName">日志文件完整路径或文件名，推荐 .log 作为拓展名</param>
            <param name="configure"></param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggerFactoryExtensions.AddFile(Microsoft.Extensions.Logging.ILoggerFactory,System.Action{Furion.Logging.FileLoggerOptions})">
            <summary>
            添加文件日志记录器
            </summary>
            <param name="factory">日志工厂</param>
            <param name="configure">文件日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggerFactoryExtensions.AddFile(Microsoft.Extensions.Logging.ILoggerFactory,System.Func{System.String},System.Action{Furion.Logging.FileLoggerOptions})">
            <summary>
            添加文件日志记录器
            </summary>
            <param name="factory">日志工厂</param>
            <param name="configuraionKey">获取配置文件对应的 Key</param>
            <param name="configure">文件日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggerFactoryExtensions.AddDatabase``1(Microsoft.Extensions.Logging.ILoggerFactory,System.IServiceProvider,System.Action{Furion.Logging.DatabaseLoggerOptions})">
            <summary>
            添加数据库日志记录器
            </summary>
            <typeparam name="TDatabaseLoggingWriter">实现自 <see cref="T:Furion.Logging.IDatabaseLoggingWriter"/></typeparam>
            <param name="factory">日志工厂</param>
            <param name="serviceProvider">服务提供器</param>
            <param name="configure">数据库日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggerFactoryExtensions.AddDatabase``1(Microsoft.Extensions.Logging.ILoggerFactory,System.IServiceProvider,System.String,System.Action{Furion.Logging.DatabaseLoggerOptions})">
            <summary>
            添加数据库日志记录器
            </summary>
            <typeparam name="TDatabaseLoggingWriter">实现自 <see cref="T:Furion.Logging.IDatabaseLoggingWriter"/></typeparam>
            <param name="factory">日志工厂</param>
            <param name="serviceProvider">服务提供器</param>
            <param name="configuraionKey">配置文件对于的 Key</param>
            <param name="configure">数据库日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggerFactoryExtensions.AddDatabase``1(Microsoft.Extensions.Logging.ILoggerFactory,System.Func{System.String},System.IServiceProvider,System.Action{Furion.Logging.DatabaseLoggerOptions})">
            <summary>
            添加数据库日志记录器
            </summary>
            <typeparam name="TDatabaseLoggingWriter">实现自 <see cref="T:Furion.Logging.IDatabaseLoggingWriter"/></typeparam>
            <param name="factory">日志工厂</param>
            <param name="configuraionKey">获取配置文件对应的 Key</param>
            <param name="serviceProvider">服务提供器</param>
            <param name="configure">数据库日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/></returns>
        </member>
        <member name="T:Microsoft.Extensions.Logging.ILoggingBuilderExtensions">
            <summary>
            日志构建器拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggingBuilderExtensions.AddFile(Microsoft.Extensions.Logging.ILoggingBuilder,System.String,System.Boolean)">
            <summary>
            添加文件日志记录器
            </summary>
            <param name="builder">日志构建器</param>
            <param name="fileName">日志文件完整路径或文件名，推荐 .log 作为拓展名</param>
            <param name="append">追加到已存在日志文件或覆盖它们</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggingBuilderExtensions.AddFile(Microsoft.Extensions.Logging.ILoggingBuilder,System.String,System.Action{Furion.Logging.FileLoggerOptions})">
            <summary>
            添加文件日志记录器
            </summary>
            <param name="builder">日志构建器</param>
            <param name="fileName">日志文件完整路径或文件名，推荐 .log 作为拓展名</param>
            <param name="configure">文件日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggingBuilderExtensions.AddFile(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{Furion.Logging.FileLoggerOptions})">
            <summary>
            添加文件日志记录器（从配置文件中）默认 Key 为："Logging:File"
            </summary>
            <param name="builder">日志构建器</param>
            <param name="configure">文件日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggingBuilderExtensions.AddFile(Microsoft.Extensions.Logging.ILoggingBuilder,System.Func{System.String},System.Action{Furion.Logging.FileLoggerOptions})">
            <summary>
            添加文件日志记录器（从配置文件中）
            </summary>
            <param name="builder">日志构建器</param>
            <param name="configuraionKey">获取配置文件对应的 Key</param>
            <param name="configure">文件日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggingBuilderExtensions.AddDatabase``1(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{Furion.Logging.DatabaseLoggerOptions})">
            <summary>
            添加数据库日志记录器
            </summary>
            <typeparam name="TDatabaseLoggingWriter">实现自 <see cref="T:Furion.Logging.IDatabaseLoggingWriter"/></typeparam>
            <param name="builder">日志构建器</param>
            <param name="configure">数据库日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggingBuilderExtensions.AddDatabase``1(Microsoft.Extensions.Logging.ILoggingBuilder,System.String,System.Action{Furion.Logging.DatabaseLoggerOptions})">
            <summary>
            添加数据库日志记录器
            </summary>
            <typeparam name="TDatabaseLoggingWriter">实现自 <see cref="T:Furion.Logging.IDatabaseLoggingWriter"/></typeparam>
            <param name="builder">日志构建器</param>
            <param name="configuraionKey">配置文件对于的 Key</param>
            <param name="configure">数据库日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggingBuilderExtensions.AddDatabase``1(Microsoft.Extensions.Logging.ILoggingBuilder,System.Func{System.String},System.Action{Furion.Logging.DatabaseLoggerOptions})">
            <summary>
            添加数据库日志记录器（从配置文件中）
            </summary>
            <typeparam name="TDatabaseLoggingWriter">实现自 <see cref="T:Furion.Logging.IDatabaseLoggingWriter"/></typeparam>
            <param name="builder">日志构建器</param>
            <param name="configuraionKey">获取配置文件对于的 Key</param>
            <param name="configure">数据库日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/></returns>
        </member>
        <member name="T:Microsoft.Extensions.Options.OptionsBuilderExtensions">
            <summary>
            OptionsBuilder 拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Options.OptionsBuilderExtensions.ConfigureBuilder``1(Microsoft.Extensions.Options.OptionsBuilder{``0},Microsoft.Extensions.Configuration.IConfiguration,System.Type)">
            <summary>
            配置选项构建器
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <param name="optionsBuilder">选项构建器实例</param>
            <param name="configuration">配置对象</param>
            <param name="optionsBuilderType">选项构建器类型，默认为 typeof(TOptions) </param>
            <returns>选项构建器实例</returns>
        </member>
        <member name="M:Microsoft.Extensions.Options.OptionsBuilderExtensions.ConfigureBuilders``1(Microsoft.Extensions.Options.OptionsBuilder{``0},Microsoft.Extensions.Configuration.IConfiguration,System.Type[])">
            <summary>
            配置多个选项构建器
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <param name="optionsBuilder">选项构建器实例</param>
            <param name="configuration">配置对象</param>
            <param name="optionsBuilderTypes">配置多个选项构建器</param>
            <returns>选项构建器实例</returns>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Microsoft.Extensions.Options.OptionsBuilderExtensions.ConfigureBuilder``1(Microsoft.Extensions.Options.OptionsBuilder{``0},System.Type)">
            <summary>
            配置选项构建器
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <param name="optionsBuilder">选项构建器实例</param>
            <param name="optionsBuilderType">选项构建器类型，默认为 typeof(TOptions) </param>
            <returns>选项构建器实例</returns>
        </member>
        <member name="M:Microsoft.Extensions.Options.OptionsBuilderExtensions.ConfigureBuilders``1(Microsoft.Extensions.Options.OptionsBuilder{``0},System.Type[])">
            <summary>
            配置多个选项构建器
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <param name="optionsBuilder">选项构建器实例</param>
            <param name="optionsBuilderTypes">配置多个选项构建器</param>
            <returns>选项构建器实例</returns>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Microsoft.Extensions.Options.OptionsBuilderExtensions.ConfigureDefaults``1(Microsoft.Extensions.Options.OptionsBuilder{``0},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            配置选项常规默认处理
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <param name="optionsBuilder">选项构建器实例</param>
            <param name="configuration">配置对象</param>
            <returns>选项构建器实例</returns>
        </member>
        <member name="M:Microsoft.Extensions.Options.OptionsBuilderExtensions.InvokeMapMethod(System.Object,System.Type,System.Type)">
            <summary>
            调用 OptionsBuilder{TOptions} 对应方法
            </summary>
            <param name="optionsBuilder">选项构建器实例</param>
            <param name="optionsBuilderType">选项构建器类型</param>
            <param name="builderInterface">构建器接口</param>
        </member>
        <member name="M:Microsoft.Extensions.Options.OptionsBuilderExtensions.BuildExpressionCallParameters(System.Reflection.MethodInfo,System.Boolean,System.Type[],System.Object[]@)">
            <summary>
            构建 Call 调用方法表达式参数
            </summary>
            <remarks>含实际传入参数</remarks>
            <param name="matchMethod">表达式匹配方法</param>
            <param name="isValidateMethod">是否校验方法</param>
            <param name="genericArguments">泛型参数</param>
            <param name="args">实际传入参数</param>
            <returns>调用参数表达式数组</returns>
        </member>
        <member name="M:Microsoft.Extensions.Options.OptionsBuilderExtensions.CreateDelegate(System.Type[],System.Type)">
            <summary>
            创建委托类型
            </summary>
            <param name="inputTypes">输入类型</param>
            <param name="outputType">输出类型</param>
            <returns>Action或Func 委托类型</returns>
        </member>
        <member name="T:System.GenericRunOptions">
            <summary>
            泛型主机方式配置选项
            </summary>
        </member>
        <member name="M:System.GenericRunOptions.#ctor">
            <summary>
            内部构造函数
            </summary>
        </member>
        <member name="P:System.GenericRunOptions.Default">
            <summary>
            默认配置
            </summary>
        </member>
        <member name="M:System.GenericRunOptions.Main(System.String[])">
            <summary>
            默认配置（带启动参数）
            </summary>
        </member>
        <member name="P:System.GenericRunOptions.DefaultSilence">
            <summary>
            默认配置（静默启动）
            </summary>
        </member>
        <member name="M:System.GenericRunOptions.MainSilence(System.String[])">
            <summary>
            默认配置（静默启动 + 启动参数）
            </summary>
        </member>
        <member name="M:System.GenericRunOptions.ConfigureBuilder(System.Func{Microsoft.Extensions.Hosting.IHostBuilder,Microsoft.Extensions.Hosting.IHostBuilder})">
            <summary>
            配置 <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder"/>
            </summary>
            <param name="configureAction">配置委托</param>
            <returns><see cref="T:System.GenericRunOptions"/></returns>
        </member>
        <member name="M:System.GenericRunOptions.ConfigureConfiguration(System.Action{Microsoft.Extensions.Hosting.IHostEnvironment,Microsoft.Extensions.Configuration.IConfigurationBuilder})">
            <summary>
            配置 <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/>
            </summary>
            <param name="configureAction">配置委托</param>
            <returns><see cref="T:System.RunOptions"/></returns>
        </member>
        <member name="M:System.GenericRunOptions.AddComponent``1">
            <summary>
            添加应用服务组件
            </summary>
            <typeparam name="TComponent">组件类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:System.GenericRunOptions.AddComponent``2(``1)">
            <summary>
            添加应用服务组件
            </summary>
            <typeparam name="TComponent">组件类型</typeparam>
            <typeparam name="TComponentOptions"></typeparam>
            <param name="options">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:System.GenericRunOptions.AddComponent(System.Type,System.Object)">
            <summary>
            添加应用服务组件
            </summary>
            <param name="componentType">组件类型</param>
            <param name="options">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:System.GenericRunOptions.Silence(System.Boolean,System.Boolean)">
            <summary>
            标识主机静默启动
            </summary>
            <remarks>不阻塞程序运行</remarks>
            <param name="silence">静默启动</param>
            <param name="logging">静默启动日志状态，默认 false</param>
            <returns></returns>
        </member>
        <member name="M:System.GenericRunOptions.WithArgs(System.String[])">
            <summary>
            设置进程启动参数
            </summary>
            <param name="args">启动参数</param>
            <returns></returns>
        </member>
        <member name="P:System.GenericRunOptions.ActionBuilder">
            <summary>
            自定义 <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder"/> 委托
            </summary>
        </member>
        <member name="P:System.GenericRunOptions.ActionConfigurationManager">
            <summary>
            自定义 <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/> 委托
            </summary>
        </member>
        <member name="P:System.GenericRunOptions.ServiceComponents">
            <summary>
            应用服务组件
            </summary>
        </member>
        <member name="P:System.GenericRunOptions.IsSilence">
            <summary>
            静默启动
            </summary>
            <remarks>不阻塞程序运行</remarks>
        </member>
        <member name="P:System.GenericRunOptions.SilenceLogging">
            <summary>
            启用静默启动日志
            </summary>
        </member>
        <member name="P:System.GenericRunOptions.Args">
            <summary>
            命令行参数
            </summary>
        </member>
        <member name="T:System.LegacyRunOptions">
            <summary>
            Web 泛型主机方式配置选项
            </summary>
        </member>
        <member name="M:System.LegacyRunOptions.#ctor">
            <summary>
            内部构造函数
            </summary>
        </member>
        <member name="P:System.LegacyRunOptions.Default">
            <summary>
            默认配置
            </summary>
        </member>
        <member name="M:System.LegacyRunOptions.Main(System.String[])">
            <summary>
            默认配置（带启动参数）
            </summary>
        </member>
        <member name="P:System.LegacyRunOptions.DefaultSilence">
            <summary>
            默认配置（静默启动）
            </summary>
        </member>
        <member name="M:System.LegacyRunOptions.MainSilence(System.String[])">
            <summary>
            默认配置（静默启动 + 启动参数）
            </summary>
        </member>
        <member name="M:System.LegacyRunOptions.ConfigureWebDefaults(System.Func{Microsoft.AspNetCore.Hosting.IWebHostBuilder,Microsoft.AspNetCore.Hosting.IWebHostBuilder})">
            <summary>
            配置 <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder"/>
            </summary>
            <param name="configureAction">配置委托</param>
            <returns><see cref="T:System.LegacyRunOptions"/></returns>
        </member>
        <member name="M:System.LegacyRunOptions.ConfigureConfiguration(System.Action{Microsoft.Extensions.Hosting.IHostEnvironment,Microsoft.Extensions.Configuration.IConfigurationBuilder})">
            <summary>
            配置 <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/>
            </summary>
            <param name="configureAction">配置委托</param>
            <returns><see cref="T:System.LegacyRunOptions"/></returns>
        </member>
        <member name="M:System.LegacyRunOptions.ConfigureBuilder(System.Func{Microsoft.Extensions.Hosting.IHostBuilder,Microsoft.Extensions.Hosting.IHostBuilder})">
            <summary>
            配置 <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder"/>
            </summary>
            <param name="configureAction">配置委托</param>
            <returns><see cref="T:System.LegacyRunOptions"/></returns>
        </member>
        <member name="M:System.LegacyRunOptions.AddComponent``1">
            <summary>
            添加应用服务组件
            </summary>
            <typeparam name="TComponent">组件类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:System.LegacyRunOptions.AddComponent``2(``1)">
            <summary>
            添加应用服务组件
            </summary>
            <typeparam name="TComponent">组件类型</typeparam>
            <typeparam name="TComponentOptions"></typeparam>
            <param name="options">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:System.LegacyRunOptions.AddComponent(System.Type,System.Object)">
            <summary>
            添加应用服务组件
            </summary>
            <param name="componentType">组件类型</param>
            <param name="options">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:System.LegacyRunOptions.UseComponent``1">
            <summary>
            添加应用中间件组件
            </summary>
            <typeparam name="TComponent">组件类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:System.LegacyRunOptions.UseComponent``2(``1)">
            <summary>
            添加应用中间件组件
            </summary>
            <typeparam name="TComponent">组件类型</typeparam>
            <typeparam name="TComponentOptions"></typeparam>
            <param name="options">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:System.LegacyRunOptions.UseComponent(System.Type,System.Object)">
            <summary>
            添加应用中间件组件
            </summary>
            <param name="componentType">组件类型</param>
            <param name="options">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:System.LegacyRunOptions.AddWebComponent``1">
            <summary>
            添加 IWebHostBuilder 组件
            </summary>
            <typeparam name="TComponent">组件类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:System.LegacyRunOptions.AddWebComponent``2(``1)">
            <summary>
            添加 IWebHostBuilder 组件
            </summary>
            <typeparam name="TComponent">组件类型</typeparam>
            <typeparam name="TComponentOptions"></typeparam>
            <param name="options">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:System.LegacyRunOptions.AddWebComponent(System.Type,System.Object)">
            <summary>
            添加 IWebHostBuilder 组件
            </summary>
            <param name="componentType">组件类型</param>
            <param name="options">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:System.LegacyRunOptions.Silence(System.Boolean,System.Boolean)">
            <summary>
            标识主机静默启动
            </summary>
            <remarks>不阻塞程序运行</remarks>
            <param name="silence">静默启动</param>
            <param name="logging">静默启动日志状态，默认 false</param>
            <returns></returns>
        </member>
        <member name="M:System.LegacyRunOptions.WithArgs(System.String[])">
            <summary>
            设置进程启动参数
            </summary>
            <param name="args">启动参数</param>
            <returns></returns>
        </member>
        <member name="P:System.LegacyRunOptions.ActionWebDefaultsBuilder">
            <summary>
            自定义 <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder"/> 委托
            </summary>
        </member>
        <member name="P:System.LegacyRunOptions.ApplicationComponents">
            <summary>
            应用中间件组件
            </summary>
        </member>
        <member name="P:System.LegacyRunOptions.WebComponents">
            <summary>
            IWebHostBuilder 组件
            </summary>
        </member>
        <member name="T:System.RunOptions">
            <summary>
            <see cref="T:Microsoft.AspNetCore.Builder.WebApplication"/> 方式配置选项
            </summary>
        </member>
        <member name="M:System.RunOptions.#ctor">
            <summary>
            内部构造函数
            </summary>
        </member>
        <member name="P:System.RunOptions.Default">
            <summary>
            默认配置
            </summary>
        </member>
        <member name="M:System.RunOptions.Main(System.String[])">
            <summary>
            默认配置（带启动参数）
            </summary>
        </member>
        <member name="P:System.RunOptions.DefaultSilence">
            <summary>
            默认配置（静默启动）
            </summary>
        </member>
        <member name="M:System.RunOptions.MainSilence(System.String[])">
            <summary>
            默认配置（静默启动 + 启动参数）
            </summary>
        </member>
        <member name="M:System.RunOptions.ConfigureOptions(Microsoft.AspNetCore.Builder.WebApplicationOptions)">
            <summary>
            配置 <see cref="T:Microsoft.AspNetCore.Builder.WebApplicationOptions"/>
            </summary>
            <param name="options"></param>
            <returns><see cref="T:System.RunOptions"/></returns>
        </member>
        <member name="M:System.RunOptions.ConfigureBuilder(System.Action{Microsoft.AspNetCore.Builder.WebApplicationBuilder})">
            <summary>
            配置 <see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/>
            </summary>
            <param name="configureAction"></param>
            <returns><see cref="T:System.RunOptions"/></returns>
        </member>
        <member name="M:System.RunOptions.Configure(System.Action{Microsoft.AspNetCore.Builder.WebApplication})">
            <summary>
            配置 <see cref="T:Microsoft.AspNetCore.Builder.WebApplication"/>
            </summary>
            <param name="configureAction">配置委托</param>
            <returns><see cref="T:System.RunOptions"/></returns>
        </member>
        <member name="M:System.RunOptions.ConfigureConfiguration(System.Action{Microsoft.Extensions.Hosting.IHostEnvironment,Microsoft.Extensions.Configuration.ConfigurationManager})">
            <summary>
            配置 <see cref="T:Microsoft.Extensions.Configuration.ConfigurationManager"/>
            </summary>
            <param name="configureAction">配置委托</param>
            <returns><see cref="T:System.RunOptions"/></returns>
        </member>
        <member name="M:System.RunOptions.AddComponent``1">
            <summary>
            添加应用服务组件
            </summary>
            <typeparam name="TComponent">组件类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:System.RunOptions.AddComponent``2(``1)">
            <summary>
            添加应用服务组件
            </summary>
            <typeparam name="TComponent">组件类型</typeparam>
            <typeparam name="TComponentOptions"></typeparam>
            <param name="options">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:System.RunOptions.AddComponent(System.Type,System.Object)">
            <summary>
            添加应用服务组件
            </summary>
            <param name="componentType">组件类型</param>
            <param name="options">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:System.RunOptions.UseComponent``1">
            <summary>
            添加应用中间件组件
            </summary>
            <typeparam name="TComponent">组件类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:System.RunOptions.UseComponent``2(``1)">
            <summary>
            添加应用中间件组件
            </summary>
            <typeparam name="TComponent">组件类型</typeparam>
            <typeparam name="TComponentOptions"></typeparam>
            <param name="options">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:System.RunOptions.UseComponent(System.Type,System.Object)">
            <summary>
            添加应用中间件组件
            </summary>
            <param name="componentType">组件类型</param>
            <param name="options">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:System.RunOptions.AddWebComponent``1">
            <summary>
            添加 WebApplicationBuilder 组件
            </summary>
            <typeparam name="TComponent">组件类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:System.RunOptions.AddWebComponent``2(``1)">
            <summary>
            添加 WebApplicationBuilder 组件
            </summary>
            <typeparam name="TComponent">组件类型</typeparam>
            <typeparam name="TComponentOptions"></typeparam>
            <param name="options">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:System.RunOptions.AddWebComponent(System.Type,System.Object)">
            <summary>
            添加 WebApplicationBuilder 组件
            </summary>
            <param name="componentType">组件类型</param>
            <param name="options">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:System.RunOptions.Silence(System.Boolean,System.Boolean)">
            <summary>
            标识主机静默启动
            </summary>
            <remarks>不阻塞程序运行</remarks>
            <param name="silence">静默启动</param>
            <param name="logging">静默启动日志状态，默认 false</param>
            <returns></returns>
        </member>
        <member name="M:System.RunOptions.WithArgs(System.String[])">
            <summary>
            设置进程启动参数
            </summary>
            <param name="args">启动参数</param>
            <returns></returns>
        </member>
        <member name="P:System.RunOptions.Options">
            <summary>
            <see cref="T:Microsoft.AspNetCore.Builder.WebApplicationOptions"/>
            </summary>
        </member>
        <member name="P:System.RunOptions.ActionBuilder">
            <summary>
            自定义 <see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/> 委托
            </summary>
        </member>
        <member name="P:System.RunOptions.ActionConfigure">
            <summary>
            自定义 <see cref="T:Microsoft.AspNetCore.Builder.WebApplication"/> 委托
            </summary>
        </member>
        <member name="P:System.RunOptions.ActionConfigurationManager">
            <summary>
            自定义 <see cref="T:Microsoft.Extensions.Configuration.ConfigurationManager"/> 委托
            </summary>
        </member>
        <member name="P:System.RunOptions.ServiceComponents">
            <summary>
            应用服务组件
            </summary>
        </member>
        <member name="P:System.RunOptions.WebComponents">
            <summary>
            WebApplicationBuilder 组件
            </summary>
        </member>
        <member name="P:System.RunOptions.ApplicationComponents">
            <summary>
            应用中间件组件
            </summary>
        </member>
        <member name="P:System.RunOptions.IsSilence">
            <summary>
            静默启动
            </summary>
            <remarks>不阻塞程序运行</remarks>
        </member>
        <member name="P:System.RunOptions.SilenceLogging">
            <summary>
            静默启动日志状态
            </summary>
        </member>
        <member name="P:System.RunOptions.Args">
            <summary>
            命令行参数
            </summary>
        </member>
        <member name="T:System.Serve">
            <summary>
            主机静态类
            </summary>
        </member>
        <member name="F:System.Serve.SilenceExcludesOfLogCategoryName">
            <summary>
            静默启动排除日志分类名
            </summary>
        </member>
        <member name="M:System.Serve.Run(System.String,System.Boolean,System.Boolean,System.String[])">
            <summary>
            启动默认 Web 主机，含最基础的 Web 注册
            </summary>
            <param name="urls">默认 5000/5001 端口</param>
            <param name="silence">静默启动</param>
            <param name="logging">静默启动日志状态，默认 false</param>
            <param name="args">启动参数</param>
        </member>
        <member name="M:System.Serve.Run(System.LegacyRunOptions,System.String)">
            <summary>
            启动泛型 Web 主机
            </summary>
            <remarks>未包含 Web 基础功能，需手动注册服务/中间件</remarks>
            <param name="options">配置选项</param>
            <param name="urls">默认 5000/5001 端口</param>
        </member>
        <member name="M:System.Serve.Run``1(System.LegacyRunOptions,System.String)">
            <summary>
            启动泛型 Web 主机
            </summary>
            <remarks>未包含 Web 基础功能，需手动注册服务/中间件</remarks>
            <typeparam name="TStartup">启动 Startup 类</typeparam>
            <param name="options">配置选项</param>
            <param name="urls">默认 5000/5001 端口</param>
        </member>
        <member name="M:System.Serve.Run(System.GenericRunOptions)">
            <summary>
            启动泛型通用主机
            </summary>
            <param name="options">配置选项</param>
        </member>
        <member name="M:System.Serve.Run(System.RunOptions,System.String)">
            <summary>
            启动 WebApplication 主机
            </summary>
            <remarks>未包含 Web 基础功能，需手动注册服务/中间件</remarks>
            <param name="options">配置选项</param>
            <param name="urls">默认 5000/5001 端口</param>
        </member>
        <member name="T:System.DependsOnAttribute">
            <summary>
            组件依赖配置特性
            </summary>
        </member>
        <member name="F:System.DependsOnAttribute._dependComponents">
            <summary>
            依赖组件列表
            </summary>
        </member>
        <member name="F:System.DependsOnAttribute._links">
            <summary>
            连接组件列表
            </summary>
        </member>
        <member name="M:System.DependsOnAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:System.DependsOnAttribute.#ctor(System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="dependComponents">依赖组件列表</param>
            <remarks>支持字符串类型程序集/类型配置</remarks>
        </member>
        <member name="P:System.DependsOnAttribute.DependComponents">
            <summary>
            依赖组件列表
            </summary>
        </member>
        <member name="P:System.DependsOnAttribute.Links">
            <summary>
            链接组件列表
            </summary>
        </member>
        <member name="P:System.DependsOnAttribute.LinkComponents">
            <summary>
            内部链接组件
            </summary>
        </member>
        <member name="T:System.ComponentContext">
            <summary>
            组件上下文
            </summary>
        </member>
        <member name="P:System.ComponentContext.ComponentType">
            <summary>
            组件类型
            </summary>
        </member>
        <member name="P:System.ComponentContext.CalledContext">
            <summary>
            上级组件上下文
            </summary>
        </member>
        <member name="P:System.ComponentContext.RootContext">
            <summary>
            根组件上下文
            </summary>
        </member>
        <member name="P:System.ComponentContext.DependComponents">
            <summary>
            依赖组件列表
            </summary>
        </member>
        <member name="P:System.ComponentContext.LinkComponents">
            <summary>
            链接组件列表
            </summary>
        </member>
        <member name="P:System.ComponentContext.Properties">
            <summary>
            上下文数据
            </summary>
        </member>
        <member name="P:System.ComponentContext.IsRoot">
            <summary>
            是否是根组件
            </summary>
        </member>
        <member name="M:System.ComponentContext.SetProperty``1(System.Object)">
            <summary>
            设置组件属性参数
            </summary>
            <typeparam name="TComponent">派生自 <see cref="T:System.ComponentModel.IComponent"/></typeparam>
            <param name="value">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:System.ComponentContext.SetProperty(System.Type,System.Object)">
            <summary>
            设置组件属性参数
            </summary>
            <param name="componentType">组件类型</param>
            <param name="value">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:System.ComponentContext.SetProperty(System.String,System.Object)">
            <summary>
            设置组件属性参数
            </summary>
            <param name="key">键</param>
            <param name="value">组件参数</param>
            <returns></returns>
        </member>
        <member name="M:System.ComponentContext.GetProperty``2">
            <summary>
            获取组件属性参数
            </summary>
            <typeparam name="TComponent">派生自 <see cref="T:System.ComponentModel.IComponent"/></typeparam>
            <typeparam name="TComponentOptions">组件参数类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:System.ComponentContext.GetProperty``1(System.Type)">
            <summary>
            获取组件属性参数
            </summary>
            <typeparam name="TComponentOptions">组件参数类型</typeparam>
            <param name="componentType">组件类型</param>
            <returns></returns>
        </member>
        <member name="M:System.ComponentContext.GetProperty``1(System.String)">
            <summary>
            获取组件属性参数
            </summary>
            <typeparam name="TComponentOptions">组件参数类型</typeparam>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:System.ComponentContext.GetProperties">
            <summary>
            获取组件所有依赖参数
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.IApplicationComponent">
            <summary>
            应用中间件接口
            </summary>
        </member>
        <member name="M:System.IApplicationComponent.Load(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,System.ComponentContext)">
            <summary>
            装置中间件
            </summary>
            <param name="app"><see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/></param>
            <param name="env"><see cref="T:Microsoft.AspNetCore.Hosting.IWebHostEnvironment"/></param>
            <param name="componentContext">组件上下文</param>
        </member>
        <member name="T:System.IServiceComponent">
            <summary>
            服务组件依赖接口
            </summary>
        </member>
        <member name="M:System.IServiceComponent.Load(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.ComponentContext)">
            <summary>
            装载服务
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <param name="componentContext">组件上下文</param>
        </member>
        <member name="T:System.IWebComponent">
            <summary>
            Web 组件依赖接口
            </summary>
            <remarks>注意，此时 Furion 还未载入</remarks>
        </member>
        <member name="M:System.IWebComponent.Load(Microsoft.AspNetCore.Builder.WebApplicationBuilder,System.ComponentContext)">
            <summary>
            装置 Web 应用构建器
            </summary>
            <remarks>注意，此时 Furion 还未载入</remarks>
            <param name="builder"><see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/></param>
            <param name="componentContext">组件上下文</param>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.DataValidationAttribute">
            <summary>
            数据类型验证特性
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DataValidationAttribute.#ctor(System.ComponentModel.DataAnnotations.ValidationPattern,System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="validationPattern">验证逻辑</param>
            <param name="validationTypes"></param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DataValidationAttribute.#ctor(System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="validationTypes"></param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DataValidationAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            验证逻辑
            </summary>
            <param name="value"></param>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DataValidationAttribute.ValidationTypes">
            <summary>
            验证类型
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DataValidationAttribute.ValidationPattern">
            <summary>
            验证逻辑
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DataValidationAttribute.AllowEmptyStrings">
             <summary>
            是否允许空字符串
             </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DataValidationAttribute.AllowNullValue">
            <summary>
            允许空值，有值才验证，默认 false
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.ValidationPattern">
            <summary>
            验证逻辑
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.ValidationPattern.AllOfThem">
            <summary>
            全部都要验证通过
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.ValidationPattern.AtLeastOne">
            <summary>
            至少一个验证通过
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.SensitiveDetectionAttribute">
            <summary>
            脱敏词汇检查（脱敏处理）
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.SensitiveDetectionAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.SensitiveDetectionAttribute.#ctor(System.Char)">
            <summary>
            构造函数
            </summary>
            <param name="transfer"></param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.SensitiveDetectionAttribute.Transfer">
            <summary>
            替换为指定字符
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.SensitiveDetectionAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            验证逻辑
            </summary>
            <param name="value"></param>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:System.DynamicApiControllerAttribute">
            <summary>
            动态 WebApi 特性
            </summary>
        </member>
        <member name="T:System.Text.Json.SystemTextJsonExtensions">
            <summary>
            System.Text.Json 拓展
            </summary>
        </member>
        <member name="M:System.Text.Json.SystemTextJsonExtensions.AddDateFormatString(System.Collections.Generic.IList{System.Text.Json.Serialization.JsonConverter},System.String,System.Boolean)">
            <summary>
            添加时间格式化
            </summary>
            <param name="converters"></param>
            <param name="outputFormat"></param>
            <param name="localized">自动转换 DateTimeOffset 为当地时间</param>
        </member>
        <member name="T:System.Linq.IEnumerableExtensions">
            <summary>
            IEnumerable 拓展
            </summary>
        </member>
        <member name="M:System.Linq.IEnumerableExtensions.Where``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件成立再构建 Where 查询
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <param name="condition">布尔条件</param>
            <param name="expression">表达式</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="M:System.Linq.IEnumerableExtensions.Where``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            根据条件成立再构建 Where 查询，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <param name="condition">布尔条件</param>
            <param name="expression">表达式</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="M:System.Linq.IEnumerableExtensions.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
            <summary>
            与操作合并多个表达式
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <param name="expressions">表达式数组</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="M:System.Linq.IEnumerableExtensions.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}}[])">
            <summary>
            与操作合并多个表达式，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <param name="expressions">表达式数组</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="M:System.Linq.IEnumerableExtensions.Where``1(System.Linq.IQueryable{``0},System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}}[])">
            <summary>
            根据条件成立再构建 WhereOr 查询
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <param name="conditionExpressions">条件表达式</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="M:System.Linq.IEnumerableExtensions.Where``1(System.Linq.IQueryable{``0},System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}}}[])">
            <summary>
            根据条件成立再构建 WhereOr 查询，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <param name="conditionExpressions">条件表达式</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="M:System.Linq.IEnumerableExtensions.Where``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            根据条件成立再构建 Where 查询
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <param name="condition">布尔条件</param>
            <param name="expression">表达式</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="M:System.Linq.IEnumerableExtensions.Where``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            根据条件成立再构建 Where 查询，支持索引器
            </summary>
            <typeparam name="TSource">泛型类型</typeparam>
            <param name="sources">集合对象</param>
            <param name="condition">布尔条件</param>
            <param name="expression">表达式</param>
            <returns>新的集合对象</returns>
        </member>
        <member name="T:System.LoggingMonitorAttribute">
            <summary>
            强大的日志监听器
            </summary>
            <remarks>主要用于将请求的信息打印出来</remarks>
        </member>
        <member name="F:System.LoggingMonitorAttribute.FilterOrder">
            <summary>
            过滤器排序
            </summary>
        </member>
        <member name="P:System.LoggingMonitorAttribute.Order">
            <summary>
            排序属性
            </summary>
        </member>
        <member name="F:System.LoggingMonitorAttribute.LOG_CATEGORY_NAME">
            <summary>
            日志 LogName
            </summary>
            <remarks>方便对日志进行过滤写入不同的存储介质中</remarks>
        </member>
        <member name="F:System.LoggingMonitorAttribute.LOG_CONTEXT_NAME">
            <summary>
            日志上下文统一 Key
            </summary>
        </member>
        <member name="M:System.LoggingMonitorAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:System.LoggingMonitorAttribute.#ctor(Furion.Logging.LoggingMonitorSettings)">
            <summary>
            构造函数
            </summary>
            <param name="settings"></param>
        </member>
        <member name="P:System.LoggingMonitorAttribute.Title">
            <summary>
            日志标题
            </summary>
        </member>
        <member name="P:System.LoggingMonitorAttribute.WithReturnValue">
            <summary>
            是否记录返回值
            </summary>
            <remarks>bool 类型，默认输出</remarks>
        </member>
        <member name="P:System.LoggingMonitorAttribute.ReturnValueThreshold">
            <summary>
            设置返回值阈值
            </summary>
            <remarks>配置返回值字符串阈值，超过这个阈值将截断，默认全量输出</remarks>
        </member>
        <member name="P:System.LoggingMonitorAttribute.Settings">
            <summary>
            配置信息
            </summary>
        </member>
        <member name="M:System.LoggingMonitorAttribute.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            监视 Action 执行
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.GenerateAuthorizationTemplate(Furion.Logging.LogContext,System.Security.Claims.ClaimsPrincipal,Microsoft.Extensions.Primitives.StringValues)">
            <summary>
            生成 JWT 授权信息日志模板
            </summary>
            <param name="logContext"></param>
            <param name="claimsPrincipal"></param>
            <param name="authorization"></param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.GenerateParameterTemplate(Furion.Logging.LogContext,System.Collections.Generic.IDictionary{System.String,System.Object},System.Reflection.MethodInfo,Microsoft.Extensions.Primitives.StringValues)">
            <summary>
            生成请求参数信息日志模板
            </summary>
            <param name="logContext"></param>
            <param name="parameterValues"></param>
            <param name="method"></param>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.GenerateReturnInfomationTemplate(Furion.Logging.LogContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext,System.Reflection.MethodInfo,Furion.Logging.LoggingMonitorMethod)">
            <summary>
            生成返回值信息日志模板
            </summary>
            <param name="logContext"></param>
            <param name="resultContext"></param>
            <param name="method"></param>
            <param name="monitorMethod"></param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.GenerateExcetpionInfomationTemplate(Furion.Logging.LogContext,System.Exception,System.Boolean)">
            <summary>
            生成异常信息日志模板
            </summary>
            <param name="logContext"></param>
            <param name="exception"></param>
            <param name="isValidationException">是否是验证异常</param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.SerializeObject(System.Object)">
            <summary>
            序列化对象
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.CheckIsSetWithReturnValue(System.Object,Furion.Logging.LoggingMonitorMethod)">
            <summary>
            检查是否开启启用返回值
            </summary>
            <param name="withReturnValue"></param>
            <param name="monitorMethod"></param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.CheckIsSetReturnValueThreshold(System.Object,Furion.Logging.LoggingMonitorMethod)">
            <summary>
            检查是否设置返回值阈值
            </summary>
            <param name="returnValueThreshold"></param>
            <param name="monitorMethod"></param>
            <returns></returns>
        </member>
        <member name="T:System.SuppressMonitorAttribute">
            <summary>
            控制跳过日志监视
            </summary>
            <remarks>作用于全局 <see cref="T:System.LoggingMonitorAttribute"/></remarks>
        </member>
        <member name="T:System.Logging.StringLogging">
            <summary>
            字符串日志拓展默认分类名
            </summary>
        </member>
        <member name="T:System.Net.Http.HttpRequestMessageExtensions">
            <summary>
            HttpRequestMessage 拓展
            </summary>
        </member>
        <member name="M:System.Net.Http.HttpRequestMessageExtensions.AppendQueries(System.Net.Http.HttpRequestMessage,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            追加查询参数
            </summary>
            <param name="httpRequest"></param>
            <param name="queries"></param>
            <param name="isEncode"></param>
        </member>
        <member name="M:System.Net.Http.HttpRequestMessageExtensions.AppendQueries(System.Net.Http.HttpRequestMessage,System.Object,System.Boolean)">
            <summary>
            追加查询参数
            </summary>
            <param name="httpRequest"></param>
            <param name="queries"></param>
            <param name="isEncode"></param>
        </member>
    </members>
</doc>
